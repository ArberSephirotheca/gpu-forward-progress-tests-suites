#!amber

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_3 {
 uint num_workgroup;
 bvec3 _f0;
 vec2 _f1;
} ;

struct _GLF_struct_0 {
 vec4 _f0;
 vec4 _f1;
 vec4 _f2;
 mat3x4 _f3;
 float _f4;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 _GLF_struct_0 _f1;
 uvec4 _f2;
 vec4 _f3;
 bool _f4;
} ;

struct _GLF_struct_2 {
 vec4 _f0;
 uvec2 _f1;
 uint subgroup_local_id;
 bvec3 _f2;
 _GLF_struct_1 _f3;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_2 _GLF_struct_replacement_2 = _GLF_struct_2(vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(degrees(-6440.0489))))), uvec2(1u), gl_SubgroupInvocationID, bvec3(true), _GLF_struct_1(mat4x2(1.0), _GLF_struct_0(vec4(_GLF_IDENTITY(1.0, (1.0) - 0.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), mat4(1.0) * (vec4(1.0))), min(vec4(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), 1.0))), _GLF_IDENTITY(vec4(1.0), vec4(mat2x4(vec4(1.0), determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)), 1.0, 0.0, 1.0))))), vec4(1.0), mat3x4(1.0), 1.0), uvec4(1u), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(9.0)), bool(false))))), true));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, true && (false)))))))
    barrier();
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, mix(float(_GLF_FUZZED(_GLF_IDENTITY(4.4, float(vec4(4.4, 1.0, 1.0, 0.0))))), float(injectionSwitch.y), bool(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) < _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, ! (! (false)))))) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (false)) || (_GLF_IDENTITY(false, ! (! (false)))))) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))) || (_GLF_IDENTITY(false, ! (! (false)))))) || false)) || false)) || false), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(7.4))), (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(554.029, -9292.8648)))).y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y) : _GLF_FUZZED(61.98))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, float(vec4(injectionSwitch.y, abs(0.0), 0.0, 1.0))), injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y) : _GLF_FUZZED(61.98))), 0.0), vec2(vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat4x3(max(injectionSwitch.y, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)) + (0.0)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), bool(true)))), injectionSwitch.y) : _GLF_FUZZED(61.98))), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(vec4(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), float(mat3x4(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0)))) / 1.0), 0.0, 1.0, 0.0))), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)), mix(float(_GLF_FUZZED(-5.9)), float(_GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), float(mat4x3(max(injectionSwitch.y, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0)))), bool(true)))), injectionSwitch.y) : _GLF_FUZZED(61.98)))), float(_GLF_FUZZED(-443.895)), bool(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))), 0.0))))), mix(float(float(_GLF_IDENTITY(vec2(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y) : _GLF_FUZZED(61.98))), 0.0), vec2(vec2(vec2(_GLF_IDENTITY(_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) : _GLF_FUZZED(61.98))), log(1.0) + (_GLF_IDENTITY(clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y), (true ? clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)) : _GLF_FUZZED(61.98))))), 0.0)))))), float(_GLF_FUZZED(-4.0)), bool(false))))), injectionSwitch.y, injectionSwitch.y))) / cos(0.0))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), true)))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
      {
       barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || ((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false || ((! (_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y)), false || (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(gl_NumWorkGroups.x, bvec3(true), vec2(1.0));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           break;
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   return;
   for(int _injected_loop_counter = ((-86374 & 0) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(3), (int(3)) | 0), ~ (~ (int(3)))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec3(_GLF_IDENTITY(bvec3((false), false, true), bvec3(bvec3(bvec3((false), false, true))))))))))))) && true), false || (! (_GLF_IDENTITY(false, ! (! (false))))))))));
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), false, true))))
          barrier();
         for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) / 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | 0))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0)))); _injected_loop_counter ++)
              {
               barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ((false)) || false)))))) || false), (false) || false), true, false)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false), (false) || false), true, false))))), (! ((_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))) || false), (false) || false), true, false)))))) || false))), (! (_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), true, false))))) && true))), bool(bvec4(false, false, false, false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true, false)))), true && (bool(_GLF_IDENTITY(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), bool(bvec3(bool(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0)), true, false))))))); _injected_loop_counter --)
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], mix(float(_GLF_IDENTITY((injectionSwitch)[1], float(vec4((injectionSwitch)[1], 0.0, 1.0, 1.0)))), float(_GLF_FUZZED(-453.943)), bool(false)))), vec2(_GLF_FUZZED(136.729), _GLF_FUZZED(3.2)), bvec2(false, false))).x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(17.31)), float(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), bool(true))))), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(17.31)), float(float(mat3(injectionSwitch.y, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))), bool(true)))))))))))
            barrier();
           for(int _injected_loop_counter = (0 & 13586); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       return;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))))
    barrier();
   return;
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), true))))), true && (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), true))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), bool(bvec2(bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec2(bvec2(injectionSwitch.x > injectionSwitch.y, true))))), true)))))) && true))))))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, 1u * (workgroup_base + subgroup_id * subgroup_size)) + _GLF_struct_replacement_2.subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 | 1) << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))), (! (_GLF_IDENTITY(true, bool(bvec4(true, false, true, false))))) || false))))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(workgroup_base, clamp(workgroup_base, workgroup_base, workgroup_base)))) + subgroup_id * subgroup_size + _GLF_IDENTITY((_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, min(_GLF_struct_replacement_2.subgroup_local_id, _GLF_struct_replacement_2.subgroup_local_id)) + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))) - 0u), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ (_GLF_IDENTITY(~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) * 1u))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), clamp(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) << 0u)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_struct_replacement_2.subgroup_local_id)) + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) / 1u)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) << 0u), 1u)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)), (uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))) + 0u)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))))) % _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (1u | ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 1u)))), max((_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, min(_GLF_struct_replacement_2.subgroup_local_id, _GLF_struct_replacement_2.subgroup_local_id)) + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))) - 0u), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ (_GLF_IDENTITY(~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) * 1u))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), clamp(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) << 0u)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_struct_replacement_2.subgroup_local_id)) + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) / 1u)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) << 0u), 1u)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)), (uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))) + 0u)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))))) % _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (1u | ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 1u)))), (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, min(_GLF_struct_replacement_2.subgroup_local_id, _GLF_struct_replacement_2.subgroup_local_id)) + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), min(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))) - 0u), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ (_GLF_IDENTITY(~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (~ (~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) * 1u))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), clamp(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), _GLF_IDENTITY(max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1))), (max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))) << 0u)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id, (false ? _GLF_FUZZED(workgroup_base) : _GLF_struct_replacement_2.subgroup_local_id)) + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + _GLF_IDENTITY(1, min(1, 1)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), (((_GLF_struct_replacement_2.subgroup_local_id + 1))) << 0u))))))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) / 1u)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ (_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), uint(uvec2(_GLF_IDENTITY((_GLF_struct_replacement_2.subgroup_local_id + 1), ((_GLF_struct_replacement_2.subgroup_local_id + 1)) << 0u), 1u)))), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u)), (uint(uvec3(((_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ONE(1.0, injectionSwitch.y)), 0u))) + 0u)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), clamp(_GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), min(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), _GLF_IDENTITY(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), max(~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)), ~ ((_GLF_struct_replacement_2.subgroup_local_id + 1)))))))))))) % _GLF_IDENTITY(subgroup_size, uint(uvec3(subgroup_size, (1u | ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u)))), 1u))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
  {
   _GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-32998) : (1) << 0))), 1, 0, 1)), max(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), min(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), clamp(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), (ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)) >> ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))) << ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1))))), (_GLF_IDENTITY(buf[virtual_gid] = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)), max(int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (false ? _GLF_FUZZED(-92912) : _GLF_IDENTITY(1, (1) << 0))), 1, 0, 1), min(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), clamp(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (1) << 0), 1))) << 0), 1, 0, 1), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))) << ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))), int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1))))), (buf[virtual_gid] = _GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)), max(int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(ivec4(-83045, 88722, 24416, 47805)) : ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1))), min(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), clamp(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))) << ivec4(0, 0, 0, 0)), ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)))), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)), (true ? _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1)), (int(ivec4(_GLF_IDENTITY(1, (1) << 0), 1, 0, 1))) << 0) : _GLF_FUZZED(-63184))))))) | _GLF_IDENTITY(0u, uint(uvec3(0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))), (0u | (0u & 46798u))))))) << 0u);
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false)))), ! (! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) || false) && true)))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        continue;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), min(~ (_GLF_struct_replacement_2.subgroup_local_id + _GLF_IDENTITY(1, clamp(1, 1, 1))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_struct_replacement_2.subgroup_local_id + 1)), uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_struct_replacement_2.subgroup_local_id + _GLF_IDENTITY(1, (1) | (1))) >> 0u))))))))) * (0u ^ 1u)), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), min(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_struct_replacement_2.subgroup_local_id + 1) >> 0u))))))), (~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), min(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_struct_replacement_2.subgroup_local_id + 1) >> 0u)))))))) | 0u))) * (0u ^ 1u)), 1u, (1u | 1u)), (uvec3(_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, ~ (_GLF_IDENTITY(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), min(~ (_GLF_struct_replacement_2.subgroup_local_id + 1), ~ (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (_GLF_IDENTITY(_GLF_struct_replacement_2.subgroup_local_id + 1, (_GLF_struct_replacement_2.subgroup_local_id + 1) >> 0u))))))))) * (0u ^ 1u)), 1u, (1u | 1u))) * uvec3(1u, 1u, 1u)))) < subgroup_size)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bool(_GLF_DEAD(false))), bool(bool(bool(bool(_GLF_DEAD(false)))))))) || false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           return;
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           barrier();
           if(_GLF_DEAD(false))
            return;
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(false, (false) && true), false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true))), false))))))))), (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), bvec2(_GLF_IDENTITY(bvec2(bvec2(false, false)), bvec2(bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), false))), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), _GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), true)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))), bvec3(bvec4(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), true)), bvec3(bvec4(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true), true)), false)))), bvec3(bvec3(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, true)))))), false))), true)))))), false))))))))), (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(2.6, 9.0)))).x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-0.2)), bool(false))) > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), mix(float(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * mat2(_GLF_IDENTITY(1.0, (1.0) / 1.0)))))).x), float(_GLF_FUZZED(-0.2)), bool(false))) > injectionSwitch.y)))))), _GLF_IDENTITY(false, (false) && true) || _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : injectionSwitch.y))) / 1.0)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), bool(bvec4(bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, false)), _GLF_IDENTITY(false, ! (! (false))), false, true)))))) || _GLF_IDENTITY(((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), min((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-1.8, float(vec2(-1.8, 0.0)))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.6)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-1.8), min(_GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0))))))))))))), (_GLF_IDENTITY(((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), min((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-1.8, float(vec2(-1.8, 0.0)))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.6)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-1.8), min(_GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0))))))))))))), (((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), min((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(_GLF_IDENTITY(-1.8, float(vec2(-1.8, 0.0)))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(9.6)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), clamp((_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(-1.8), min(_GLF_FUZZED(-1.8), _GLF_FUZZED(-1.8))) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (! (false))) ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)), (_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(7498.9975) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-1.8) : injectionSwitch.y))))) / _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-2.6))), 1.0)), 1.0)))))))))))))) || false)) && true))))))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, 0 | _GLF_IDENTITY((1), ((1)) / 1))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            return;
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-7.0)))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         return;
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false || (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
                  break;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
               barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))))
              barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)))).y))))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         barrier();
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, 0 + _GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY((0), ((0)) / 1)), 1 * (~ (_GLF_IDENTITY((0), ((0)) / 1)))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), bool(bool(bool(true)))))))))))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && ((false) || false)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0)))), (true ? _GLF_IDENTITY(int(4), _GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), int(_GLF_IDENTITY(ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))), 1, (1 & 1), 0), (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))), 1, (1 & 1), 0)) | (ivec4(_GLF_IDENTITY(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), clamp(_GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))), _GLF_IDENTITY(int(4), clamp(int(4), int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))))), 1, (1 & 1), 0)))))) : _GLF_FUZZED(49518)))) >> _GLF_IDENTITY(int(4), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          continue;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3(_GLF_IDENTITY(injectionSwitch.y, float(mat4x2(injectionSwitch.y, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0))), 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0)))))))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (true))), false)), false || (bool(bvec4(false, false, true, false))))), bool(bvec2(! (_GLF_IDENTITY(bool(bvec4(false, false, true, false)), false || (bool(bvec4(false, false, true, false))))), true))))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           continue;
          }
         break;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(2, clamp(2, 2, 2))), 4, 64, 0);
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) | (int(3))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), false || (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
        return;
       continue;
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, false || (false)) || (false))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((false), ! (! ((false))))))))))))) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ! (! (bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y)))) || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), true, false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))), false, false)), ! (! (bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))), false, false))))))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   subgroupAll(_GLF_IDENTITY(false, false || (false)));
   for(int _injected_loop_counter = _GLF_IDENTITY(1, (false ? _GLF_FUZZED(-64067) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))), (bool(false)) || false)), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), (_GLF_IDENTITY(_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), bool(bool((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))), ! (! (_GLF_IDENTITY((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false))), bool(bool((bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))))))) || false))) || false))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, (false) && true)), true && (bool(_GLF_IDENTITY(false, (false) && true))))))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, 1.0)), (vec2(vec4(injectionSwitch, 1.0, 1.0))) * mat2(1.0))).y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) || false)))) && true)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-3922.3399)), float(injectionSwitch.x), bool(true)))), float(_GLF_FUZZED(2.5)), bool(false))) > injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-6962.8933, -69.34)))).x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(false, bool(bool(false))) || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     for(int _injected_loop_counter = ((_GLF_IDENTITY(0 ^ 1, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(0 ^ 1, min(0 ^ 1, 0 ^ 1))))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, 0u + (_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))) | (next_virtual_gid), 1u * (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))) | (next_virtual_gid), 0u ^ (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))) | (next_virtual_gid), ((0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))) | (next_virtual_gid)) | ((0u >> _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) << 0u))) | (next_virtual_gid))))))))))], uint(2), 4, 64, 0);
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     subgroupAll(true);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))
        {
        }
       else
        {
         barrier();
        }
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), false, true, false))))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
