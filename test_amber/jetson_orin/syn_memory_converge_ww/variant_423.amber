#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_25 {
 mat2 _f0;
 vec3 _f1;
 mat4 _f2;
 vec4 _f3;
 mat2 _f4;
} ;

struct _GLF_struct_24 {
 mat3 _f0;
 int _f1;
 int _f2;
 vec4 _f3;
 uvec2 _f4;
 bvec4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_23 {
 uint _f0;
 bvec4 _f1;
} ;

struct _GLF_struct_22 {
 bvec2 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_26 {
 _GLF_struct_22 _f0;
 _GLF_struct_23 _f1;
 _GLF_struct_24 _f2;
 ivec4 _f3;
 mat2x4 _f4;
 _GLF_struct_25 _f5;
 vec2 _f6;
} ;

struct _GLF_struct_20 {
 float _f0;
 ivec2 _f1;
 uint read_val;
 mat3 _f2;
 bvec4 _f3;
} ;

struct _GLF_struct_21 {
 bvec3 _f0;
 bvec4 _f1;
 mat2x4 _f2;
 uvec4 _f3;
 _GLF_struct_20 _f4;
} ;

struct _GLF_struct_18 {
 uint _f0;
 mat4x2 _f1;
} ;

struct _GLF_struct_17 {
 mat3 _f0;
 bvec3 _f1;
 mat3x4 _f2;
 ivec3 _f3;
} ;

struct _GLF_struct_16 {
 float _f0;
 bvec2 _f1;
 mat2x3 _f2;
 uvec3 _f3;
 bvec4 _f4;
 ivec3 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 bool _f3;
 uvec3 _f4;
 ivec3 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_14 {
 ivec2 _f0;
 uvec2 _f1;
 ivec4 _f2;
 mat4x3 _f3;
 mat2 _f4;
 mat4x3 _f5;
 uvec2 _f6;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 uvec4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_19 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 vec3 _f2;
 _GLF_struct_15 _f3;
 _GLF_struct_16 _f4;
 _GLF_struct_17 _f5;
 _GLF_struct_18 _f6;
} ;

struct _GLF_struct_27 {
 bvec4 _f0;
 _GLF_struct_19 _f1;
 uvec3 _f2;
 vec3 _f3;
 _GLF_struct_21 _f4;
 _GLF_struct_26 _f5;
} ;

struct _GLF_struct_10 {
 vec2 _f0;
 float _f1;
 ivec3 _f2;
 vec2 _f3;
 vec4 _f4;
 vec2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_9 {
 float _f0;
} ;

struct _GLF_struct_8 {
 uvec3 _f0;
 vec4 _f1;
 mat2 _f2;
 bool _f3;
 bvec3 _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_11 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 uint num_workgroup;
 _GLF_struct_10 _f2;
} ;

struct _GLF_struct_6 {
 bvec4 _f0;
 uint _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_5 {
 ivec3 _f0;
 vec3 _f1;
 mat3x2 _f2;
 mat2 _f3;
 uint _f4;
 mat2x3 _f5;
} ;

struct _GLF_struct_7 {
 mat2x3 _f0;
 uvec3 _f1;
 mat2x4 _f2;
 _GLF_struct_5 _f3;
 mat2 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_3 {
 vec3 _f0;
 mat4 _f1;
} ;

struct _GLF_struct_2 {
 bvec2 _f0;
} ;

struct _GLF_struct_1 {
 bvec3 _f0;
 uint _f1;
 mat4 _f2;
 mat2x3 _f3;
 ivec2 _f4;
 float _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_0 {
 ivec4 _f0;
 bvec3 _f1;
 mat3 _f2;
 mat4x2 _f3;
 ivec3 _f4;
 vec4 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 mat4x3 _f1;
 _GLF_struct_1 _f2;
 _GLF_struct_2 _f3;
 mat3x4 _f4;
 _GLF_struct_3 _f5;
} ;

struct _GLF_struct_12 {
 _GLF_struct_4 _f0;
 _GLF_struct_7 _f1;
 vec2 _f2;
 ivec2 _f3;
 _GLF_struct_11 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | _GLF_IDENTITY(0, 0 | (0)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
          {
           for(int _injected_loop_counter = ((1 ^ 0) | (1 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(_GLF_struct_4(_GLF_struct_0(ivec4(1), bvec3(true), mat3(_GLF_IDENTITY(1.0, float(mat2x3(1.0, 0.0, 0.0, 1.0, 1.0, 1.0)))), mat4x2(1.0), ivec3(1), vec4(1.0)), mat4x3(1.0), _GLF_struct_1(bvec3(true), 1u, mat4(1.0), mat2x3(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0 * (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), max(1.0, 1.0)), clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), _GLF_IDENTITY(1.0, max(1.0, 1.0)))))), _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(36.00)), float(_GLF_IDENTITY(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x2(_GLF_IDENTITY(1.0, (1.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, abs(0.0), 1.0, length(vec2(0.0, 0.0))), (false ? _GLF_FUZZED(mat3x2(942.348, -411.280, 55.80, 691.438, -8.7, -7.9)) : mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(12.55) : 1.0)), (_GLF_IDENTITY(1.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(12.55) : 1.0))) * 1.0), (1.0) / determinant(mat2(1.0, 0.0, 0.0, 1.0))), 1.0, 0.0, abs(0.0), 1.0, length(vec2(0.0, 0.0))))))), (true ? 1.0 : _GLF_FUZZED(asinh(64.03))))), bool(true))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(float(1.0)), max(float(float(1.0)), _GLF_IDENTITY(float(float(_GLF_IDENTITY(1.0, sqrt(1.0) * (1.0)))), (true ? float(float(_GLF_IDENTITY(1.0, min(1.0, 1.0)))) : _GLF_IDENTITY(_GLF_FUZZED(-2.4), 0.0 + (_GLF_FUZZED(-2.4))))))))))), ivec2(1), 1.0, mat4x2(1.0)), _GLF_struct_2(bvec2(true)), mat3x4(1.0), _GLF_struct_3(vec3(1.0), mat4(1.0))), _GLF_struct_7(mat2x3(1.0), uvec3(1u), mat2x4(1.0), _GLF_struct_5(ivec3(1), vec3(1.0), mat3x2(1.0), mat2(1.0), 1u, mat2x3(1.0)), mat2(1.0), _GLF_struct_6(bvec4(true), 1u, mat4x3(1.0))), vec2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-7099.5102)), bool(false))), min(1.0, 1.0))), ivec2(1), _GLF_struct_11(_GLF_struct_8(uvec3(1u), vec4(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-1.1)))), mat2(1.0), _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (true) || false))), bvec3(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))), uvec4(1u)), _GLF_struct_9(1.0), gl_NumWorkGroups.x, _GLF_struct_10(vec2(1.0), 1.0, ivec3(1), vec2(_GLF_IDENTITY(1.0, min(1.0, 1.0))), vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : vec2(1.0))), mix(vec2(_GLF_FUZZED(-8.9), (vec2(1.0))[1]), vec2((vec2(1.0))[0], _GLF_FUZZED(((-9.3 >= -14.71) ? 38.50 : float(194958u)))), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(bvec4(bvec2(true, false), true, true)), _GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(true, false), true, true)), false, true)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec4(bvec2(bvec4(bvec2(true, false), true, true)), false, true)), bvec2(bvec4(bvec2(bvec4(bvec2(bvec4(bvec2(true, false), true, true)), false, true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))), false, false))))))), ivec4(1))));
 uint workgroup_size = gl_WorkGroupSize.x;
 do
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false), bvec2(bvec2(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), false)))), true, false))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = ((-53577 << -41724) & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(2.4)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), _GLF_IDENTITY(false, ! (! (false))))), bvec3(bvec3(bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))), _GLF_IDENTITY(false, ! (! (false))))))))))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, 0.0, 1.0, exp(0.0), 0.0, exp(0.0), cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0)), min(float(mat3x4(injectionSwitch.y, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, min(0.0, 0.0)) : _GLF_FUZZED(-66.54)))) + 0.0), 1.0, exp(0.0), 0.0, exp(0.0), cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0)), float(mat3x4(injectionSwitch.y, 0.0, 1.0, exp(0.0), 0.0, exp(0.0), cos(0.0), 0.0, 1.0, 0.0, 0.0, 1.0))))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y)))) || false), (_GLF_IDENTITY(false, (false) && true) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true), true, true))))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, min(0.0, 0.0)), injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false))), bvec2(bvec2(bvec2(bvec2(bvec2(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), false)))))))))); _injected_loop_counter --)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) && true))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                    }
                   barrier();
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    {
                     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < (0 ^ 1)); _injected_loop_counter ++)
                      {
                       barrier();
                      }
                    }
                  }
                 barrier();
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)) > injectionSwitch.y))))))))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           do
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 barrier();
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                {
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).y))));
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(5, 5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(injectionSwitch.x > injectionSwitch.y, true, false, true))), (injectionSwitch.x > injectionSwitch.y) || false), false)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         do
          {
           do
            {
             barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), ! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)), _GLF_IDENTITY(! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true, true, true)))), true && (! (! (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y)), true, true, true))))))))) && true)))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                  {
                   for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), true && (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1))); _injected_loop_counter ++)
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), ! (_GLF_IDENTITY(! (! (! (true))), ! (! (! (! (! (true)))))))))))
                      {
                       barrier();
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0), injectionSwitch.y, injectionSwitch.y))))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     for(int _injected_loop_counter = (1 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, bool(bool(_GLF_IDENTITY(_injected_loop_counter > 0, false || (_injected_loop_counter > 0)))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true, bool(bvec2(true, true))) && (_GLF_IDENTITY(false, false || (false)))), false || (false))))
        {
        }
       else
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         barrier();
        }
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), _GLF_IDENTITY(bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || (bool(bvec4(! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)), bool(bool(! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), ! (! (bool(false))))), false || (bool(_GLF_IDENTITY(bool(false), ! _GLF_IDENTITY((! (bool(false))), bool(bvec2((! (bool(false))), true))))))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), ! (_GLF_IDENTITY(! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (! (! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))) || false)))))
              {
              }
             else
              {
               barrier();
              }
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (true ? _GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) : _GLF_FUZZED(86461))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true)))), ! (! (bool(_GLF_IDENTITY(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), bvec3(bvec4(bvec3(injectionSwitch.x < injectionSwitch.y, true, false), true))))))))))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && _GLF_IDENTITY(true, false || (true)))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
       barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec3(int(3), 0, 1))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, true && ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))), bool(bvec4(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), false, false, true)))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
            barrier();
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, uint(uint(subgroup_size)));
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), clamp(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), _GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | _GLF_IDENTITY(0u, (0u | 1u) * (0u)))), ~ (~ _GLF_IDENTITY((max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))), 0u ^ ((_GLF_IDENTITY(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), max(max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u)), max(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u))))))))))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), int(ivec4(0 >> _GLF_IDENTITY(int(0), int(0)), 1, 0, 0)))) | (0 >> _GLF_IDENTITY(int(0), int(0)))))); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) < (_GLF_IDENTITY(0 ^ 1, (0 ^ 1) | 0))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))) && true))), ((! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, true && (true))))))) && true)))) && true)))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
              }
            }
          }
         else
          {
          }
         barrier();
        }
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = (72541 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), false, true, true)))) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))), bool(bvec4(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) || false)) || false)))) || false))), false, true, false))))))), ! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false) || (true))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) + 0.0)))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(true, true, false, true)))))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-3717.6707))))) > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 else
                  {
                  }
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
            }
           for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, exp(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0)), (vec2(mat2x4(injectionSwitch, 1.0, 0.0, determinant(mat4(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 1.0, exp(0.0), 0.0, 0.0, 1.0, sqrt(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0))) - vec2(0.0, 0.0))).y : _GLF_FUZZED(-6.1))), injectionSwitch.y, injectionSwitch.y))) * determinant(mat3(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, length(vec2(0.0, 0.0)), 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), max((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), max((1 & int(_GLF_ONE(1.0, injectionSwitch.y))), (1 & int(_GLF_ONE(1.0, injectionSwitch.y))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), _GLF_IDENTITY(! (! (bool(bool(false)))), ! (_GLF_IDENTITY(! (! (! (bool(bool(false))))), bool(bvec4(! (! (! (bool(bool(false))))), true, false, false)))))))));
      }
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), false)))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(write_val, uint(virtual_gid), 4, 64, 0);
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(mat4x3(clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(2.6))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-7.0, (-7.0) / 1.0)))), mix(float(_GLF_FUZZED(-7.3)), float(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0)))), bool(true))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)))).y), 1.0, 1.0, 1.0, determinant(mat4(determinant(mat4(1.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-70.10))), mix(float(0.0), _GLF_IDENTITY(float(_GLF_FUZZED(5361.4466)), (float(_GLF_FUZZED(5361.4466))) + abs(0.0)), bool(false))), 0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 1.0, 0.0), (mat4x3(clamp(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, max(1.0, 1.0)) : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat3x4(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(0.6))), 1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 0.0, 0.0)))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0)), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 1.0, 1.0))) - _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-3.9)), bool(false)))), 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / 1.0), 0.0, 0.0, 0.0, 0.0))), max(float(_GLF_IDENTITY(mat4x3(clamp(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, (false ? _GLF_IDENTITY(_GLF_FUZZED(1.2), (_GLF_IDENTITY(false ? _GLF_FUZZED(1.5) : _GLF_FUZZED(1.2), (false ? _GLF_FUZZED(1.5) : _GLF_FUZZED(1.2)) - 0.0))) : 1.0)))), _GLF_IDENTITY(1.0, (true ? _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(950.305)), float(1.0), bool(true))), 1.0)) : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)))), 1.0, 1.0, 1.0, 0.0, 0.0)))), 0.0, _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))), 1.0, _GLF_IDENTITY(1.0, _GLF_IDENTITY((false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(1.0, (1.0) / 1.0)), (_GLF_IDENTITY((false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(1.0, (1.0) / 1.0)), ((false ? _GLF_FUZZED(-3.1) : _GLF_IDENTITY(1.0, (1.0) / 1.0))) - 0.0)) - 0.0)), 1.0, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), clamp(_GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0, 1.0)), _GLF_IDENTITY(1.0, float(vec4(1.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 0.0, 1.0))))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, min(1.0, 1.0)), _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(49.48))))))), 0.0, _GLF_IDENTITY(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), clamp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), mix(vec3((vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[0], (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), max(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(696.225)), bool(false))), 0.0, 0.0, 0.0, 0.0))))[1], _GLF_IDENTITY((vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0))))[2], (false ? _GLF_FUZZED(-3.1) : (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), 0.0)))), 0.0, 0.0, 0.0, 0.0, 0.0))))[2]))), vec3(_GLF_FUZZED(-620.619), _GLF_FUZZED(-277.056), _GLF_FUZZED(81.45)), bvec3(false, false, false))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x), 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))), max(float(vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x), 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))))))), float(vec2(_GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mix(vec3(_GLF_FUZZED(215.760), _GLF_FUZZED(3.1), _GLF_FUZZED(-6643.9495)), vec3((vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))[0], (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))[1], (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))[2]), bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true, bool(bvec4(true, false, false, true))), true)))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))), 0.0 + (_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(vec2(0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED((-890.101 / -8755.1826))), float(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7.6) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.5)), float(0.0), bool(true)))))), bool(true)))))), clamp(_GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (0.0) + 0.0)))), _GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x), 0.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3(1.0, 1.0, 0.0, determinant(mat3(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0))), 1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), _GLF_IDENTITY(determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), float(mat3(_GLF_IDENTITY(determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), (determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0))) + 0.0), 0.0, 1.0, 0.0, 1.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, log(1.0), 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 0.0, 0.0)), 0.0, 0.0))), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, float(mat3x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0))))), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(_GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), _GLF_IDENTITY(cos(0.0), clamp(cos(0.0), cos(0.0), cos(0.0))))), mix(float(_GLF_FUZZED((-7202.4849 / -8.1))), float(_GLF_IDENTITY(cos(0.0), float(mat4x2(_GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 0.0, 1.0)))), bool(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(18.22))), 1.0, 0.0, 1.0)))) - 0.0)), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) * abs(1.0))))), mix(vec3((vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * _GLF_IDENTITY((vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), vec3(mat3((vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), abs(1.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0)), 0.0)))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(_GLF_IDENTITY(1.0, (1.0) / 1.0)))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(_GLF_IDENTITY(cos(0.0), (cos(0.0)) / exp(0.0)), _GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), mix(float(length(vec3(0.0, 0.0, 0.0))), float(_GLF_FUZZED(-6.5)), bool(false))), _GLF_IDENTITY(sqrt(0.0), mix(float(_GLF_IDENTITY(sqrt(0.0), max(sqrt(0.0), sqrt(0.0)))), float(_GLF_FUZZED(-903.947)), bool(false))), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0))))[0], (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(_GLF_IDENTITY(1.0, (1.0) - 0.0)), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[_GLF_IDENTITY(1, 0 + (1))], (vec3(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-6.1)), bool(false))), injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-715.476) : injectionSwitch.x))))), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0), (mat2x4(_GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), mat3(1.0) * (vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), determinant(mat3(cos(0.0), length(vec3(0.0, 0.0, 0.0)), sqrt(0.0), log(1.0), 1.0, round(length(normalize(1.0))), 0.0, 0.0, 1.0)), 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0)) + mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))[2]), vec3(_GLF_FUZZED(-620.619), _GLF_FUZZED(-277.056), _GLF_FUZZED(81.45)), bvec3(false, false, false))))), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)))), injectionSwitch.x), 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), clamp(_GLF_IDENTITY(vec3(1.0, 0.0, 0.0), (vec3(1.0, 0.0, 0.0)) * mat3(1.0)), vec3(1.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 0.0, 0.0), vec3(vec4(vec3(1.0, 0.0, 0.0), 1.0))))), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), mix(float(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0))), float(_GLF_FUZZED(77.24)), bool(false)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0)), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2.9))))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0)), (mat3(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(2.9))))), abs(1.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, sqrt(0.0))) / mat3(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))), clamp(_GLF_IDENTITY(0.0, (0.0) * 1.0), 0.0, 0.0))))))))), max(float(vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, 0.0 + (0.0)))), _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x), 0.0)), min(dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, abs(0.0), 1.0, 1.0, 0.0, 0.0, 1.0)))), _GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), min(vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(3655.5444) : injectionSwitch.x)))) : _GLF_FUZZED(length(vec3(-467.875, -7.7, -1876.9995)))))), 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), clamp(vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0), vec3(1.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), 0.0), vec3(1.0, _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(13.37) : 0.0)), 0.0, 0.0)), injectionSwitch.x), 0.0))))))))))), float(vec2(0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), _GLF_ZERO(0.0, injectionSwitch.x), 0.0)), dot(vec3(1.0, 0.0, 0.0), vec3(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))))))), 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-31.67) : 1.0)), 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0), (mat4x3(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(_GLF_IDENTITY(-7.0, mix(float(_GLF_IDENTITY(-7.0, mix(float(-7.0), float(_GLF_FUZZED(2931.8532)), bool(false)))), float(_GLF_FUZZED(-1.9)), bool(false)))))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, min(1.0, 1.0)), clamp(1.0, 1.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(16.72)), float(0.0), bool(true))), 0.0, 1.0, 0.0, 0.0)) + (0.0))) + _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(vec2(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0))), 1.0)))) / 1.0), 1.0), vec2(0.0, 0.0))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) - vec2(0.0, 0.0)))) : _GLF_FUZZED(1825.3505)))), _GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0)), (_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0), (mat2x4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0)) - mat2x4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(4.4))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 1.0))) + 0.0), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(abs(0.0), mix(float(_GLF_FUZZED(float(true))), float(abs(0.0)), bool(true))), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(0.0, max(0.0, 0.0)) : _GLF_FUZZED(atan(762.799)))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), float(_GLF_IDENTITY(mat4x3(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, determinant(_GLF_IDENTITY(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), transpose(transpose(_GLF_IDENTITY(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0), _GLF_IDENTITY((false ? _GLF_FUZZED((mat4(-4.2, -1.2, -341.347, 5.5, 2.3, -551.080, -7.9, 145.780, -657.872, -110.811, 123.573, -60.15, -4159.0581, 98.54, -303.954, -73.41) / 3.3)) : mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0)), mat4(1.0) * ((false ? _GLF_FUZZED((mat4(-4.2, -1.2, -341.347, 5.5, 2.3, -551.080, -7.9, 145.780, -657.872, -110.811, 123.573, -60.15, -4159.0581, 98.54, -303.954, -73.41) / 3.3)) : mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 0.0, 0.0, 0.0, 0.0, 1.0, abs(0.0), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) * 1.0), 1.0))))))))), 1.0, 1.0, 1.0, 1.0, 0.0), (mat4x3(_GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (_GLF_IDENTITY(false, bool(bool(false))) ? _GLF_FUZZED(-925.432) : _GLF_IDENTITY(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), transpose(transpose(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)))))), 1.0))), float(_GLF_IDENTITY(_GLF_IDENTITY(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)), vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0))))), cos(0.0))))), mix(vec2(_GLF_IDENTITY(_GLF_FUZZED(-77.51), mix(float(_GLF_FUZZED(-77.51)), float(_GLF_FUZZED((-6752.3493 * 6.7))), bool(false))), _GLF_FUZZED(7.4)), vec2((_GLF_IDENTITY(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)), _GLF_IDENTITY(vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, float(mat3(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0, 0.0, 0.0, 0.0, exp(0.0), length(0.0), 1.0, abs(1.0)))), 1.0))), cos(0.0)))), clamp(vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)))), _GLF_IDENTITY(vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)))), mat2(1.0) * (vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)))))), _GLF_IDENTITY(vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, _GLF_IDENTITY(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.2)), float(1.0), bool(true)))) - tan(0.0))), mix(float(clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.2)), float(1.0), bool(true)))) - tan(0.0)))), float(_GLF_FUZZED(-50.20)), bool(false))))), cos(0.0)))), min(vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)))), vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0, 1.0))), cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-75.32)))))))))))))[0], (_GLF_IDENTITY(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0)), vec2(vec2(vec2(clamp(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-7.0))), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), cos(0.0))))))[1]), bvec2(true, _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), true)))) || false, ((_GLF_IDENTITY(true, bool(bvec2(_GLF_IDENTITY(true, false || (true)), true)))) || false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (injectionSwitch.x < injectionSwitch.y))))))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 1.0, determinant(mat4(determinant(mat4(1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) * 1.0))), 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 1.0, abs(_GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, 0.0), clamp(clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0), clamp(0.0, 0.0, 0.0))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 0.0, 0.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))))), injectionSwitch.y))) + 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))) | (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1)))) | 0) > int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).x))); _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY(~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (_GLF_IDENTITY(~ (_injected_loop_counter --), ~ (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-98804)))))))))) | _GLF_IDENTITY(0, int(int(0))))), (~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (_GLF_IDENTITY(~ (_injected_loop_counter --), _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-98804)))))))), (false ? _GLF_FUZZED(36113) : _GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-98804)))))))), (_GLF_IDENTITY(~ (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-98804)))))))), (~ (~ (~ (_GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))), (true ? ~ (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) >> int(_GLF_ZERO(0.0, injectionSwitch.x)))) : _GLF_FUZZED(-98804))))))))) << 0)) / 1))))) | _GLF_IDENTITY(0, int(int(0)))))) + 0)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), int(ivec2(_GLF_IDENTITY(int(0), int(0)), 1)))) >> _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY(((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))), (((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))) ^ 0)) << 0); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 << _GLF_IDENTITY(int(8), int(8))) | 0)); _injected_loop_counter --)
              {
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 1 * (_GLF_IDENTITY(int(7), int(7)))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false)))) || false))) || false)))
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (int(_GLF_ONE(1.0, injectionSwitch.y))) | 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)) != 0); _injected_loop_counter --)
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(ivec2(int(2), 0))), int(ivec2(int(2), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     barrier();
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   do
                    {
                     barrier();
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, false)), (bool(bvec2(false, false))) && true))))
                barrier();
              }
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))), false)), (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), false)), ! (! (bool(bvec2(_GLF_DEAD(false), false)))))), false))) || false)))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(bvec4(true), _GLF_struct_19(_GLF_struct_13(bvec2(true), uvec4(_GLF_IDENTITY(1u, uint(_GLF_IDENTITY(uvec4(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u), (false ? _GLF_FUZZED(uvec4(98319u, 44070u, 91101u, 159997u)) : uvec4(1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u, 0u)))))), bvec4(true)), _GLF_struct_14(ivec2(1), uvec2(_GLF_IDENTITY(1u, (1u) / 1u)), ivec4(_GLF_IDENTITY(1, (1) | 0)), mat4x3(1.0), _GLF_IDENTITY(mat2(1.0), (mat2(1.0)) / mat2(1.0, 1.0, 1.0, 1.0)), mat4x3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), uvec2(1u)), vec3(1.0), _GLF_struct_15(bvec4(true), mat4x3(1.0), ivec2(1), true, uvec3(1u), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, (0 << _GLF_IDENTITY(int(8), int(8))) ^ (1))), (_GLF_IDENTITY(_GLF_IDENTITY(ivec3(1), _GLF_IDENTITY(ivec3(_GLF_IDENTITY(ivec4(ivec3(1), 0), _GLF_IDENTITY((ivec4(ivec3(1), 0)) | (ivec4(ivec3(1), 0)), ((ivec4(ivec3(1), 0)) | (ivec4(ivec3(1), 0))) ^ ivec4(0, 0, 0, 0)))), (false ? _GLF_FUZZED(ivec3(-35885, -37516, 22992)) : ivec3(_GLF_IDENTITY(ivec4(ivec3(1), 0), (ivec4(ivec3(1), 0)) | (ivec4(ivec3(1), 0))))))), (true ? _GLF_IDENTITY(ivec3(1), (ivec3(1)) << (ivec3(0, 0, 0) & ivec3(-51732, -27003, 74379))) : _GLF_FUZZED(ivec3(20212, 78626, -83357))))) + ivec3(0, 0, 0)), mat4x3(1.0)), _GLF_struct_16(1.0, bvec2(true), mat2x3(1.0), uvec3(1u), bvec4(true), ivec3(_GLF_IDENTITY(1, 1 * (1))), ivec4(1)), _GLF_struct_17(mat3(1.0), bvec3(true), mat3x4(1.0), ivec3(1)), _GLF_struct_18(_GLF_IDENTITY(_GLF_IDENTITY(1u, min(1u, 1u)), min(1u, _GLF_IDENTITY(_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (1u) >> _GLF_IDENTITY(0u, (0u) ^ (0u << _GLF_IDENTITY(uint(0u), uint(0u))))))), _GLF_IDENTITY(min(1u, 1u), clamp(min(1u, 1u), _GLF_IDENTITY(min(1u, 1u), 0u + (min(1u, 1u))), _GLF_IDENTITY(min(1u, 1u), max(_GLF_IDENTITY(min(1u, 1u), 0u + (_GLF_IDENTITY(min(1u, 1u), max(min(1u, 1u), _GLF_IDENTITY(min(1u, 1u), (min(1u, 1u)) | (min(1u, 1u))))))), min(1u, 1u)))))))), mat4x2(1.0))), uvec3(1u), _GLF_IDENTITY(vec3(1.0), clamp(vec3(1.0), vec3(_GLF_IDENTITY(1.0, min(1.0, 1.0))), vec3(1.0))), _GLF_struct_21(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), bvec3(bvec4(bvec3(_GLF_IDENTITY(true, bool(bvec4(true, false, false, false)))), false))), bvec4(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec4(true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))), mat2x4(1.0), uvec4(1u), _GLF_struct_20(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0)), ivec2(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) << 0)))), atomicLoad(_GLF_IDENTITY(write_val, min(_GLF_IDENTITY(write_val, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_id), ~ (_GLF_IDENTITY(~ (_GLF_FUZZED(subgroup_id)), ~ (~ (~ (_GLF_FUZZED(subgroup_id))))))) : _GLF_IDENTITY(write_val, ~ (~ (write_val))))), _GLF_IDENTITY(write_val, max(write_val, write_val)))), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(0, (0) << 0), (false ? _GLF_FUZZED((18645 + _GLF_IDENTITY(79266, int(ivec3(79266, 1, 0))))) : 0))), mat3(1.0), bvec4(true))), _GLF_struct_26(_GLF_struct_22(bvec2(true), vec3(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(false ? _GLF_FUZZED(5.5) : 1.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? false ? _GLF_FUZZED(5.5) : 1.0 : _GLF_FUZZED(8.2))))))), _GLF_struct_23(1u, bvec4(true)), _GLF_struct_24(mat3(1.0), _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), 0 | (int(ivec3(1, 1, 1))))), (_GLF_IDENTITY(1, _GLF_IDENTITY(int(ivec3(1, 1, 1)), 0 | (int(ivec3(1, 1, 1)))))) - 0), 1, vec4(1.0), uvec2(1u), bvec4(true), ivec4(1)), ivec4(1), mat2x4(1.0), _GLF_struct_25(mat2(1.0), vec3(1.0), mat4(1.0), vec4(1.0), mat2(1.0)), vec2(1.0)));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), _GLF_IDENTITY(((injectionSwitch.x < injectionSwitch.y)), bool(bvec4(((injectionSwitch.x < injectionSwitch.y)), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_WRAPPED_IF_TRUE(true)))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, 1 * (0))); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         do
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(_GLF_struct_replacement_27._f4._f4.read_val, (_GLF_IDENTITY(_GLF_struct_replacement_27._f4._f4.read_val, (_GLF_struct_replacement_27._f4._f4.read_val) | 0u)) | (_GLF_struct_replacement_27._f4._f4.read_val)))), (buf[virtual_gid] = uint(subgroupAllEqual(_GLF_IDENTITY(_GLF_struct_replacement_27._f4._f4.read_val, (_GLF_IDENTITY(_GLF_struct_replacement_27._f4._f4.read_val, (_GLF_struct_replacement_27._f4._f4.read_val) | 0u)) | (_GLF_struct_replacement_27._f4._f4.read_val))))) + 0u);
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))))))
              {
               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) >> 0))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 for(int _injected_loop_counter = ((1 ^ 1) ^ 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), bool(bvec2(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x)), (_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))) || false), false)))); _injected_loop_counter --)
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       barrier();
                      }
                    }
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                }
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = (42857 & int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                  }
                 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).y) / determinant(mat2(1.0, 0.0, 1.0, 1.0)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.4)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 1.0, 0.0)), _GLF_IDENTITY(float(mat4(float(vec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.4)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 1.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), float(mat3(float(mat4(float(vec3(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9.4)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)), 1.0, 0.0)), 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0)), 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0))))) > injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               barrier();
              }
            }
           else
            {
             barrier();
            }
          }
         else
          {
          }
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _injected_loop_counter --)
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
