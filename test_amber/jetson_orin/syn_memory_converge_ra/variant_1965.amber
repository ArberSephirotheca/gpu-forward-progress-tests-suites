#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec4 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size;
 uvec4 GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val;
 uvec4 GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id;
 uvec4 GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
 uvec4 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 uvec4 GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  barrier();
 uvec2 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size;
 uvec4 GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id;
 if(_GLF_DEAD(false))
  barrier();
 uvec4 GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size;
 uvec3 GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gid;
 GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz = GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gid;
 uvec2 GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy = GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_id;
  }
 GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.xy = GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
       GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.xy = GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.xy;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
  }
 else
  {
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uvec4 GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
        }
      }
     do
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, int(ivec4(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), 0, int(_GLF_ONE(1.0, injectionSwitch.y)), (0 ^ 1)))) > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, clamp(5, 5, 5)))))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 ^ (_injected_loop_counter)) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 uvec2 GLF_merged2_0_1_8_1_1_11read_valvirtual_gid;
 GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw = GLF_merged2_0_1_8_1_1_11read_valvirtual_gid;
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.xy = GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     do
      {
       GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw = _GLF_IDENTITY(GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.xy, (GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.xy) | (GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.xy));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, max(1, 1))); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 uvec3 GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_base;
 GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id.xyz = GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_base;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
  }
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz = GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id.xyz;
  }
 uvec2 GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz.xy = GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = ((1 & 1) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy = GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz.xy;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.y = subgroup_id;
 GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.w = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.y;
 GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.z = GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.w;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x4(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0), (mat2x4(0.0, sqrt(1.0), 0.0, 0.0, 0.0, 0.0, 1.0, 1.0)) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), (_GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), min(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 1.0, tan(0.0), 0.0, 1.0, 0.0, 0.0, sqrt(1.0), _GLF_IDENTITY(0.0, _GLF_IDENTITY(1.0 * (0.0), max(_GLF_IDENTITY(1.0 * (0.0), max(1.0 * (0.0), 1.0 * (0.0))), 1.0 * (0.0)))), 0.0))) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec2(1, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(6391.5608) : injectionSwitch.x)) : _GLF_FUZZED(9.1))) > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)))
            barrier();
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), bool(bvec2(false || (true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   do
                    {
                     barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                  }
                 barrier();
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   do
                    {
                     for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 0), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != 0)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y, injectionSwitch.y))))))
                        {
                         do
                          {
                           if(_GLF_DEAD(false))
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 ^ 1)); _injected_loop_counter --)
                              {
                               barrier();
                              }
                            }
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                         if(_GLF_DEAD(false))
                          barrier();
                         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)))) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                          {
                           barrier();
                           if(_GLF_DEAD(false))
                            barrier();
                          }
                         if(_GLF_DEAD(false))
                          {
                           do
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                barrier();
                               barrier();
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(false));
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               barrier();
                              }
                            }
                           else
                            {
                            }
                          }
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                                barrier();
                              }
                             barrier();
                            }
                          }
                        }
                      }
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 else
                  {
                  }
                }
               barrier();
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))), (injectionSwitch.x > injectionSwitch.y) && true)))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)))) || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-57.81)), vec2(_GLF_FUZZED(vec3(-12.21, 8.5, -87.61).r), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).x)) > injectionSwitch.y), false || ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-57.81)), vec2(_GLF_FUZZED(vec3(-12.21, 8.5, -87.61).r), (injectionSwitch)[1]), bvec2(false, true))), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch)).x)) > injectionSwitch.y))))), true, true))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
                    barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_DEAD(false))
                  barrier();
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                     barrier();
                    }
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (! (false))), true, true, false))), true)))));
          }
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 | (int(5))), (int(5)) - 0))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))) << 0)), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), max(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0)))))), (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), max(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))))))) >> 0))), 0 | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(int(5), (int(5)) | (int(5))))) << 0))))), (_GLF_IDENTITY(~ _GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), min(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), _GLF_IDENTITY(_GLF_IDENTITY(int(5), ~ (~ (int(5)))), (true ? _GLF_IDENTITY(int(5), ~ (~ (int(5)))) : _GLF_FUZZED(-30032)))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, 1 * (0))))))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), _GLF_IDENTITY(((int(5))), min(_GLF_IDENTITY(((int(5))), 0 | (((int(5))))), ((int(5))))) * 1) | (int(5))))) << _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) | (0))) | (0 << _GLF_IDENTITY(int(0), int(0)))), 0))))), max(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0)))))), (~ (_GLF_IDENTITY(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) | 0))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))), max(((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec4(0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0)), (int(ivec4(0, ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), 1, 0))) + 0)) + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) / 1), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) | (0))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(5), int(ivec2(int(5), 1))), (_GLF_IDENTITY(int(5), ~ (~ (int(5))))) / ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(1 << _GLF_IDENTITY(int(7), int(7)), min(1 << _GLF_IDENTITY(int(7), int(7)), 1 << _GLF_IDENTITY(int(7), int(7))))) / 1)) >> _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY((int(5)), ((int(5))) * 1) | (int(5))))) << 0))))))) >> 0))), 0 | (~ ((_GLF_IDENTITY(~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)), 0 + ((int(5)))) | (int(5)))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(int(5), (int(5)) | (int(5))), (_GLF_IDENTITY(int(5), (int(5)) | (int(5)))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))))) << 0)))))) / ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
      {
       GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy.x = GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.z;
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[_GLF_IDENTITY(0, 0 ^ (0))], _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (injectionSwitch)[_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(-52099)))]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7005.4974)), vec2(_GLF_IDENTITY(_GLF_FUZZED((9.1 * 919.838)), 0.0 + (_GLF_FUZZED((9.1 * 919.838)))), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(-7005.4974, max(_GLF_IDENTITY(-7005.4974, mix(float(-7005.4974), float(_GLF_FUZZED(90.30)), bool(false))), -7005.4974)))), vec2(_GLF_IDENTITY(_GLF_FUZZED((9.1 * 919.838)), 0.0 + (_GLF_FUZZED((9.1 * 919.838)))), (injectionSwitch)[1]), _GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))), min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((_GLF_IDENTITY(9.1 * 919.838, _GLF_IDENTITY(float(mat2(9.1 * 919.838, 0.0, 0.0, 0.0)), max(float(mat2(9.1 * 919.838, 0.0, 0.0, 0.0)), float(mat2(9.1 * 919.838, 0.0, 0.0, 0.0))))))), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), max(_GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_FUZZED(injectionSwitch))), _GLF_FUZZED(injectionSwitch))))))).x)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).x, float(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_IDENTITY((injectionSwitch)[0], float(vec3((injectionSwitch)[0], 1.0, 1.0))))), _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))[_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (1))))]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).x, exp(0.0) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], max(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) - 0.0), _GLF_IDENTITY((injectionSwitch)[0], float(vec3((injectionSwitch)[0], 1.0, 1.0))))), _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))))[_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, 0 ^ (1))))]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)).x)), 0.0, 0.0, 0.0, 1.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0))))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)), cos(vec2(0.0, 0.0)) * (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-7005.4974)), vec2(_GLF_FUZZED((9.1 * 919.838)), (injectionSwitch)[1]), bvec2(false, true))), min(injectionSwitch, injectionSwitch)))).x)) > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(7286.3926)), float(0.0), bool(true)))), (false ? _GLF_FUZZED(mat3x2(mat2(-5.4, 4560.2403, -395.097, -3.7))) : mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch)).x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x2(mat2(-5.4, 4560.2403, -395.097, -3.7))) : mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch)).x > injectionSwitch.y))) || false, ! (! (_GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x2(mat2(-5.4, 4560.2403, -395.097, -3.7))) : mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch)).x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat3x2(mat2(-5.4, 4560.2403, -395.097, -3.7))) : mat3x2(injectionSwitch, 1.0, 0.0, 1.0, 0.0))))), injectionSwitch)).x > injectionSwitch.y))))) || false)))))))));
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.w = subgroup_size;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x = subgroup_local_id;
 GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.xy.x = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups, uvec3(gl_NumWorkGroups[_GLF_IDENTITY(0, int(int(0)))], _GLF_IDENTITY(gl_NumWorkGroups[1], _GLF_IDENTITY((gl_NumWorkGroups[1]), (false ? _GLF_IDENTITY(_GLF_FUZZED(subgroup_local_id), (_GLF_FUZZED(subgroup_local_id)) >> 0u) : (gl_NumWorkGroups[1]))) - 0u), _GLF_IDENTITY(gl_NumWorkGroups[2], clamp(gl_NumWorkGroups[2], gl_NumWorkGroups[2], gl_NumWorkGroups[2])))).x;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (_GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) ^ 0) & -98206)); _injected_loop_counter --)
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.x = num_workgroup;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, ~ (~ (gl_WorkGroupSize))).x;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.w = workgroup_size;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.w;
 for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec3(int(6), 0, 0), (ivec3(int(6), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) ^ 0), 0)) << ivec3(0, _GLF_IDENTITY(0, max(0, 0)), 0)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (-2690 & _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) << 0))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
         barrier();
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id.w = workgroup_id;
 GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.w = _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id, uvec4(0u, 0u, 0u, 0u) ^ (GLF_merged2_0_3_72_3_1_12GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_baseworkgroup_id)).w;
 GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.xy.y = GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.w;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy.y = _GLF_IDENTITY(GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size, ~ (~ (GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size))).xy.y;
      }
    }
   else
    {
    }
  }
 uint workgroup_base = GLF_merged2_0_1_17_1_1_14subgroup_local_idworkgroup_size.y * _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy, (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy, (true ? GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy : _GLF_FUZZED(GLF_merged2_0_2_54_2_2_43GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy)))) * uvec2(1u, 1u)).y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.z = workgroup_base;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z = _GLF_IDENTITY(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.z, uint(uvec3(GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.z, 1u, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(2u, (_GLF_IDENTITY(2u, min(2u, 2u))) - 0u)), uint(2u))))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint subgroup_base = _GLF_IDENTITY(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy.x, ~ (~ (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.xy.x, (_GLF_IDENTITY(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(uvec4(195221u, 170576u, 100866u, 99450u)) : GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid)).xy.x) | 0u)))) * GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.w;
 GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.x = subgroup_base;
 GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.w = GLF_merged4_0_1_13_1_1_11_2_1_14_3_1_14subgroup_basesubgroup_idworkgroup_baseworkgroup_size.x;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (false ? _GLF_FUZZED(-18020) : int(4))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) << 0), _injected_loop_counter)) != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.z = GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.w;
 do
  {
   GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y = GLF_merged3_0_2_43_2_1_13_3_1_12GLF_merged2_0_1_8_1_1_11read_valvirtual_gidsubgroup_baseworkgroup_id.z;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint virtual_gid = _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz, ~ (~ (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz))).y, (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y, (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y) | (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y)), (_GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y, (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + _GLF_IDENTITY(GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y, (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y) | 0u)) | (GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.z + GLF_merged2_0_3_72_3_1_13GLF_merged3_0_1_13_1_1_13_2_1_14num_workgroupsubgroup_baseworkgroup_basesubgroup_base.xyz.y))) / 1u)) | _GLF_IDENTITY(0u, (0u) - 0u)) + GLF_merged3_0_2_54_2_1_11_3_1_13GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idsubgroup_idsubgroup_size.xy.x;
 GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz.z = virtual_gid;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))), false || (bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_GLF_IDENTITY(_injected_loop_counter != 1, (_injected_loop_counter != 1) && _GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, (true) || false), true, false, true))))))))); _injected_loop_counter ++)
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) && true))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 | 0) << _GLF_IDENTITY(int(6), int(6)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0))
                    {
                     do
                      {
                       barrier();
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                  }
                 else
                  {
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))));
 do
  {
   do
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.y = _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, min(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz)), (false ? _GLF_FUZZED(uvec3(198048u, 97309u, 101780u)) : _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, min(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz)), clamp(_GLF_IDENTITY(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, min(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz)), _GLF_IDENTITY(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, min(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz)), _GLF_IDENTITY(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, min(GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz, GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.xyz)))))).z;
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)) || false)))) && true)))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    barrier();
  }
 else
  {
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (1) >> 0), 1))), int(1))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x)), false || (_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   atomicStore(write_val, uint(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.y), 4, _GLF_IDENTITY(64, (64) ^ 0), 4);
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
  }
 uint read_val = atomicLoad(write_val, 4, 64, 2);
 GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.w = read_val;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z = GLF_merged2_0_3_84_3_1_8GLF_merged2_0_2_48_2_1_11GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idvirtual_gidread_val.w;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.x = _GLF_IDENTITY(GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z, clamp(GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z, GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z, _GLF_IDENTITY(GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z, (GLF_merged3_0_2_54_2_1_8_3_1_11GLF_merged2_0_1_17_1_1_12subgroup_local_idworkgroup_idread_valsubgroup_id.z) ^ 0u)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true))))))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) ^ 1)); _injected_loop_counter --)
      {
       buf[GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.y] = _GLF_IDENTITY(uint(subgroupAllEqual(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.x)), (uint(subgroupAllEqual(GLF_merged2_0_2_48_2_2_43GLF_merged2_0_1_11_1_1_12subgroup_idworkgroup_idGLF_merged2_0_1_8_1_1_11read_valvirtual_gid.zw.x))) ^ 0u);
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true && (bool(bool(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))));
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
