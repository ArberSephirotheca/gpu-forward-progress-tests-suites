#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer WriteVal {
 uint write_val;
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, false || (true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), min(int(3), int(3)))), ~ (~ (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY(min(int(3), int(3)), clamp(min(int(3), int(3)), min(int(3), int(3)), min(int(3), int(3))))))))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x, length(_GLF_IDENTITY(vec2(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0))), clamp(vec2(0.0, 0.0), vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), (vec2(0.0, 0.0)) / vec2(1.0, 1.0))))), 0.0, 0.0))) > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_GLF_IDENTITY(_injected_loop_counter, min(_injected_loop_counter, _injected_loop_counter)), _injected_loop_counter)) != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
              {
              }
             else
              {
               barrier();
              }
            }
           do
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 0)); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(0.7)), bool(false)))) > injectionSwitch.y))))
        barrier();
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(5), int(5)))), max(int(int(_GLF_IDENTITY(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), int(5)))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) / 1)), int(5))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) | (0 & 21728))), false || (_GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 ^ 0) | (0 & 21728))))); _injected_loop_counter --)
            {
             barrier();
            }
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch))) / vec2(1.0, 1.0)).x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), _GLF_IDENTITY(mat2(mat2x4(transpose(mat2(1.0)))), (mat2(mat2x4(transpose(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), _GLF_IDENTITY(mat2(mat2x4(transpose(mat2(1.0)))), (mat2(mat2x4(transpose(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), _GLF_IDENTITY(mat2(mat2x4(transpose(mat2(1.0)))), (mat2(mat2x4(transpose(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)))) && true)), bool(bool(! (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), _GLF_IDENTITY(mat2(mat2x4(transpose(mat2(1.0)))), (mat2(mat2x4(transpose(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) * _GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), transpose(_GLF_IDENTITY(transpose(mat2(1.0)), _GLF_IDENTITY(mat2(mat2x4(transpose(mat2(1.0)))), (mat2(mat2x4(transpose(mat2(1.0))))) - mat2(0.0, 0.0, 0.0, 0.0)))))) + mat2(0.0, 0.0, 0.0, 0.0))).x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y)))) && true))))))))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) + (injectionSwitch)), max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))))))));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_LOOP(false)), (! (_GLF_WRAPPED_LOOP(false))) || false))));
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
    barrier();
   do
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)), _GLF_IDENTITY((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false))), ! (! ((bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), (bool(bvec3(false, false, false))) || _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))))), ! (! ((! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), _GLF_IDENTITY((bool(bvec3(false, false, false))), ((bool(bvec3(false, false, false)))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false)))))
    barrier();
  }
 else
  {
  }
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, _GLF_IDENTITY((_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(uvec3(~ (gl_WorkGroupSize))))))) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u)), 0u), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(gl_WorkGroupSize, ~ (_GLF_IDENTITY(~ (gl_WorkGroupSize), _GLF_IDENTITY(uvec3(uvec3(~ (gl_WorkGroupSize))), clamp(uvec3(uvec3(~ (gl_WorkGroupSize))), uvec3(uvec3(~ (gl_WorkGroupSize))), _GLF_IDENTITY(uvec3(uvec3(~ (gl_WorkGroupSize))), (uvec3(uvec3(~ (gl_WorkGroupSize)))) | (uvec3(uvec3(~ (gl_WorkGroupSize))))))))))) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u | (0u)), 0u, 0u)), 0u)), (~ ((_GLF_IDENTITY(gl_WorkGroupSize, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(uvec3(~ (gl_WorkGroupSize))))), uvec3(1u, 1u, 1u) * ((_GLF_IDENTITY(~ (gl_WorkGroupSize), uvec3(uvec3(~ (gl_WorkGroupSize))))))))) >> uvec3(0u, _GLF_IDENTITY(0u, clamp(_GLF_IDENTITY(0u, 0u | (_GLF_IDENTITY(0u, 0u + (0u)))), 0u, 0u)), 0u))) - uvec3(0u, 0u, 0u))))).x;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), bool(bvec4(_GLF_DEAD(false), true, true, false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (0 | _GLF_IDENTITY(0, (0) * 1)) | (1)); _GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) << 0) | (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))), min((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), min(0 | (0), 0 | (0)))))))) - 0)) | 0) >> _GLF_IDENTITY(int(2), int(2)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))), int(2))) | _GLF_IDENTITY((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, 2))))), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), ((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, 2))))), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))) | ((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, 2))))), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))))))), false || (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))))))))))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), min((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))))), min((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), min(0 | (0), 0 | (0)))))))) - 0)) | 0) >> _GLF_IDENTITY(int(2), int(2))), (_GLF_IDENTITY(((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), min((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))))), min((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), min(0 | (0), 0 | (0)))))))) - 0)) | 0) >> _GLF_IDENTITY(int(2), int(2))), (((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), min((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))))), min((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), min(0 | (0), 0 | (0)))))))) - 0)) | 0) >> _GLF_IDENTITY(int(2), int(2)))) * 1)) | (((_GLF_IDENTITY(0, _GLF_IDENTITY((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) && true))) ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0, (0) << _GLF_IDENTITY(0, (0) | (0))) | _GLF_IDENTITY((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), min((_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)), (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0, min(0, 0))))) ^ 0)))))), min((false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(_GLF_IDENTITY(0, 0 | (0)), clamp(_GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0)), _GLF_IDENTITY(0, 0 | (0))))), (false ? _GLF_FUZZED(-74547) : _GLF_IDENTITY(0, _GLF_IDENTITY(0 | (0), min(0 | (0), 0 | (0)))))))) - 0)) | 0) >> _GLF_IDENTITY(int(2), int(2)))))), _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(atan(528.999)) : injectionSwitch.x)) > injectionSwitch.y)) || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))) | (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), (int(2)) | (int(2))))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((_GLF_IDENTITY(0, (0) / 1) | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), 0 | (int(2))), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2))), (min(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(2), int(2)))) + _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (int(_GLF_ZERO(0.0, injectionSwitch.x))) | 0))))), ((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))), (_GLF_IDENTITY(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))), clamp(_GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2))))), _GLF_IDENTITY(int(2), (int(2)) | (_GLF_IDENTITY(int(2), min(int(2), int(2)))))))) / 1), int(2))) | _GLF_IDENTITY((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, _GLF_IDENTITY(2, (_GLF_IDENTITY(2, clamp(2, 2, 2))) ^ (-56279 & 0))))))), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0) * 1))), ((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, 2))))), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (2) / (1 | (0 >> _GLF_IDENTITY(int(7), int(7)))))))) + 0))) | ((_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, max(_GLF_IDENTITY(2, 1 * (2)), _GLF_IDENTITY(2, max(2, 2))))), int(2)), ((0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, max(2, 2))))), (int(_GLF_IDENTITY(2, 0 + (_GLF_IDENTITY(2, max(2, 2)))))) ^ 0), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), max(_GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), ~ (~ (_GLF_IDENTITY(int(2), int(2))))))))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))))) && true))), ! (! (bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(18226) : _GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), max((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0, (false ? _GLF_FUZZED(_injected_loop_counter) : ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))))) && true))))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ _GLF_IDENTITY(0, min(0, 0))) >> _GLF_IDENTITY(int(2), int(2)))))))))))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)))) / 1), (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), clamp(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), (((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))) - 0), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), int(ivec2(int(ivec3(_injected_loop_counter, 1, 0)), 1)))))) != (_GLF_IDENTITY(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))), (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), min(_GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), min(int(ivec3(_injected_loop_counter, 1, 0)), int(ivec3(_injected_loop_counter, 1, 0)))), int(ivec3(_injected_loop_counter, 1, 0))))))) != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))) << 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((0 | 0)), (_GLF_IDENTITY(((0 | 0)), min(((0 | 0)), ((0 | 0))))) | (((0 | 0)))) ^ 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2)))))))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))), ! (! (false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), false || (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), bool(bvec4((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), false, true, true)))))))))))))))))), bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)), min(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, (true ? _injected_loop_counter : _GLF_FUZZED(_injected_loop_counter)))) / 1), (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, clamp(2, _GLF_IDENTITY(2, clamp(2, 2, 2)), 2))), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), clamp(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), _GLF_IDENTITY(((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0)), (((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))) - 0), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2)))))))), false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), int(ivec2(int(ivec3(_injected_loop_counter, 1, 0)), 1)))))) != (_GLF_IDENTITY(_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))), (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2))))) << int(_GLF_ZERO(0.0, injectionSwitch.x))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))))), ! (! (bool(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), min(_GLF_IDENTITY(int(ivec3(_injected_loop_counter, 1, 0)), min(int(ivec3(_injected_loop_counter, 1, 0)), int(ivec3(_injected_loop_counter, 1, 0)))), int(ivec3(_injected_loop_counter, 1, 0))))))) != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2)))), (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(int(2), int(2))))) << 0))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), _GLF_IDENTITY(((0 | 0)), (_GLF_IDENTITY(((0 | 0)), min(((0 | 0)), ((0 | 0))))) | (((0 | 0)))) ^ 0) >> _GLF_IDENTITY(int(_GLF_IDENTITY(2, ~ (~ (2)))), int(2)))))))), _GLF_IDENTITY(false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0) >> _GLF_IDENTITY(int(2), int(2))))))))), ! (! (false || ((_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, min(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1), _GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 0))))) != (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, clamp(0, 0, 0))), (~ (_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(_injected_loop_counter))), 0)))) | (~ (_GLF_IDENTITY(0, clamp(0, 0, 0)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY(int(2), int(2)))), min(_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) | (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(2), int(2)), ((0 | 0) >> _GLF_IDENTITY(int(2), int(2))) + 0))), (0 | 0) >> _GLF_IDENTITY(_GLF_IDENTITY(int(2), max(int(2), int(2))), int(2)))))), ! (! _GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), false || (_GLF_IDENTITY((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), bool(bvec4((_GLF_WRAPPED_LOOP(_injected_loop_counter != (_GLF_IDENTITY(_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0), (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0)) | (_GLF_IDENTITY((0 | 0), ((0 | 0)) ^ 0))) >> _GLF_IDENTITY(int(2), int(2))))), false, true, true)))))))))))))))))), false, false))))))))); _GLF_IDENTITY(_injected_loop_counter --, 0 + (_injected_loop_counter --)))
        {
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(bvec3(false, false, false), true)))))))
          barrier();
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
    barrier();
  }
 uint workgroup_id = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), gl_WorkGroupID.x)), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), gl_WorkGroupID.x)), 0u), max(uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(_GLF_IDENTITY(gl_WorkGroupID.x, ~ (~ (gl_WorkGroupID.x))), _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), gl_WorkGroupID.x)), 0u), uvec2(_GLF_IDENTITY(gl_WorkGroupID.x, clamp(gl_WorkGroupID.x, _GLF_IDENTITY(gl_WorkGroupID.x, uint(uvec3(gl_WorkGroupID.x, 0u, uint(_GLF_ZERO(0.0, injectionSwitch.x))))), gl_WorkGroupID.x)), 0u)))));
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, clamp(workgroup_size * workgroup_id, workgroup_size * workgroup_id, workgroup_size * workgroup_id)), ~ (~ (workgroup_size * workgroup_id)));
 for(int _injected_loop_counter = _GLF_IDENTITY((1 | 1), ((1 | 1)) / 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)), (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0))) && true); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, false))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY((0 ^ 0), ((0 ^ 0)) - 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint subgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 1u * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id))) - (0u | (41896u & 0u)))) - (_GLF_IDENTITY(128742u, (128742u) | (_GLF_IDENTITY(128742u, 1u * (128742u)))) & 0u)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (128742u & 0u))) ^ 0u) * subgroup_size)), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, subgroup_size)), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(uint(_GLF_IDENTITY(subgroup_id, uint(uvec3(subgroup_id, 0u, ((1u << _GLF_IDENTITY(uint(2u), uint(2u))) >> _GLF_IDENTITY(uint(2u), uint(2u))))))))) * subgroup_size)))), 1u)), _GLF_IDENTITY(max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size)), (false ? _GLF_FUZZED(workgroup_id) : _GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size), max(_GLF_IDENTITY((subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size), ~ (~ ((subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size)))), _GLF_IDENTITY((subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size), max((subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)) * subgroup_size)))))))), 1u)), _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), (_GLF_IDENTITY((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), min((subgroup_id * subgroup_size) | (subgroup_id * subgroup_size), (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))) - 0u)), 1u))) >> 0u, _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, (_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, min((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, (uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u))) * 1u))), (uint(uint(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, (_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, min((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, (uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u))) * 1u)))) / uint(_GLF_ONE(1.0, injectionSwitch.y)))), 0u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (_GLF_IDENTITY(uint(2u), (false ? _GLF_FUZZED(atomicMax(subgroup_size, workgroup_size)) : uint(2u))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(2u), uint(2u)), (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(uint(2u), uint(2u))))), 1u)), (uint(uvec4((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, 0u, ((1u << _GLF_IDENTITY(uint(2u), _GLF_IDENTITY(uint(2u), (uint(2u)) | (uint(2u))))) >> _GLF_IDENTITY(uint(2u), uint(2u))), 1u))) | (0u ^ 0u))), ~ (~ (_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, (false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, min(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, ((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u) | uint(_GLF_ZERO(0.0, injectionSwitch.x))), (uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u)))))))), uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, (0u << _GLF_IDENTITY(uint(8u), uint(8u))) | (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) * 1u)))))) * subgroup_size, min(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))) * subgroup_size, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))) * subgroup_size)), (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))), uint(uint(max(_GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u)), _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 0u ^ (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)))), 1u))) >> 0u, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | _GLF_IDENTITY((subgroup_id * subgroup_size), ~ (~ (_GLF_IDENTITY((subgroup_id * subgroup_size), (true ? (subgroup_id * subgroup_size) : _GLF_FUZZED(uvec4(147429u, 126324u, 139227u, 14492u)[3]))))))), 1u))) >> 0u, (false ? _GLF_FUZZED(write_val) : _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), _GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)))) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, min((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, _GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))), ((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, max((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, _GLF_IDENTITY((uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u), ~ (~ (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u), min(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u), min(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u))), uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (_GLF_IDENTITY(subgroup_id, (subgroup_id) >> 0u) * subgroup_size) | (subgroup_id * subgroup_size)), 1u)))))))) >> 0u, ((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u) << 0u))), (_GLF_IDENTITY(false, true && (false)) ? _GLF_FUZZED(write_val) : _GLF_IDENTITY(_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, 0u ^ (_GLF_IDENTITY((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, uint(uvec4((uint(uvec2(_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u))) >> 0u, 1u, 0u, 1u))))), min((uint(uvec2(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u), (subgroup_id * subgroup_size) | (_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)) * subgroup_size)), 1u))) >> 0u, (uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)) * subgroup_size, (_GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) >> (0u >> _GLF_IDENTITY(uint(6u), _GLF_IDENTITY(uint(6u), min(uint(6u), uint(6u))))))) | (subgroup_id * subgroup_size)), 1u))) >> 0u)))) : _GLF_FUZZED(workgroup_size))))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))) * subgroup_size, _GLF_IDENTITY((subgroup_id * subgroup_size), uint(uvec2((subgroup_id * subgroup_size), 1u))) | _GLF_IDENTITY((subgroup_id * subgroup_size), uint(uvec3((subgroup_id * subgroup_size), 1u, 0u)))), 1u), (uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))) * subgroup_size, (subgroup_id * subgroup_size) | (subgroup_id * subgroup_size)), 1u)) | uvec2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), _GLF_IDENTITY(1u, (1u) + 0u))), _GLF_IDENTITY((1u), min((1u), (1u))) | (1u)) * (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, clamp(subgroup_id * subgroup_size, subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, 0u + (subgroup_id * subgroup_size)))))), (_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(min(subgroup_id * subgroup_size, subgroup_id * subgroup_size), clamp(min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, uint(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 1u * (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))))), 1u))) * subgroup_size), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * subgroup_size, (subgroup_id * subgroup_size) + 0u)), min(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id)) * subgroup_size))))) | 0u)));
 for(int _injected_loop_counter = _GLF_IDENTITY(0, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | 0)), (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(0), int(0)), (0 >> _GLF_IDENTITY(int(0), int(0))) / 1)) | (_GLF_IDENTITY(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) / 1))) >> _GLF_IDENTITY(int(0), int(0)), clamp(0 >> _GLF_IDENTITY(int(0), int(0)), 0 >> _GLF_IDENTITY(int(0), int(0)), 0 >> _GLF_IDENTITY(int(0), int(0))))))) | (_GLF_IDENTITY(~ (_GLF_IDENTITY(0, 0 | (0))), max(~ (_GLF_IDENTITY(0, 0 | (0))), ~ (_GLF_IDENTITY(0, 0 | (0))))))), (true ? ~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) >> 0), 0 | (0))) : _GLF_FUZZED(-45573))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + 0) < 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))));
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_IDENTITY(_GLF_FUZZED(injectionSwitch), min(_GLF_FUZZED(injectionSwitch), _GLF_FUZZED(injectionSwitch))) : injectionSwitch)).y)) || false))))))))));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], (injectionSwitch)[0], (injectionSwitch)[0])), _GLF_FUZZED(-38.26)), bvec2(true, false))).x, length(vec3(0.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(5.9, float(mat4(5.9, log(round(length(normalize(1.0)))), 1.0, 1.0, 1.0, cos(0.0), 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, abs(0.0), 1.0, 0.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), vec4(1.0, 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, sqrt(0.0), _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)))), vec4(1.0, 0.0, 1.0, 1.0))))))), (injectionSwitch)[1]), _GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), clamp(vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)))), bvec2(true, false)), vec2(0.0, 0.0) + (_GLF_IDENTITY(mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false)), min(mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false)), _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false)), vec2(mat3(mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false)), 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0)))))))).x)), (false ? _GLF_FUZZED(1.8) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.9), (_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 0.0, 1.0), (false ? _GLF_IDENTITY(_GLF_FUZZED(mat2(-342.712, -27.36, 1.4, -3583.7646)), (false ? _GLF_FUZZED(mat2(-1.6, -5.2, -523.537, 76.37)) : _GLF_IDENTITY(_GLF_FUZZED(mat2(-342.712, -27.36, 1.4, -3583.7646)), (_GLF_FUZZED(mat2(-342.712, -27.36, 1.4, -3583.7646))) - mat2(0.0, 0.0, 0.0, 0.0)))) : mat2(injectionSwitch, 0.0, 1.0))))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false))).x, length(vec3(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), max(clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))), clamp(0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)))))))) + (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.9), (_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(injectionSwitch, 0.0, 1.0, 1.0, 1.0))))[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-38.26)), bvec2(true, false))).x)))) > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(407.132)))) / 1.0)))))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[_GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, clamp(0, 0, 0))))], injectionSwitch[1])).y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true && (_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (! (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((- (-1.7))), _GLF_FUZZED(-5.7)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x < injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))))))
        {
         barrier();
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), (_GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_TRUE(true))), ! (! (bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              barrier();
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, tan(0.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0))).y, true && (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)), ! (! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > injectionSwitch.y) || false))))))), ! (! (injectionSwitch.x > injectionSwitch.y)))))))))
                  barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
      }
    }
   else
    {
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       barrier();
      }
     else
      {
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint virtual_gid = workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), min(uvec2(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) / 1u), (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) << 0u))))) : 0u))), uvec2(subgroup_local_id, 0u)))) | (uvec2(subgroup_local_id, 0u))), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), min(_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1304.3801), ~ (~ (_GLF_IDENTITY(uint(1304.3801), ~ (_GLF_IDENTITY(~ (uint(1304.3801)), (~ (uint(1304.3801))) - 0u)))))), (uint(1304.3801)) << 0u))))) : _GLF_IDENTITY(0u, (0u) << (135294u & 0u))))), max(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) | 0u), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) / 1u), (uint(1304.3801)) << 0u))))) : 0u))), _GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), _GLF_IDENTITY(0u, (0u) | 0u) ^ (_GLF_IDENTITY(uint(1304.3801), (_GLF_IDENTITY(uint(1304.3801), ~ (~ (_GLF_IDENTITY(uint(1304.3801), (false ? _GLF_FUZZED((-- workgroup_size)) : _GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) / 1u))))))) << 0u))))) : 0u))), (_GLF_IDENTITY(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) << 0u))))) : 0u))), clamp(uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) << 0u))))) : 0u))), uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) << 0u))))) : 0u))), uvec2(subgroup_local_id, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), (uint(1304.3801)) << 0u))))) : 0u)))))) << uvec2(0u, 0u)))), uvec2(subgroup_local_id, 0u)))) | (uvec2(subgroup_local_id, 0u)))) / ((uvec2(1u, 1u) << _GLF_IDENTITY(uvec2(1u), uvec2(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(uvec2(1u), clamp(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), uvec2(1u), uvec2(1u))), uvec2(1u), uvec2(1u)), uvec2(0u, 0u) ^ (clamp(_GLF_IDENTITY(uvec2(1u), clamp(_GLF_IDENTITY(uvec2(1u), min(uvec2(1u), uvec2(1u))), uvec2(1u), uvec2(1u))), uvec2(1u), uvec2(1u))))), uvec2(1u))))), (uint(_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), min(uvec2(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(0u, (false ? _GLF_FUZZED((subgroup_size << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), _GLF_IDENTITY(_GLF_IDENTITY((uint(1304.3801)), 0u | ((uint(1304.3801)))) << 0u, 0u ^ ((uint(1304.3801)) << 0u))))))) : 0u)), (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED((_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)) << _GLF_IDENTITY(uint(1304.3801), 0u ^ (_GLF_IDENTITY(uint(1304.3801), _GLF_IDENTITY(_GLF_IDENTITY((uint(1304.3801)) << 0u, _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY((uint(1304.3801)) << 0u, ((uint(1304.3801)) << 0u) | ((uint(1304.3801)) << 0u)), 1u)), (uint(uvec2(_GLF_IDENTITY((uint(1304.3801)) << 0u, ((uint(1304.3801)) << 0u) | ((uint(_GLF_IDENTITY(1304.3801, min(1304.3801, 1304.3801)))) << 0u)), 1u))) ^ 0u)), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY((uint(1304.3801)), ((uint(1304.3801))) | ((uint(1304.3801)))) << 0u), (true ? _GLF_IDENTITY(0u ^ ((uint(1304.3801)) << 0u), max(0u ^ ((uint(1304.3801)) << 0u), 0u ^ ((uint(1304.3801)) << 0u))) : _GLF_FUZZED(subgroup_base))))))))) : 0u))) * (1u & 1u))), uvec2(subgroup_local_id, 0u)))) | _GLF_IDENTITY((uvec2(subgroup_local_id, 0u)), max((uvec2(subgroup_local_id, 0u)), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), clamp(uvec2(subgroup_local_id, 0u), _GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (uvec2(subgroup_local_id, 0u)) | (uvec2(subgroup_local_id, 0u))), _GLF_IDENTITY(uvec2(subgroup_local_id, 0u), (_GLF_IDENTITY(uvec2(subgroup_local_id, 0u), ~ (~ (uvec2(subgroup_local_id, 0u))))) >> uvec2(0u, 0u)))))))))) ^ 0u));
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
  barrier();
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) && true))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) >> 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1) != _GLF_IDENTITY(1, (1) | 0)) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) - (0 << _GLF_IDENTITY(int(0), int(0))))) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (false ? _GLF_FUZZED(9397) : 1)), (1) | (_GLF_IDENTITY(1, (1) | int(_GLF_ZERO(0.0, injectionSwitch.x))))), (1) | 0), false), true, false))), false))), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | 0), false), true, false))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | 0), false), true, false))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) != _GLF_IDENTITY(1, (1) | 0), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | 0), false), true, false))), false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), _GLF_IDENTITY(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false))), true, false)))), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | 0), false), true, false))), false)), bvec2(bvec4(bvec2(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false), _GLF_IDENTITY(bvec2(bvec2(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false))), bvec2(bvec4(bvec2(bvec2(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), false))), true, false)))), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | 0), false), true, false))), false)), false, false)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))), _GLF_IDENTITY((bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter, (0 ^ 0) + (_injected_loop_counter)) != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), 0 + (_GLF_IDENTITY(1, (1) | 0))))), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((! (false)), ! (! ((! (false))))))), false || (bool(bool(_GLF_IDENTITY((! (false)), ! (! ((! (false)))))))))))), true, false))), false))))), _GLF_IDENTITY(! (! ((bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_injected_loop_counter, (0 ^ 0) + (_injected_loop_counter)) != _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | 0), max(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (1) | 0))), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(false, ! (! (false)))), true, false))), false))))))), (! (! ((bool(_GLF_IDENTITY(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, _GLF_IDENTITY((1), (false ? _GLF_FUZZED(_injected_loop_counter) : (1))) | 0), false), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))), (0 ^ 0) + (_injected_loop_counter)) != _GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), 1 * ((1)))) ^ 0) | 0), max(_GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(1, (1) | 0))), false), bvec2(bvec4(bvec2(_injected_loop_counter != _GLF_IDENTITY(1, (1) | 0), _GLF_IDENTITY(false, ! (! (false)))), true, false))), false)))))))) && true)) && _GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) && true)))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, min(0, 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, true)))), ! (! ((_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, true))))))) && true))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (! (! (_GLF_IDENTITY(false, ! (! (false))))))))))) || false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, true))), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(! (false), ! (! (! (false)))))), true && (! ((_GLF_IDENTITY(! (false), ! (! (! (false))))))))))))), bool(bvec3(bool(bool(_GLF_IDENTITY(false, ! (! (false))))), false, true)))) && true)) && true))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))) || false)))) || false)))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 barrier();
                }
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-717.735)), float(injectionSwitch.x), bool(true))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       atomicStore(write_val, uint(virtual_gid), 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_injected_loop_counter) : 4)), (4) | (0 | 0)));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
         do
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true, false))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true)), bvec2(_GLF_IDENTITY(bvec2(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))), bvec2(bvec2(bvec2(bvec2(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))))))))))), bool(bool(bool(_GLF_IDENTITY(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec2(bvec2(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(80.26)), bvec2(true, false)), max(mix(vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(80.26)), bvec2(true, false)), mix(vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(80.26)), bvec2(true, false))))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), max(vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), clamp(vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]), vec2(_GLF_FUZZED(-5560.4187), (injectionSwitch)[1]))), vec2((injectionSwitch)[0], _GLF_FUZZED(80.26)), bvec2(true, false))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), vec2(mat2x4(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(_GLF_IDENTITY(-5560.4187, (false ? _GLF_FUZZED(-8.6) : -5560.4187))), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch)))[0], _GLF_IDENTITY(_GLF_FUZZED(80.26), (_GLF_IDENTITY(_GLF_FUZZED(80.26), clamp(_GLF_FUZZED(80.26), _GLF_IDENTITY(_GLF_FUZZED(80.26), max(_GLF_FUZZED(80.26), _GLF_FUZZED(80.26))), _GLF_FUZZED(80.26)))) / 1.0)), bvec2(true, false))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0)))))) - vec2(0.0, 0.0)).y)))), bool(bvec3((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true, (true) && true), false)))))) || false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     for(int _injected_loop_counter = (int(_GLF_ONE(1.0, injectionSwitch.y)) & ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, bool(bool(false)))))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), min(_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), (_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))) + vec2(0.0, 0.0)) : _GLF_FUZZED(injectionSwitch))), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), clamp(_GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch))), _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), min(mat2(1.0) * (injectionSwitch), mat2(1.0) * (injectionSwitch)))))))).y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(true)) || false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) / 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(1, (1) - 0))))); _injected_loop_counter --)
    {
     do
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)) || (_GLF_WRAPPED_IF_TRUE(true))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))))) && true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 uint read_val = _GLF_IDENTITY(atomicLoad(write_val, 4, 64, 2), 0u + (atomicLoad(write_val, 4, 64, 2)));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))))))))))
  barrier();
 do
  {
   _GLF_IDENTITY(buf[virtual_gid] = uint(subgroupAllEqual(read_val)), (buf[virtual_gid] = uint(subgroupAllEqual(read_val))) >> ((0u | _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(18613u) : 0u))) >> _GLF_IDENTITY(uint(1u), uint(1u))));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 1
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
