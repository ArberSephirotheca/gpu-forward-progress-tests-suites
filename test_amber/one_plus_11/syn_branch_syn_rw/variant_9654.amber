#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))));
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            return;
          }
        }
       else
        {
        }
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), min(_GLF_IDENTITY((injectionSwitch) * mat2(1.0), (false ? _GLF_FUZZED(injectionSwitch) : (injectionSwitch) * mat2(1.0))), _GLF_IDENTITY((injectionSwitch) * mat2(1.0), clamp((injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0))))), (injectionSwitch) * mat2(1.0), (injectionSwitch) * mat2(1.0)))).x < injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(false))
                    break;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   return;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false))))))))))), ! (! (! (! (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), ! (! ((false)))))))))))))))))), false, false, false)))))
                    return;
                   return;
                  }
                }
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   return;
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
                break;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), false))))))))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  return;
                }
               return;
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   continue;
                  }
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                   return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                }
               if(_GLF_DEAD(false))
                continue;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
              }
             else
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                break;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
            break;
          }
         else
          {
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 << _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(_GLF_IDENTITY(int(1), (_GLF_IDENTITY(int(1), 0 + (int(1)))) - (0 >> _GLF_IDENTITY(int(5), int(5)))), int(1), int(1))), int(1))))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), max(int(0), int(0))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), int(0)))))
            {
             return;
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ((false) || false) || false))))
          {
           do
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, false, false)))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_id = gl_SubgroupID;
 do
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, clamp(0, 0, 0)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, true && (_injected_loop_counter < 1))); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) - 0), _GLF_IDENTITY(int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) - 0)), (int(_GLF_IDENTITY(int(6), (int(6)) - 0))) | (int(_GLF_IDENTITY(int(6), (int(6)) - 0))))), (int(_GLF_IDENTITY(int(_GLF_IDENTITY(int(6), (int(6)) - 0)), (int(_GLF_IDENTITY(int(6), (int(6)) - 0))) | (int(_GLF_IDENTITY(int(6), (int(6)) - 0)))))) / 1))) ^ 0), ~ (~ _GLF_IDENTITY((int(_GLF_IDENTITY(6, (6) * (0 | 1)))), (_GLF_IDENTITY((int(6)), _GLF_IDENTITY(0 | ((int(6))), min(_GLF_IDENTITY(0 | ((int(6))), (true ? 0 | ((int(6))) : _GLF_FUZZED(_injected_loop_counter))), _GLF_IDENTITY(0 | ((int(6))), 0 | (0 | ((int(6))))))))) | ((int(6))))))))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          break;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
          continue;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         return;
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0))), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false))), (injectionSwitch.x > injectionSwitch.y)))))))
        break;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, sqrt(0.0), 0.0))).y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(injectionSwitch.y, 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))), true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat2(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)), 1.0, 0.0, 1.0), transpose(transpose(mat2(injectionSwitch.y, 1.0, 0.0, 1.0)))))))))))))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true && (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))))).x < injectionSwitch.y)))))))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y, true)))) && true)))))
    {
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0), (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) ^ 0)) << 0)) << 0))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY((bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))), true && ((bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (bool(false)))))))))) && _GLF_IDENTITY(true, false || (true)))))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))), false || (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y)))))))))))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true)), true && (bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false, false, true)))))))
            {
             for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), 0 ^ (int(3))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               return;
              }
            }
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((1 & 1), clamp((1 & 1), (1 & 1), (1 & 1)))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, _GLF_IDENTITY(clamp(1, 1, 1), (clamp(1, 1, 1)) >> 0))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) * cos(0.0)) > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))), true, true))))
  {
   for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), int(5))), ((_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec3(1, 0, 1))))) << _GLF_IDENTITY(int(5), int(5)))) * 1) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, clamp(0, 0, 0))), int(_GLF_IDENTITY(0, (0) * 1))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false || (_GLF_DEAD(false)), bool(bvec4(false || (_GLF_DEAD(false)), true, false, false)))))
  return;
 uint workgroup_id = _GLF_IDENTITY(gl_WorkGroupID, (_GLF_IDENTITY(gl_WorkGroupID, uvec3(gl_WorkGroupID[0], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ 0u), _GLF_IDENTITY(clamp(_GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ (~ (1)))], (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ (~ (1)))]) * 1u)) ^ 0u), (true ? _GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), ~ (~ ((~ (1))))))], (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))))))[_GLF_IDENTITY(1, ~ (~ (1)))]) * 1u)) ^ 0u) : _GLF_FUZZED(subgroup_size)))), ~ (~ (clamp(_GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ _GLF_IDENTITY(0u, 0u | (0u))), _GLF_IDENTITY(gl_WorkGroupID[1], (gl_WorkGroupID[1]) ^ 0u), _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ (~ (1)))], (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ (~ (1)))]) * 1u)) ^ _GLF_IDENTITY(0u, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u))), (~ (_GLF_IDENTITY(0u, (false ? _GLF_FUZZED(subgroup_size) : 0u)))) << (0u << _GLF_IDENTITY(uint(1u), uint(1u))))))), (_GLF_IDENTITY(true ? _GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))]) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], clamp(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))])))), (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupID))), _GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), (false ? _GLF_FUZZED(uvec3(42963u, 115509u, 77467u)) : (gl_WorkGroupID)))) << uvec3(0u, 0u, 0u)))), _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))))))[_GLF_IDENTITY(1, ~ (~ (1)))]) * 1u)) ^ 0u) : _GLF_FUZZED(subgroup_size), (true ? _GLF_IDENTITY(gl_WorkGroupID[1], (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))]) | (_GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], clamp(_GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))], _GLF_IDENTITY(gl_WorkGroupID, ~ (~ (gl_WorkGroupID)))[_GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(1, (1) >> (0 >> _GLF_IDENTITY(int(8), int(8)))))), ~ (~ ((~ (1))))))])))), (_GLF_IDENTITY(gl_WorkGroupID, ~ (~ _GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), min(_GLF_IDENTITY((gl_WorkGroupID), uvec3(0u, 0u, 0u) ^ ((gl_WorkGroupID))), _GLF_IDENTITY((gl_WorkGroupID), (_GLF_IDENTITY((gl_WorkGroupID), (false ? _GLF_FUZZED(uvec3(42963u, 115509u, 77467u)) : (gl_WorkGroupID)))) << uvec3(0u, 0u, 0u)))), _GLF_IDENTITY((gl_WorkGroupID), min((gl_WorkGroupID), (gl_WorkGroupID)))))))[_GLF_IDENTITY(1, ~ (~ (1)))]) * 1u)) ^ 0u) : _GLF_FUZZED(subgroup_size)) << 0u)))))))), _GLF_IDENTITY(_GLF_IDENTITY(1u * (gl_WorkGroupID[1]), (1u * (gl_WorkGroupID[1])) << _GLF_IDENTITY(0u, 0u ^ (0u))), 0u | (1u * (gl_WorkGroupID[1])))), _GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | uvec3(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0)))), _GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).x, max(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), (true ? vec2(vec2(injectionSwitch)) : _GLF_FUZZED(vec2(4.0, -9.1))))).x, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), vec2(mat4x3(vec2(vec2(injectionSwitch)), 1.0, 1.0, 0.0, 1.0, log(round(length(normalize(vec3(1.0, 1.0, 1.0))))), 1.0, 0.0, 0.0, 1.0, 0.0)))).x))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(-76.46)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))[_GLF_IDENTITY(2, (2) | int(_GLF_ZERO(0.0, injectionSwitch.x)))]))) | uvec3(0u, 0u, _GLF_IDENTITY(0u, (0u) << (0u >> _GLF_IDENTITY(uint(7u), uint(7u)))))).x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ (~ (workgroup_size * workgroup_id)));
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))));
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (_GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) : _GLF_FUZZED(subgroup_size)))) * 1u), 1u * (_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (true ? _GLF_IDENTITY(subgroup_size, (subgroup_size) / 1u) : _GLF_FUZZED(subgroup_size)))) * 1u))), uint(_GLF_ZERO(0.0, injectionSwitch.x)) ^ (subgroup_size)))))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u) + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) ^ 0u) + subgroup_local_id) + 0u);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     break;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))))), (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), _GLF_IDENTITY(int(7), 0 ^ (int(7))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-6.0)), float(injectionSwitch.y), bool(true)))))); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         return;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
          }
        }
      }
    }
   return;
  }
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             return;
            }
          }
         else
          {
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       break;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(workgroup_base, workgroup_base)) + subgroup_base, 0u ^ _GLF_IDENTITY(_GLF_IDENTITY((workgroup_base + subgroup_base), ((workgroup_base + subgroup_base)) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))), (false ? _GLF_FUZZED(injectionSwitch) : (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918)))))).x, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(33.71), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]))[1]), vec2((_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1])) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(20.41)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), vec2((injectionSwitch)[0], _GLF_FUZZED(_GLF_IDENTITY(4313.5250, clamp(4313.5250, 4313.5250, _GLF_IDENTITY(4313.5250, min(_GLF_IDENTITY(4313.5250, (false ? _GLF_FUZZED(568.184) : 4313.5250)), 4313.5250)))))), bvec2(true, false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918)))).x) / 1.0)))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY((workgroup_base + subgroup_base), ((workgroup_base + subgroup_base)) ^ uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))), (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))), (true ? _GLF_IDENTITY((true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))), max((true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))), (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-5.3), (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)))[1]), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, 0, 0))], _GLF_FUZZED(4313.5250)), bvec2(_GLF_IDENTITY(true, ! (! (true))), false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918))))) : _GLF_FUZZED(injectionSwitch)))))).x, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(33.71), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]))[1]), vec2((_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1])) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(20.41)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), clamp(_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(33.71), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]))[1]), vec2((_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1])) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(20.41)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(33.71), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]))[1]), vec2((_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1])) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(20.41)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), mix(vec2(_GLF_FUZZED(33.71), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]))[1]), vec2((_GLF_IDENTITY(vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1]), (vec2(_GLF_FUZZED(-5.3), (injectionSwitch)[1])) * vec2(1.0, 1.0)))[0], _GLF_FUZZED(20.41)), _GLF_IDENTITY(bvec2(true, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(bvec2(true, false), false), bvec3(bvec4(bvec3(bvec2(true, false), false), true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))), vec2(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.2) : injectionSwitch[1])))))[0], mix(float((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], (false ? _GLF_FUZZED(-6.2) : injectionSwitch[1])))))[0]), float(_GLF_FUZZED(81.36)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_FUZZED(_GLF_IDENTITY(4313.5250, clamp(4313.5250, 4313.5250, _GLF_IDENTITY(4313.5250, min(_GLF_IDENTITY(4313.5250, (false ? _GLF_FUZZED(568.184) : 4313.5250)), 4313.5250)))))), bvec2(true, false))), injectionSwitch)) : _GLF_FUZZED(mod(vec2(-83.66, -1366.3272), 761.918)))).x) / 1.0)))) : _GLF_FUZZED(workgroup_base)))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id + 1, min(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id + 1, 0u | (subgroup_local_id + 1))))) % subgroup_size), ~ (~ (((subgroup_local_id + 1) % subgroup_size))));
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) ^ _GLF_IDENTITY(0, (0) / 1)), 64, _GLF_IDENTITY(2, ~ (~ (_GLF_IDENTITY(2, (2) >> 0)))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY((true), (_GLF_IDENTITY((true), ((true)) && true)) || false) && true)))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       break;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(false), true)), ! (! (bool(bvec2(_GLF_DEAD(false), true)))))), (_GLF_DEAD(false)) && true), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)) || _GLF_IDENTITY(false, ! (! (false)))), false, false, true))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false)) && true))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))), (_GLF_IDENTITY(injectionSwitch.x, 1.0 * (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))) < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(9.9)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), clamp(mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(9.9)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(9.9)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false)))))))))), mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)), injectionSwitch)).x), float(_GLF_FUZZED(9.9)), bool(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))))))) < _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-0.2)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2159.0885) : float(_GLF_FUZZED(-0.2)))), bool(false))), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))), true && (! (_GLF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, false, true)), bool(bvec4(bool(bvec4(true, true, false, true)), false, false, true)))))), ! (! (true))), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, 0.0 + (1.0))) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), vec4(sin(0.0), 1.0, tan(_GLF_IDENTITY(0.0, max(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x3(0.0, 0.0, 0.0, abs(1.0), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), 0.0, 1.0)), mix(float(float(mat4x3(0.0, 0.0, 0.0, _GLF_IDENTITY(abs(1.0), (abs(1.0)) - sqrt(0.0)), 1.0, 1.0, 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, abs(0.0), 0.0, 1.0))), _GLF_IDENTITY(float(_GLF_FUZZED(37.85)), clamp(float(_GLF_FUZZED(37.85)), float(_GLF_FUZZED(37.85)), float(_GLF_FUZZED(37.85)))), bool(false)))), _GLF_IDENTITY(0.0, max(0.0, 0.0))))), 1.0)), dot(vec4(1.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(0.0, 0.0), max(min(0.0, 0.0), min(0.0, 0.0)))), 1.0, 0.0), vec4(sin(0.0), 1.0, tan(0.0), 1.0)))), 1.0)).x < injectionSwitch.y)))))))))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, float(mat2(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0, 1.0, 1.0))), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-0.1)), float(injectionSwitch.x), bool(true))))) > injectionSwitch.y))))))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      break;
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(_GLF_IDENTITY((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))))), min(_GLF_IDENTITY(_GLF_IDENTITY((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))))), 0 ^ (_GLF_IDENTITY((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))))))), _GLF_IDENTITY((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | ((1 & (_GLF_IDENTITY(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), ~ (~ (_GLF_IDENTITY(int(1), int(1)))))), _GLF_IDENTITY(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), 1)), min(int(ivec2(((0 ^ 1) << _GLF_IDENTITY(_GLF_IDENTITY(int(1), (int(1)) | 0), int(_GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, int(ivec2(1, 1)))))))), 1)), int(ivec2(((0 ^ 1) << _GLF_IDENTITY(int(1), int(1))), _GLF_IDENTITY(1, int(ivec2(1, int(_GLF_ONE(1.0, injectionSwitch.y)))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(1, (1) - 0)), int(1))))))))); _injected_loop_counter ++)
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                            break;
                           continue;
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
                            return;
                           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, ~ (_GLF_IDENTITY(~ (_injected_loop_counter --), (~ (_injected_loop_counter --)) / 1))))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))))))) >> _GLF_IDENTITY(int(2), int(2)), 0 | (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))))))) >> _GLF_IDENTITY(int(2), int(2)), _GLF_IDENTITY(int(ivec4((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))))))) >> _GLF_IDENTITY(int(2), int(2)), 1, 0, 1)), 0 | (int(ivec4((1 << _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), min(int(2), _GLF_IDENTITY(int(2), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(int(2), clamp(int(2), _GLF_IDENTITY(int(2), min(int(2), int(2))), int(2))))))))) >> _GLF_IDENTITY(int(2), int(2)), 1, 0, 1))))))))); _injected_loop_counter ++)
                              {
                               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                {
                                 if(_GLF_DEAD(false))
                                  break;
                                 return;
                                 if(_GLF_WRAPPED_IF_TRUE(true))
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                  }
                                 else
                                  {
                                  }
                                }
                              }
                            }
                           if(_GLF_DEAD(false))
                            {
                             do
                              {
                               return;
                              }
                             while(_GLF_WRAPPED_LOOP(false));
                            }
                           do
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
                              {
                              }
                             else
                              {
                               if(_GLF_WRAPPED_IF_FALSE(false))
                                {
                                }
                               else
                                {
                                 do
                                  {
                                   if(_GLF_DEAD(false))
                                    return;
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      break;
                                     continue;
                                    }
                                   do
                                    {
                                     if(_GLF_DEAD(false))
                                      return;
                                    }
                                   while(_GLF_WRAPPED_LOOP(false));
                                   if(_GLF_DEAD(false))
                                    continue;
                                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_WRAPPED_IF_FALSE(false)))))
                                    {
                                     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false)))
                                      {
                                       if(_GLF_DEAD(false))
                                        return;
                                       continue;
                                      }
                                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                                      continue;
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                                      break;
                                     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true))))), false || (! ((_GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true))))))))), (! (_GLF_IDENTITY(bool(bvec2(false, true)), _GLF_IDENTITY(bool(bvec2(bool(bvec2(false, true)), true)), (bool(bvec2(bool(bvec2(false, true)), true))) && true)))) && true))))))
                                      {
                                       if(_GLF_DEAD(false))
                                        continue;
                                       if(_GLF_DEAD(false))
                                        return;
                                       break;
                                       if(_GLF_WRAPPED_IF_FALSE(false))
                                        {
                                        }
                                       else
                                        {
                                         if(_GLF_DEAD(false))
                                          return;
                                        }
                                      }
                                    }
                                   else
                                    {
                                     return;
                                    }
                                   if(_GLF_DEAD(false))
                                    {
                                     if(_GLF_DEAD(false))
                                      {
                                       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
                                        {
                                         return;
                                        }
                                       else
                                        {
                                        }
                                      }
                                     continue;
                                    }
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    continue;
                                   if(_GLF_DEAD(false))
                                    continue;
                                  }
                                 while(_GLF_WRAPPED_LOOP(false));
                                 if(_GLF_WRAPPED_IF_FALSE(false))
                                  {
                                  }
                                 else
                                  {
                                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                    return;
                                  }
                                }
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
                          }
                         if(_GLF_DEAD(false))
                          continue;
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                       if(_GLF_DEAD(false))
                        break;
                      }
                     if(_GLF_DEAD(false))
                      break;
                    }
                   else
                    {
                    }
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(floatBitsToInt(-3.7)) : _injected_loop_counter)) != 1); _GLF_IDENTITY(_injected_loop_counter ++, (false ? _GLF_FUZZED((true ? ivec3(50106, -90625, -15880)[2] : -27581)) : _injected_loop_counter ++)))
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                  }
                 else
                  {
                  }
                }
               else
                {
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))
                break;
              }
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec4(_GLF_WRAPPED_LOOP(false), true, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    return;
  }
 if((subgroup_local_id % 2) == _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, min(0, 0)), 0)))
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        continue;
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(8), int(8)))); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0))
            {
             return;
            }
          }
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))));
          }
         else
          {
          }
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (_GLF_IDENTITY(! (false), (! (false)) || false)))))))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
   do
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(0.2) : _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(0))), max(_GLF_IDENTITY(int(0), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(0))), _GLF_IDENTITY(int(0), int(_GLF_ONE(1.0, injectionSwitch.y)) * (int(0))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) / 1), int(0)))) | (-31495 & (0 << _GLF_IDENTITY(int(8), int(8))))), min(int(0), int(0)))))); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec4(bool(false), _GLF_IDENTITY(true, true && (true)), false, true)))))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), _GLF_IDENTITY(false, (false) && true) || (bool(bvec4(false, false, true, true)))))), false || (! (_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, true && (false)), false, true, true)))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), false || (! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), true, true)))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true)))), false || (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))))))))))))) || false), false, true, _GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))))), false)))))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ! (! ((false)))))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                 return;
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter)) > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) | 0)) << 0))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
              continue;
             return;
             if(_GLF_DEAD(false))
              return;
            }
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
        }
      }
    }
   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(_GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0))))), ((_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)))))) / 1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_IDENTITY(_GLF_FUZZED(2260.3207), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(2260.3207), 1.0, 0.0, 0.0)), max(float(vec4(_GLF_FUZZED(2260.3207), 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(vec4(_GLF_FUZZED(2260.3207), 1.0, 0.0, 0.0)), (float(vec4(_GLF_FUZZED(2260.3207), 1.0, 0.0, 0.0))) + 0.0)))) : _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-44.15) : injectionSwitch.y))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (_GLF_IDENTITY(~ (0), min(~ (0), ~ (0)))))) ^ 0), ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))))) ? _GLF_FUZZED(_injected_loop_counter) : 0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec2(_GLF_IDENTITY((0), ((0)) | (_GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), (~ ((0))) ^ 0))))), 1))) ^ _GLF_IDENTITY(0, min(0, 0))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) ^ 0)))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))))) ? _GLF_FUZZED(_injected_loop_counter) : 0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec2(_GLF_IDENTITY((0), ((0)) | (_GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), (~ ((0))) ^ 0))))), 1))) ^ _GLF_IDENTITY(0, min(0, 0))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) ^ 0)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(0, (0) ^ _GLF_IDENTITY(0, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (_GLF_IDENTITY(bool(bvec4(false, false, false, false)), false || (bool(bvec4(false, false, false, false))))))) ? _GLF_FUZZED(_injected_loop_counter) : 0)))), (~ (_GLF_IDENTITY(0, _GLF_IDENTITY((0), int(ivec2(_GLF_IDENTITY((0), ((0)) | (_GLF_IDENTITY((0), ~ (_GLF_IDENTITY(~ ((0)), (~ ((0))) ^ 0))))), 1))) ^ _GLF_IDENTITY(0, min(0, 0))))) | (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) ^ 0), (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY(0, (0) ^ 0))))))))))) + 0)); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true))))))
          {
           if(_GLF_DEAD(false))
            break;
           break;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            break;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        continue;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 1.0)), (vec2(mat2(injectionSwitch, tan(0.0), 1.0))) / vec2(1.0, 1.0))))).y), bool(bvec4((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, tan(0.0), 1.0))))).y), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (int(0))), ~ (_GLF_IDENTITY(~ ((~ (int(0)))), ~ (~ (_GLF_IDENTITY(~ ((~ (int(0)))), (~ ((~ (int(0))))) | (~ ((~ (int(0)))))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_IDENTITY(_GLF_FUZZED(43438), (_GLF_FUZZED(43438)) << 0) : int(0))))), true && (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), ~ _GLF_IDENTITY((~ (_GLF_IDENTITY(int(0), (int(0)) / 1))), ~ (_GLF_IDENTITY(~ ((~ (int(0)))), ~ (~ (_GLF_IDENTITY(~ ((~ (int(0)))), (~ ((~ (int(0))))) | (~ ((~ (int(0)))))))))))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_IDENTITY(_GLF_FUZZED(43438), (_GLF_IDENTITY(_GLF_FUZZED(43438), ~ (~ (_GLF_FUZZED(43438))))) << 0) : int(0))))))), true && (_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY(int(0), min(_GLF_IDENTITY(int(0), (int(0)) | (int(0))), int(0))), ~ (~ (int(0)))))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(43438) : int(0)), int(ivec3((false ? _GLF_FUZZED(43438) : int(0)), (1 & _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) - 0))), (0 << _GLF_IDENTITY(int(6), int(6)))))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(43438) : int(0)), int(ivec3((false ? _GLF_FUZZED(43438) : int(0)), (1 & _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) - 0))), (0 << _GLF_IDENTITY(int(6), int(6)))))), (_GLF_IDENTITY(_GLF_IDENTITY((false ? _GLF_FUZZED(43438) : int(0)), int(ivec3((false ? _GLF_FUZZED(43438) : int(0)), (1 & _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) - 0))), (0 << _GLF_IDENTITY(int(6), int(6)))))), 0 + (_GLF_IDENTITY((false ? _GLF_FUZZED(43438) : int(0)), int(ivec3((false ? _GLF_FUZZED(43438) : int(0)), (1 & _GLF_IDENTITY(1, _GLF_IDENTITY(int(int(1)), (int(int(1))) - 0))), (0 << _GLF_IDENTITY(int(6), int(6))))))))) | 0)))))))))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))), ! (! (bool(bool(false))))))))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) || false));
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       else
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            continue;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))), false, false), bvec3(bvec3(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))), false, false)))))))));
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)), (false ? _GLF_FUZZED(-3.2) : _GLF_IDENTITY(float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)), max(float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)), float(vec4(injectionSwitch.y, 0.0, 0.0, 0.0)))))))), _GLF_IDENTITY(((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || false, ! (_GLF_IDENTITY(! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || false), false || (_GLF_IDENTITY(! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || false), true && (! (((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y)))) || false)))))))))))
          continue;
         for(int _injected_loop_counter = (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), max(int(0), int(0))), int(0))) >> _GLF_IDENTITY(int(0), int(0)), max(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, ~ (~ (0)))) >> 0)))) >> _GLF_IDENTITY(int(0), int(0)), max((1 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), (int(0)) | (int(0))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), (int(0)) | (int(0))), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), (int(0)) - 0), (int(0)) | (int(0)))) ^ 0)))), int(0))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(_GLF_IDENTITY(0, (0) ^ 0))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(0), ~ (~ (int(0)))), int(0)), min(_GLF_IDENTITY(int(0), int(0)), _GLF_IDENTITY(int(0), int(0))))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(0, 1))), _GLF_IDENTITY(max(0, 0), max(max(0, 0), _GLF_IDENTITY(max(0, 0), clamp(max(0, 0), _GLF_IDENTITY(max(0, 0), (max(0, 0)) << 0), max(0, 0))))))), ~ (~ (~ (_GLF_IDENTITY(0, max(0, 0))))))))) | 0)), int(0)))), _GLF_IDENTITY(_GLF_IDENTITY((1 << _GLF_IDENTITY(int(0), int(0))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), clamp(int(0), int(0), int(0))), int(0))), 1 * ((1 << _GLF_IDENTITY(int(0), int(0)))))) - 0) >> _GLF_IDENTITY(int(0), int(0)), 0 ^ ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), (_GLF_IDENTITY(_GLF_IDENTITY(int(0), int(0)), 0 | (_GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) >> (0 ^ 0))), int(0))))) - 0)) >> _GLF_IDENTITY(int(0), int(0))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          return;
        }
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, true && (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))), true, false)))))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(false)))))))))), (_GLF_WRAPPED_IF_FALSE(false)) && true))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y, injectionSwitch.y))))))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
            {
            }
           else
            {
             do
              {
               atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, _GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, 0u | (0u))) | (_GLF_IDENTITY(0u, ~ (~ (0u))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, _GLF_IDENTITY(max(0u, 0u), uint(uvec4(_GLF_IDENTITY(max(0u, 0u), min(max(0u, 0u), max(0u, 0u))), 0u, 1u, uint(_GLF_ONE(1.0, injectionSwitch.y)))))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), uint(uint(_GLF_IDENTITY(0u, max(0u, 0u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) + 0u), (0u >> _GLF_IDENTITY(uint(5u), _GLF_IDENTITY(uint(5u), uint(uvec3(uint(5u), 1u, 0u))))) + (_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) + 0u), min(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) + 0u), _GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, max(0u, 0u))) + 0u))))), max(0u, 0u)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u)))))), _GLF_IDENTITY(_GLF_IDENTITY(0u, max(0u, 0u)), 0u | (_GLF_IDENTITY(0u, max(0u, _GLF_IDENTITY(0u, max(0u, 0u))))))))) * 1u), _GLF_IDENTITY(0u, max(0u, 0u)))), _GLF_IDENTITY(0u, max(0u, 0u)))))) | (next_virtual_gid))], uint(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (false ? _GLF_FUZZED(24615) : 1))) ^ 0)), 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))));
            }
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))));
        }
       while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true, true))), true))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true, true))), true)))), false || (bool(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), bool(bvec4(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y))), true, true, true))), true)))))))));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), bool(bvec3(bool(bool(injectionSwitch.x > injectionSwitch.y)), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), false || (_GLF_IDENTITY(false || (false), ! (! (false || (false)))))))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), ! (! (! (! (false)))))), true), false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)) && true)) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false)))), (! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false)))), ((_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false))))) && true)) && true))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   else
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 0)))), (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 0))))) << int(_GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         break;
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0), (vec4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), 0.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0)))).y))));
 do
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true), bvec3(bvec3(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))))))))))
          continue;
         if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(false)) && true))))), true && (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))))))))
          {
           for(int _injected_loop_counter = (0 | (_GLF_IDENTITY(1 ^ 0, (false ? _GLF_FUZZED(8967) : _GLF_IDENTITY(1 ^ 0, 0 | _GLF_IDENTITY((1 ^ 0), ~ (~ ((1 ^ 0))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
              return;
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 ^ 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) << 0)) ^ 0))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & int(_GLF_ONE(1.0, injectionSwitch.y)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           for(int _injected_loop_counter = (_GLF_IDENTITY(_GLF_IDENTITY(0, 1 * (0)) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, min(0, 0)), 0)), (false ? _GLF_FUZZED(77590) : _GLF_IDENTITY(0, 1 * (0)) | _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (0) << 0), _GLF_IDENTITY(0, min(0, 0)), 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))));
      }
     else
      {
       if(_GLF_DEAD(false))
        continue;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false))))))
    continue;
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(false), bool(_GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))), (bool(false)) && true)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  return;
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
        return;
      }
     else
      {
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_GLF_IDENTITY(_injected_loop_counter ++, ~ (~ (_GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))))) ^ 0))
  {
   subgroupBarrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), ! (! (_GLF_IDENTITY(false, false || (false)))))) || false)))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))));
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   do
    {
     atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u + (read)), _GLF_IDENTITY(4, clamp(_GLF_IDENTITY(4, (4) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))), _GLF_IDENTITY(_GLF_IDENTITY(4, (4) - 0), (_GLF_IDENTITY(4, int(int(4)))) + 0), 4)), 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, _GLF_IDENTITY(true, (_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), _GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true, true, true)), (_GLF_IDENTITY(bool(bvec4(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true, true, true)), ! (! (bool(bvec4(bool(bool(_GLF_IDENTITY(true, ! (! (true))))), true, true, true)))))) && true)))) && true)), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), true && (_GLF_IDENTITY(false, ! (! (false))))), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY(true, (true) || false) && (_GLF_IDENTITY(false, ! (! (false))))), true)))))), false, true))))))))
    {
     do
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-4810.7363), clamp(_GLF_FUZZED(-4810.7363), _GLF_FUZZED(-4810.7363), _GLF_IDENTITY(_GLF_FUZZED(-4810.7363), (_GLF_FUZZED(-4810.7363)) + 0.0))))), injectionSwitch.x)))) > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) / vec2(1.0, 1.0))).y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))), (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4810.7363))), injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))), true && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))))) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y))))), false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)))))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))))) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(true && (true), false || (true && (true)))), (injectionSwitch.x < injectionSwitch.y)))))))) || false), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))), _GLF_IDENTITY(true && (false), (true && (false)) && true))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, false))), true && ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false)))), true && ((_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false))))))))), false || (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x)), max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), min(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))), true && ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), bool(bvec3(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), true, true))))))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x)), max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), min(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))), true && ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), bool(bvec3(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), true, true))))))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false))))))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x)), max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), 0.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), clamp(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))), _GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), min(mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false)), mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x), 0.0, _GLF_IDENTITY(1.0, float(mat3x2(_GLF_IDENTITY(1.0, float(vec2(1.0, 0.0))), 0.0, 1.0, 1.0, 0.0, 1.0))), 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) > injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, false || (false))))))), true && ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! _GLF_IDENTITY((true), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), bool(bvec3(bool(_GLF_IDENTITY(bool((true)), (bool((true))) && true)), true, true))))))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false))))))))), false, false))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(1.0, 1.0))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(90.45)), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), float(mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0)))))), (false ? _GLF_FUZZED((mat2(-6.2, -9.3, -1361.9685, -5.8) * injectionSwitch)) : vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), exp(0.0), 1.0, sqrt(0.0), round(length(normalize(vec2(_GLF_IDENTITY(1.0, float(vec3(1.0, 1.0, 1.0))), 1.0))))))))).x, max(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(_GLF_IDENTITY(90.45, clamp(90.45, 90.45, 90.45)))), bool(_GLF_IDENTITY(false, true && (false))))) : _GLF_FUZZED(-4810.7363))), _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED(7.9)), bool(false))))))), 1.0, 0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0, 1.0, sqrt(1.0), 1.0, 1.0, 1.0))) > _GLF_IDENTITY(injectionSwitch.y, log(1.0) + (injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))), false, false))), true && ((injectionSwitch.x > injectionSwitch.y))) && _GLF_IDENTITY(true, false || (_GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (! (true)))) || false), bool(bvec4(_GLF_IDENTITY(true, (true) && true), true, false, false)))))))) || false))) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, determinant(mat4(0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0)), 1.0, sin(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) * _GLF_IDENTITY(dot(vec4(exp(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0)), dot(vec4(exp(0.0), 0.0, 0.0, 0.0), vec4(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0))))), 0.0))))).x > injectionSwitch.y))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x : _GLF_FUZZED(-4810.7363))), injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(4228.4898)), bool(false)))), float(_GLF_FUZZED(vec4(479.278, -4242.2643, -9319.4537, 246.938).x)), bool(false))), max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true, true && (true)) ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], 1.0 * (injectionSwitch[1])))).x : _GLF_FUZZED(-4810.7363))), injectionSwitch.x)))) > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, true && (true)) && ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))) && true)) && _GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (injectionSwitch.x < injectionSwitch.y))))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))
        {
         for(int _injected_loop_counter = (_GLF_IDENTITY((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)), injectionSwitch))) / vec2(1.0, 1.0)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-6.7), _GLF_FUZZED(1.2)), bvec2(false, false))))).y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (_GLF_IDENTITY(int(0), (int(0)) | (int(0)))) | (int(0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1))), min(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1))), _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1)))))), (_GLF_IDENTITY((_GLF_IDENTITY(int(_GLF_IDENTITY(0, max(0, 0))), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)), 0 | ((int(0)))) | _GLF_IDENTITY((_GLF_IDENTITY(int(0), ~ (~ (int(0))))), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1)))), int(ivec3((_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY(_GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1), (true ? _GLF_IDENTITY(_GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1), (_GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(-34429))) / 1)) >> 0) : _GLF_FUZZED(-31265)))))), 0, 1)))) - 0) << 0)), clamp((int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((int(0)), clamp((int(0)), (int(0)), _GLF_IDENTITY((int(0)), 0 ^ ((int(0)))))), ((int(0))) / 1), (_GLF_IDENTITY(_GLF_IDENTITY((int(0)), clamp((int(0)), (int(0)), _GLF_IDENTITY((int(0)), 0 ^ ((int(0)))))), _GLF_IDENTITY(((int(0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))), clamp(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))), clamp(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058))))), int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0), (true ? ivec3(_GLF_IDENTITY(((int(0))), (true ? ((int(0))) : _GLF_FUZZED(83022))), 1, 0) : _GLF_FUZZED(ivec3(94132, -123, 87058)))))))) / 1)) + 0)))) << 0)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)), 0 + (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)), min(int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)), int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y))))) | (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)), vec2(1.0, 1.0) * (vec2(mat4(injectionSwitch, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 1.0, 0.0, 1.0, 1.0, 0.0))))), clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y)))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(-79257)))) * (int(_GLF_ONE(1.0, injectionSwitch.y)) & 1))), _GLF_IDENTITY(int(0), _GLF_IDENTITY((int(0)) | (int(0)), int(ivec3((int(0)) | (int(0)), 1, 0))))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), _GLF_IDENTITY(((int(0))) / 1, min(((int(0))) / 1, _GLF_IDENTITY(((int(0))) / 1, (_GLF_IDENTITY(((int(0))) / 1, ~ (~ (((int(0))) / 1)))) | 0))))))) << 0)), (int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))), injectionSwitch, injectionSwitch)).y)) << _GLF_IDENTITY(_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | (int(0)))), (_GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (int(0)) | _GLF_IDENTITY((int(0)), ((int(0))) / 1)))) << 0)))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(int(0), min(int(0), int(0))), (int(0)) << 0), int(0), int(0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
            break;
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, false)))))
                {
                 return;
                }
               else
                {
                }
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         do
          {
           if(_GLF_DEAD(false))
            break;
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       return;
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * vec2(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.2) : 1.0)), 1.0)).y, bool(bvec3(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0))) * vec2(1.0, 1.0)).y, false, false)))))))
  return;
 if(_GLF_DEAD(false))
  return;
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
