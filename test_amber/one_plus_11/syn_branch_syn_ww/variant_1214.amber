#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_19 {
 uint subgroup_id;
 mat3 _f0;
} ;

struct _GLF_struct_16 {
 vec3 _f0;
 int _f1;
 mat2 _f2;
} ;

struct _GLF_struct_15 {
 vec4 _f0;
 mat3x4 _f1;
 mat4x3 _f2;
 uint _f3;
} ;

struct _GLF_struct_14 {
 float _f0;
 vec4 _f1;
} ;

struct _GLF_struct_17 {
 _GLF_struct_14 _f0;
 _GLF_struct_15 _f1;
 mat2x4 _f2;
 mat2 _f3;
 uvec4 _f4;
 mat2 _f5;
 _GLF_struct_16 _f6;
} ;

struct _GLF_struct_12 {
 bvec2 _f0;
 mat4x3 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_11 {
 bvec3 _f0;
 mat3x2 _f1;
 mat2x3 _f2;
 uint next_virtual_gid;
 uint _f3;
 mat3x2 _f4;
} ;

struct _GLF_struct_13 {
 _GLF_struct_11 _f0;
 int _f1;
 bool _f2;
 _GLF_struct_12 _f3;
} ;

struct _GLF_struct_10 {
 uvec2 _f0;
} ;

struct _GLF_struct_8 {
 mat4x3 _f0;
 vec4 _f1;
 ivec3 _f2;
 mat2 _f3;
 vec2 _f4;
 vec2 _f5;
 uint _f6;
} ;

struct _GLF_struct_7 {
 bvec2 _f0;
} ;

struct _GLF_struct_9 {
 int _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
} ;

struct _GLF_struct_18 {
 bool _f0;
 _GLF_struct_9 _f1;
 _GLF_struct_10 _f2;
 bool _f3;
 _GLF_struct_13 _f4;
 _GLF_struct_17 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_6 {
 uint virtual_gid;
 mat4x3 _f0;
 mat3x2 _f1;
 mat4x3 _f2;
} ;

struct _GLF_struct_3 {
 mat3 _f0;
 ivec4 _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 float _f4;
 uvec4 _f5;
} ;

struct _GLF_struct_2 {
 vec3 _f0;
 mat4x2 _f1;
 mat3x2 _f2;
} ;

struct _GLF_struct_4 {
 mat4x3 _f0;
 _GLF_struct_2 _f1;
 uvec3 _f2;
 mat4x2 _f3;
 _GLF_struct_3 _f4;
 mat2 _f5;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
} ;

struct _GLF_struct_1 {
 _GLF_struct_0 _f0;
 uint workgroup_id;
} ;

struct _GLF_struct_5 {
 bvec4 _f0;
 _GLF_struct_1 _f1;
 mat2 _f2;
 ivec2 _f3;
 _GLF_struct_4 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup;
 uvec3 GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size;
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id;
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(gl_SubgroupID, mat3(1.0));
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y = _GLF_struct_replacement_19.subgroup_id;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.y = subgroup_local_id;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y = num_workgroup;
 GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.x = GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.y;
 uint workgroup_size = gl_WorkGroupSize.x;
 GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.z = workgroup_size;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(bvec4(true), _GLF_struct_1(_GLF_struct_0(mat4x2(1.0)), gl_WorkGroupID.x), mat2(1.0), ivec2(1), _GLF_struct_4(mat4x3(1.0), _GLF_struct_2(vec3(1.0), mat4x2(1.0), mat3x2(1.0)), uvec3(1u), mat4x2(1.0), _GLF_struct_3(mat3(1.0), ivec4(1), mat2x4(1.0), mat2x4(1.0), 1.0, uvec4(1u)), mat2(1.0)));
 uint workgroup_base = GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.z * _GLF_struct_replacement_5._f1.workgroup_id;
 uint subgroup_base = GLF_merged2_0_1_13_1_1_11num_workgroupsubgroup_id.y * subgroup_size;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.x = subgroup_base;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(workgroup_base + GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.x + GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.y, mat4x3(1.0), mat3x2(1.0), mat4x3(1.0));
 _GLF_struct_18 _GLF_struct_replacement_18 = _GLF_struct_18(true, _GLF_struct_9(1, _GLF_struct_7(bvec2(true)), _GLF_struct_8(mat4x3(1.0), vec4(1.0), ivec3(1), mat2(1.0), vec2(1.0), vec2(1.0), 1u)), _GLF_struct_10(uvec2(1u)), true, _GLF_struct_13(_GLF_struct_11(bvec3(true), mat3x2(1.0), mat2x3(1.0), workgroup_base + GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.x + ((GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.y + 1) % subgroup_size), 1u, mat3x2(1.0)), 1, true, _GLF_struct_12(bvec2(true), mat4x3(1.0), bvec4(true))), _GLF_struct_17(_GLF_struct_14(1.0, vec4(1.0)), _GLF_struct_15(vec4(1.0), mat3x4(1.0), mat4x3(1.0), 1u), mat2x4(1.0), mat2(1.0), uvec4(1u), mat2(1.0), _GLF_struct_16(vec3(1.0), 1, mat2(1.0))), mat4x3(1.0));
 GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x = _GLF_struct_replacement_18._f4._f0.next_virtual_gid;
 atomicStore(buf[_GLF_struct_replacement_6.virtual_gid], uint(1), 4, 64, 4);
 if((GLF_merged3_0_1_13_1_1_17_2_1_14subgroup_basesubgroup_local_idworkgroup_size.y % 2) == 0)
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(2), 4, 64, 4);
  }
 else
  {
   atomicStore(buf[GLF_merged2_0_1_16_1_1_13next_virtual_gidnum_workgroup.x], uint(2), 4, 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
