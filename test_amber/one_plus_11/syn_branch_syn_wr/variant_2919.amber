#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_20 {
 uvec2 _f0;
 mat4x3 _f1;
 ivec2 _f2;
 mat3 _f3;
 mat2x4 _f4;
 uvec4 _f5;
 bvec2 _f6;
} ;

struct _GLF_struct_21 {
 uvec2 _f0;
 _GLF_struct_20 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_18 {
 bvec2 _f0;
 uvec2 _f1;
 mat3 _f2;
 mat2 _f3;
 uvec4 _f4;
 vec4 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_17 {
 vec3 _f0;
 vec2 _f1;
 mat4 _f2;
 mat4x2 _f3;
 vec3 _f4;
 mat4x2 _f5;
} ;

struct _GLF_struct_19 {
 _GLF_struct_17 _f0;
 _GLF_struct_18 _f1;
} ;

struct _GLF_struct_15 {
 bvec4 _f0;
 ivec2 _f1;
} ;

struct _GLF_struct_14 {
 int _f0;
 bool _f1;
 uint _f2;
} ;

struct _GLF_struct_13 {
 mat2x4 _f0;
 mat2x4 _f1;
 bool _f2;
 mat3 _f3;
 mat3x4 _f4;
 mat2x3 _f5;
 mat3x2 _f6;
} ;

struct _GLF_struct_16 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 uvec2 _f2;
 _GLF_struct_15 _f3;
 mat3x4 _f4;
} ;

struct _GLF_struct_22 {
 mat4x3 _f0;
 _GLF_struct_16 _f1;
 _GLF_struct_19 _f2;
 bool _f3;
 uint read;
 _GLF_struct_21 _f4;
 bvec2 _f5;
} ;

struct _GLF_struct_11 {
 uint workgroup_base;
 mat2x3 _f0;
} ;

struct _GLF_struct_9 {
 int _f0;
 mat3 _f1;
 vec3 _f2;
 int _f3;
 vec2 _f4;
} ;

struct _GLF_struct_8 {
 ivec2 _f0;
 mat2 _f1;
 ivec4 _f2;
 mat2 _f3;
} ;

struct _GLF_struct_10 {
 _GLF_struct_8 _f0;
 _GLF_struct_9 _f1;
 mat2x3 _f2;
} ;

struct _GLF_struct_6 {
 vec3 _f0;
 bvec4 _f1;
 uvec3 _f2;
 ivec2 _f3;
 vec3 _f4;
 mat3x4 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_5 {
 uvec2 _f0;
 mat2x4 _f1;
 mat2x3 _f2;
 vec3 _f3;
} ;

struct _GLF_struct_4 {
 vec3 _f0;
 mat3x2 _f1;
} ;

struct _GLF_struct_7 {
 bvec4 _f0;
 uint _f1;
 mat3 _f2;
 _GLF_struct_4 _f3;
 _GLF_struct_5 _f4;
 _GLF_struct_6 _f5;
} ;

struct _GLF_struct_12 {
 mat4x3 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_10 _f2;
 int _f3;
 _GLF_struct_11 _f4;
} ;

struct _GLF_struct_1 {
 uvec3 _f0;
 ivec2 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 vec3 _f4;
} ;

struct _GLF_struct_0 {
 mat4x3 _f0;
 float _f1;
 ivec3 _f2;
 mat2x4 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 mat4x2 _f1;
 _GLF_struct_1 _f2;
 float _f3;
} ;

struct _GLF_struct_3 {
 _GLF_struct_2 _f0;
 bvec2 _f1;
 uint workgroup_size;
 mat2x4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), 1.0))).y, (true ? injectionSwitch.y : _GLF_FUZZED(mix(579.225, -8340.2713, false))))))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, false))), (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))) || false)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))) || _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), ! (! (_GLF_IDENTITY(bool(false), bool(bvec3(bool(false), false, false)))))))))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0)), (vec2(mat4(injectionSwitch, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0)), dot(vec3(0.0, 1.0, 0.0), vec3(0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 1.0))) - vec2(0.0, 0.0))), injectionSwitch, injectionSwitch)).y))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bool(! (! (false))))))))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false)))), ! (! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true))), ! (! (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), true))))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)))))
    return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
  }
 _GLF_struct_3 _GLF_struct_replacement_3 = _GLF_struct_3(_GLF_struct_2(_GLF_struct_0(mat4x3(1.0), 1.0, ivec3(1), mat2x4(1.0)), mat4x2(1.0), _GLF_struct_1(uvec3(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, 0u ^ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), max(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))))), _GLF_IDENTITY(1u, (1u) ^ 0u)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), max(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))))), _GLF_IDENTITY(1u, (1u) ^ 0u)))), ~ (~ ((_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), min(_GLF_IDENTITY(_GLF_IDENTITY(1u, (1u) ^ 0u), uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), max(uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u), uvec3(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u, 1u))))), _GLF_IDENTITY(1u, (1u) ^ 0u)))))))) >> 0u)), 1u))), ivec2(1), bvec3(true), mat2x3(1.0), vec3(1.0)), 1.0), bvec2(true), gl_WorkGroupSize.x, mat2x4(1.0));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))))))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(float(45657u)), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8.3)), bvec2(true, false))).x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(mat4x3(1.0), _GLF_struct_7(bvec4(true), 1u, mat3(1.0), _GLF_struct_4(vec3(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-3.8)))), mat3x2(1.0)), _GLF_struct_5(uvec2(_GLF_IDENTITY(1u, clamp(1u, 1u, 1u))), mat2x4(1.0), mat2x3(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), vec3(1.0)), _GLF_struct_6(_GLF_IDENTITY(vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), (vec3(_GLF_IDENTITY(1.0, (1.0) - 0.0))) * mat3(1.0)), bvec4(true), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) ^ uvec3(0u, 0u, 0u)), ivec2(1), vec3(1.0), mat3x4(_GLF_IDENTITY(1.0, float(mat4x3(1.0, 0.0, _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) / 1.0), 0.0, 0.0, sqrt(1.0), 0.0, 1.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 1.0, 0.0)))), ivec4(1))), _GLF_struct_10(_GLF_struct_8(ivec2(_GLF_IDENTITY(1, max(1, 1))), mat2(1.0), _GLF_IDENTITY(ivec4(1), clamp(ivec4(1), ivec4(1), ivec4(1))), mat2(1.0)), _GLF_struct_9(_GLF_IDENTITY(1, (1) << _GLF_IDENTITY(0, (0 << _GLF_IDENTITY(int(3), int(3))) + (_GLF_IDENTITY(0, (_GLF_IDENTITY(0, clamp(0, 0, 0))) << 0)))), mat3(1.0), vec3(1.0), _GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(ivec2(1, 0))))))))), vec2(1.0)), mat2x3(1.0)), 1, _GLF_struct_11(_GLF_struct_replacement_3.workgroup_size * workgroup_id, mat2x3(1.0)));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_base = subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, _GLF_IDENTITY((subgroup_size) | (subgroup_size), _GLF_IDENTITY(((subgroup_size) | (subgroup_size)) | (_GLF_IDENTITY((subgroup_size) | (subgroup_size), max((subgroup_size) | (subgroup_size), (subgroup_size) | (subgroup_size)))), (((subgroup_size) | (subgroup_size)) | (_GLF_IDENTITY((subgroup_size) | (subgroup_size), max((subgroup_size) | (subgroup_size), (_GLF_IDENTITY(subgroup_size, (subgroup_size) - uint(_GLF_ZERO(0.0, injectionSwitch.x)))) | (subgroup_size))))) >> 0u)))) | 0u);
 uint virtual_gid = _GLF_struct_replacement_12._f4.workgroup_base + subgroup_base + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_12._f4.workgroup_base, (_GLF_struct_replacement_12._f4.workgroup_base) ^ 0u) + subgroup_base + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, ((subgroup_local_id + 1) % subgroup_size) | 0u));
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
  return;
 _GLF_struct_22 _GLF_struct_replacement_22 = _GLF_struct_22(mat4x3(1.0), _GLF_struct_16(_GLF_struct_13(mat2x4(1.0), mat2x4(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(7.6) : 1.0))), true, mat3(1.0), mat3x4(1.0), mat2x3(1.0), mat3x2(1.0)), _GLF_struct_14(1, true, 1u), uvec2(1u), _GLF_struct_15(bvec4(true), ivec2(1)), mat3x4(1.0)), _GLF_struct_19(_GLF_struct_17(vec3(1.0), vec2(1.0), mat4(_GLF_IDENTITY(1.0, mix(_GLF_IDENTITY(float(1.0), 0.0 + (_GLF_IDENTITY(float(1.0), max(float(1.0), float(1.0))))), float(_GLF_FUZZED((_GLF_IDENTITY(-1812.5010, _GLF_IDENTITY(max(_GLF_IDENTITY(-1812.5010, (-1812.5010) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), -1812.5010), max(max(_GLF_IDENTITY(-1812.5010, (-1812.5010) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), -1812.5010), _GLF_IDENTITY(max(_GLF_IDENTITY(-1812.5010, (-1812.5010) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), -1812.5010), (true ? max(_GLF_IDENTITY(-1812.5010, (-1812.5010) / determinant(mat4(1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0))), -1812.5010) : _GLF_FUZZED(98.95)))))) + vec4(6377.4573, 576.878, 9.2, -472.474).t))), bool(false)))), mat4x2(1.0), vec3(1.0), mat4x2(1.0)), _GLF_struct_18(bvec2(true), uvec2(1u), mat3(1.0), mat2(1.0), uvec4(_GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, (true ? 1u : _GLF_FUZZED((num_workgroup % next_virtual_gid))))))), vec4(1.0), uvec3(1u))), true, 0, _GLF_struct_21(uvec2(1u), _GLF_struct_20(uvec2(1u), mat4x3(1.0), ivec2(1), mat3(1.0), mat2x4(1.0), uvec4(1u), _GLF_IDENTITY(bvec2(true), bvec2(bvec2(bvec2(true))))), ivec3(1)), bvec2(true));
 if(_GLF_DEAD(false))
  return;
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, _GLF_IDENTITY(4, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(4, (4) | (4)), (_GLF_IDENTITY(4, (4) | (4))) >> (-44394 & 0)), (4) >> 0), _GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0 ^ (4)), 1 * (~ (0 ^ (4))))), ((_GLF_IDENTITY(~ (0 ^ (4)), 1 * (~ (0 ^ (4)))))) - 0))), (_GLF_IDENTITY(_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0 ^ (4)), 1 * (~ (0 ^ (4))))), ((_GLF_IDENTITY(~ (_GLF_IDENTITY(0, int(ivec2(0, 1))) ^ (4)), 1 * (~ (0 ^ (4)))))) - 0))), (_GLF_IDENTITY(4, _GLF_IDENTITY(0 ^ (4), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (0 ^ (4)), _GLF_IDENTITY(1, _GLF_IDENTITY(0, (0) >> 0) + (1)) * (~ (0 ^ (4))))), ((_GLF_IDENTITY(~ (0 ^ (4)), 1 * (~ (0 ^ _GLF_IDENTITY((4), clamp((4), (4), (4)))))))) - 0)))) - 0)) ^ 0))));
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y)))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if((_GLF_IDENTITY(subgroup_local_id % 2, (subgroup_local_id % 2) * 1u)) == 0)
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   _GLF_struct_replacement_22.read = atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_base) : _GLF_IDENTITY(buf[virtual_gid], 0u | (buf[virtual_gid])))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (false ? _GLF_FUZZED(subgroup_base) : buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))])), (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))), max(_GLF_IDENTITY(uint(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))), (uint(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])))) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), min(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), _GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]))))) ^ 0u)))), (true ? uint(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY(clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid]), uint(uint(clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])))))) : _GLF_FUZZED(subgroup_size))))), (false ? _GLF_FUZZED(subgroup_base) : buf[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))]))) / 1u))), 4, 64, 2);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (true ? injectionSwitch.y : _GLF_FUZZED(0.0))), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, ((false) || false) && true)) || false))))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(bvec3((false) && true, true, true)), ! (! (bool(bvec3((false) && true, true, true)))))))) && true)))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               return;
              }
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(false))
            return;
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
          return;
         return;
        }
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(false)))), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), true, true)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY((5.2 - (-9991.4393 * -6450.1416)), (true ? (5.2 - (-9991.4393 * -6450.1416)) : _GLF_FUZZED(-3.4)))), _GLF_FUZZED((9504.2595 * vec3(-372.529, -43.43, 2.0).s))), bvec2(false, false))).x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              return;
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
              return;
             return;
            }
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-44.09) : injectionSwitch.y))), float(_GLF_FUZZED(570.700)), bool(false)))))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, _GLF_IDENTITY(false, ! (! (false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
          return;
        }
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   _GLF_struct_replacement_22.read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) >> 0u)], 4, 64, 2);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED((-4245.0101 + -79.20))), float(_GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(32.55)), float(injectionSwitch.x), bool(true))), injectionSwitch.x, injectionSwitch.x))), bool(true))) > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)), _GLF_IDENTITY((_GLF_IDENTITY(1, (1) + 0)), min((_GLF_IDENTITY(1, (1) + 0)), (_GLF_IDENTITY(1, (1) + _GLF_IDENTITY(0, _GLF_IDENTITY(int(ivec2(0, _GLF_IDENTITY(0, max(0, 0)))), ~ (~ (int(ivec2(0, _GLF_IDENTITY(0, max(0, 0)))))))))))) ^ 0), min(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) + 0)) ^ 0), _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), (1) + 0)) ^ 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(8), int(8)), (_GLF_IDENTITY(int(8), int(8))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(int(8), min(int(8), int(8))), _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(ivec3(int(8), _GLF_IDENTITY(1, max(1, 1)), 0)), max(int(ivec3(int(8), 1, 0)), int(ivec3(int(8), 1, 0))))))) >> 0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(8, (8) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 ^ (_GLF_IDENTITY(int(5), (int(5)) ^ 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) << 0)), (int(5)) | (_GLF_IDENTITY(int(5), 0 | (_GLF_IDENTITY(_GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), min(_GLF_IDENTITY(int(5), (true ? int(5) : _GLF_FUZZED(-38043))), int(5))))), (int(5)) | (int(5))))))))) >> _GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(_GLF_IDENTITY(5, 0 | (5))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(5, clamp(_GLF_IDENTITY(5, (false ? _GLF_FUZZED(_injected_loop_counter) : 5)), 5, 5))), int(5))), ~ (~ (~ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, (_GLF_IDENTITY(5, min(_GLF_IDENTITY(5, (5) / 1), 5))) + 0)), clamp(int(5), int(5), int(5))))))))))))))), int(ivec3(int(_GLF_IDENTITY(8, (8) / (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5)), ~ (_GLF_IDENTITY(~ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))), ~ (~ (~ ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), _GLF_IDENTITY((int(5)) | (int(5)), ~ (~ (_GLF_IDENTITY((int(5)) | (int(5)), max((int(5)) | (int(5)), (int(5)) | (int(5)))))))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(_GLF_IDENTITY(5, max(5, _GLF_IDENTITY(5, (5) | 0)))), clamp(int(5), int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5))))))))))))))), 0, 0))), int(8)) : _GLF_FUZZED(_injected_loop_counter))))); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0), 1 * (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) ^ 0), (false ? _GLF_FUZZED(16852) : _GLF_IDENTITY(_injected_loop_counter --, _GLF_IDENTITY((_injected_loop_counter --), (true ? (_injected_loop_counter --) : _GLF_FUZZED(98372))) ^ 0)))))) >> 0))
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x < injectionSwitch.y)) && (false)), ! (! (false))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (false))))), false || (bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), ! (! (false)))))))), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 1.0 * (injectionSwitch.x)) < injectionSwitch.y)), true, false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    break;
   subgroupBarrier();
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (_GLF_IDENTITY(! (false), true && (! (false))))))))))
      break;
     continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       break;
      }
     break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))) > injectionSwitch.y))))
          continue;
         continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         continue;
        }
       continue;
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true))))
        break;
       break;
      }
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-20.24)), bool(false))), 0.0)), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-51.37)), float(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0))), bool(true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 1.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0)), max(float(mat3x2(injectionSwitch.y, 1.0, _GLF_IDENTITY(0.0, (0.0) + 0.0), 1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), 0.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(50.86)), float(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-6.4)))), bool(true))), 0.0)), mix(float(_GLF_FUZZED(-51.37)), float(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0))), bool(true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0)), max(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0)), _GLF_IDENTITY(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0)), mix(float(_GLF_FUZZED(-51.37)), float(float(mat3x2(injectionSwitch.y, 1.0, 0.0, 1.0, 0.0, 0.0))), bool(true)))))))), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       continue;
      }
     continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        break;
       break;
      }
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      break;
     continue;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(6.4), _GLF_FUZZED(float(141022u))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))).y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
      }
     return;
    }
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_struct_replacement_22.read, min(_GLF_struct_replacement_22.read, _GLF_struct_replacement_22.read)), 4, 64, 4);
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-98.63), _GLF_FUZZED(-9.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)).x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      break;
     return;
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), false || ((false)))))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     continue;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! _GLF_IDENTITY((! ((injectionSwitch.x > injectionSwitch.y))), bool(bvec4((! ((injectionSwitch.x > injectionSwitch.y))), false, false, true))))))))) && true)))
      continue;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       continue;
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
        return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat4x3(injectionSwitch, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0))))), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sqrt(vec2(0.0, 0.0))).y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)) : _GLF_FUZZED(injectionSwitch)))) + vec2(0.0, 0.0)).y), true, true)))) && true)))))))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
