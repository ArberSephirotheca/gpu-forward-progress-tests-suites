#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))) || false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 1 * (_injected_loop_counter)) != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(2.4))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(1.1)), bool(false))))), 1.0)).y), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat4(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, abs(0.0), 1.0, abs(1.0), 0.0, 0.0, tan(0.0), sqrt(0.0), 0.0, 1.0, 1.0, determinant(mat4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(_GLF_IDENTITY(vec2(0.0, 1.0), (vec2(0.0, 1.0)) / cos(vec2(0.0, 0.0))), vec2(_GLF_IDENTITY(0.0, min(0.0, 0.0)), _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(ceil(trunc(-6.5))) : _GLF_IDENTITY(1.0, (1.0) + 0.0)))))), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), abs(0.0), log(1.0)), (mat4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(419.152, -7.9)) : injectionSwitch)).x, max(injectionSwitch.x, injectionSwitch.x)), 0.0, 1.0, abs(0.0), 1.0, abs(1.0), 0.0, 0.0, tan(0.0), sqrt(0.0), 0.0, 1.0, 1.0, determinant(mat4(_GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))), 0.0, 0.0, 1.0, 0.0, 1.0, abs(1.0), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(505.747))))), abs(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-4.4) : 0.0))), log(1.0))) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0)))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_IDENTITY(1.0, _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(_GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (vec4(1.0, 1.0, 1.0, 1.0)) / vec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, 1.0, cos(0.0), 0.0), clamp(vec4(0.0, 1.0, cos(0.0), 0.0), vec4(0.0, 1.0, cos(0.0), 0.0), vec4(0.0, 1.0, cos(0.0), 0.0))))), 1.0, 1.0, 1.0, 0.0, 0.0))))), transpose(transpose(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(_GLF_IDENTITY(vec2(1.0, 0.0), _GLF_IDENTITY(mat2(1.0) * (vec2(1.0, 0.0)), min(mat2(1.0) * (vec2(1.0, 0.0)), mat2(1.0) * (vec2(1.0, 0.0))))), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), mat3x2(mat4x2(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))))))))), clamp(float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), transpose(transpose(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, _GLF_IDENTITY(0.0, max(0.0, 0.0))), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-8092.8002)), bool(false))), 1.0, 1.0, 0.0, 0.0))))), mat3x2(mat4x2(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), min(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), vec2(0.0, 0.0) + (vec2(1.0, 0.0))))), vec2(1.0, _GLF_IDENTITY(0.0, float(mat2x3(0.0, 0.0, 1.0, 1.0, cos(0.0), 0.0))))), float(mat4x3(dot(_GLF_IDENTITY(vec2(1.0, 0.0), (_GLF_IDENTITY(vec2(1.0, 0.0), vec2(mat2x3(vec2(1.0, 0.0), 0.0, 1.0, 0.0, 0.0)))) / vec2(1.0, 1.0)), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))))))))), float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, _GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(6.0) : 0.0)), 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-72.06))), 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), transpose(transpose(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), mat3x2(mat4x2(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))))))))))), float(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, clamp(1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(8.1)), float(1.0), bool(true))), 1.0)), 1.0)), 0.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), transpose(transpose(_GLF_IDENTITY(mat3x2(1.0, 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), _GLF_IDENTITY(vec2(1.0, 0.0), vec2(1.0, 1.0) * (vec2(1.0, 0.0)))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))), mat3x2(mat4x2(mat3x2(_GLF_IDENTITY(1.0, (1.0) * 1.0), 1.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), float(mat4x3(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0))))))))))))))), 1.0)).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y : _GLF_FUZZED((-435.024 + 4.1))))))))))))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec3(bvec2(false, false), true), bvec3(bvec4(bvec3(bvec2(false, false), true), true)))), false))))))))
            barrier();
           barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
            barrier();
          }
        }
       else
        {
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
        barrier();
       barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec3(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), true, true))), false))))))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (1 | 1); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), int(ivec3(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), 0, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), max(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))))) | (_GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))))) * ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))))), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))), ~ (~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), int(ivec2(int(6), 1))), (_GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))) * 1)))))), ~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))), ~ (_GLF_IDENTITY(_GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (_GLF_IDENTITY(ivec4(int(6), 1, 1, 0), (ivec4(int(6), 1, 1, 0)) ^ ivec4(0, 0, 0, 0))) >> ivec4(0, 0, 0, 0)))), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))))))))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(clamp(int(1), int(1), int(1)), max(clamp(int(1), int(1), int(1)), clamp(int(1), int(1), int(1))))), int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(int(1), _GLF_IDENTITY(clamp(int(1), int(1), int(1)), max(clamp(int(1), int(1), int(1)), clamp(int(1), int(1), int(1))))), (_GLF_IDENTITY(int(1), _GLF_IDENTITY(clamp(int(1), int(1), int(1)), max(clamp(int(1), int(1), int(1)), clamp(int(1), int(1), int(1)))))) | (_GLF_IDENTITY(int(1), _GLF_IDENTITY(clamp(int(1), int(1), int(1)), max(clamp(int(1), int(1), int(1)), clamp(int(1), int(1), int(1))))))), 1))), int(ivec3(_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))), 0, ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), 0 ^ (_GLF_IDENTITY(int(4), int(4)))), (true ? _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 + (4))) | 0), (1 ^ 1)), ~ (~ (ivec2(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, 0 + (4))) | 0), (1 ^ 1)))))))), int(4)) : _GLF_FUZZED(_injected_loop_counter)))) | (_GLF_IDENTITY(int(4), int(4)))))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(6), ~ (~ (_GLF_IDENTITY(int(6), (int(6)) >> 0)))), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))), ~ (_GLF_IDENTITY(~ _GLF_IDENTITY((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))), ((_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))))) + 0), clamp(_GLF_IDENTITY(~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))), ~ (~ (~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(_GLF_IDENTITY(ivec2(int(6), 1), (ivec2(int(6), 1)) + ivec2(0, 0))))))))), ~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1))))), ~ (_GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), int(ivec2(int(6), 1)))))))))))) || false); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y)))))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(uvec2(gl_WorkGroupSize.x, 0u)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec3(_GLF_IDENTITY(false, true && (false)), true, false))))) || false)) || false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (false ? _GLF_FUZZED(num_workgroup) : workgroup_id));
 for(int _injected_loop_counter = (0 | int(_GLF_ZERO(0.0, injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))) && true)))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)) * exp(0.0)) > injectionSwitch.y))))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || false))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(float(injectionSwitch.x))), _GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)) : _GLF_FUZZED(inversesqrt(vec2(-9.4, 9504.9582))))).x)) > injectionSwitch.y))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | 0); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(_GLF_IDENTITY(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-41.79)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-30.57)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 0.0, 1.0, 0.0)))), bool(true)), max(mix(float(_GLF_FUZZED(-41.79)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-30.57)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 0.0, 1.0, 0.0)))), bool(true)), mix(float(_GLF_FUZZED(-41.79)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-30.57)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 0.0, 1.0, 0.0)))), bool(true)))))))), (true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-41.79)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-30.57)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(_GLF_IDENTITY(true, ! (! (true)))))), 0.0, 1.0, 0.0)))), bool(true))))))) && true), bool(bool(true && (_GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-41.79)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), float(mat2(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(-30.57)), float(_GLF_ZERO(0.0, injectionSwitch.x)), bool(true))), 0.0, 1.0, 0.0)))), bool(true)))))))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec4(bvec2(_GLF_DEAD(false), true), false, false))))))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat4x2(injectionSwitch.x, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(0.0), 1.0, 0.0)), max(float(mat4x2(injectionSwitch.x, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)), sqrt(1.0), 0.0, sqrt(0.0), 1.0, 0.0)), float(mat4x2(injectionSwitch.x, 1.0, 1.0, sqrt(1.0), 0.0, sqrt(0.0), 1.0, 0.0))))) > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = _GLF_IDENTITY((1 & 1), _GLF_IDENTITY(0 ^ ((1 & 1)), max(0 ^ ((1 & 1)), 0 ^ ((1 & 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), (0 & -42457) | (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.5)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)], ((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)]) + 0.0), _GLF_FUZZED(97.42)), bvec2(true, false))).x)), ((1 << _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(4552) : int(0))))) >> _GLF_IDENTITY(int(0), int(0))) * (_GLF_IDENTITY(int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.5)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)], ((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)]) + 0.0), _GLF_FUZZED(97.42)), bvec2(true, false))).x)), (true ? int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED((-1.5)), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)], ((injectionSwitch)[_GLF_IDENTITY(0, (0) - 0)]) + 0.0), _GLF_FUZZED(97.42)), bvec2(true, false))).x)) : _GLF_FUZZED(-27453)))))))); _injected_loop_counter --)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             barrier();
            }
          }
        }
       for(int _injected_loop_counter = (1 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))), (bool(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))))))))) && true)), false, true)))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), bool(bvec2((_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))), false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (true && (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) || false))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false))))
          barrier();
        }
       else
        {
        }
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      barrier();
     barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), true && (_GLF_IDENTITY(false || (_GLF_IDENTITY(false, (false) && true)), false || (false || (_GLF_IDENTITY(false, (false) && true))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1501.2206), _GLF_FUZZED(16.27)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(433.215) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))).y, 0.0 + (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1501.2206), _GLF_FUZZED(16.27)), vec2(_GLF_IDENTITY((injectionSwitch)[0], (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(433.215) : (injectionSwitch)[0])), (injectionSwitch)[1]), bvec2(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))).y)), min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))).y))) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))))))))))
  barrier();
 uint subgroup_base = _GLF_IDENTITY(subgroup_id * subgroup_size, max(subgroup_id * subgroup_size, _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, 0u | (subgroup_size)))), _GLF_IDENTITY(max(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), max(_GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size)))))) ^ 0u))), 0u ^ (subgroup_id * subgroup_size)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), max(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), _GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)))), _GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, 0u ^ (subgroup_id * subgroup_size)), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(_GLF_IDENTITY(subgroup_id, uint(uvec2(subgroup_id, 1u))), subgroup_id)) * subgroup_size, 0u ^ (subgroup_id * subgroup_size))) / 1u)))), (true ? max(subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), subgroup_id)) * subgroup_size, 0u ^ _GLF_IDENTITY((subgroup_id * subgroup_size), ((subgroup_id * subgroup_size)) / 1u))) : _GLF_FUZZED(workgroup_base))))));
 uint virtual_gid = workgroup_base + subgroup_base + subgroup_local_id;
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(_GLF_IDENTITY(6, max(6, 6))), int(ivec2(_GLF_IDENTITY(int(6), ~ (_GLF_IDENTITY(~ (int(6)), int(_GLF_ONE(1.0, injectionSwitch.y)) * (~ (int(6)))))), 1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! _GLF_IDENTITY((! (_GLF_DEAD(false))), _GLF_IDENTITY(true, (true) && true) && ((! (_GLF_DEAD(false)))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), bool(bvec4((! (false)), false, false, false))))), _GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), true && (_GLF_IDENTITY((! (_GLF_IDENTITY(false, ! (! (false))))), ! (! ((! (_GLF_IDENTITY(false, ! (! (false)))))))))))) || false)))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (1 ^ int(_GLF_ZERO(_GLF_IDENTITY(0.0, float(mat2x3(0.0, 1.0, determinant(mat4(0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, sin(0.0))), 0.0, 1.0, abs(1.0)))), injectionSwitch.x))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
      }
     else
      {
      }
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (((_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), (0 | 0) ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, 0 | (1)), 0 | (_GLF_IDENTITY(1, 0 | (1))))))) + 0) ^ 0) << _GLF_IDENTITY(int(_GLF_IDENTITY(0, (0) / 1)), int(0))) >> _GLF_IDENTITY(int(0), int(0)))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), int(3)))), ! (! (_GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) + 0))))))); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), (mat2(1.0) * (injectionSwitch)) * vec2(1.0, 1.0))).x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), _GLF_IDENTITY(bool(bool(bool(false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(bool(bool(bool(false))), false, false), bvec3(bvec4(bvec3(bool(bool(bool(false))), false, false), true)))), bool(bool(bool(_GLF_IDENTITY(bvec3(bool(bool(bool(false))), false, false), bvec3(bvec4(bvec3(bool(bool(bool(false))), false, false), true)))))))))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false)))))), _GLF_IDENTITY(false || (bool(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))), ! (! (false || (bool(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))))))))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! ((false)))) || false)))
          {
          }
         else
          {
           barrier();
          }
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true)))), bool(_GLF_IDENTITY(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))), false), false, true)))), true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true)))), true, true))), bvec3(bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true)))), true, true))), bvec3(bvec3(bvec3(bvec3(bvec3(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec4(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), false, true)))), true, true)))))))))))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-2248.1371), _GLF_FUZZED(-9356.4186)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y) || false, ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y) || false), (! ((injectionSwitch.x > injectionSwitch.y) || false)) && true))))) || false)))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(-8628.3976)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))).x > injectionSwitch.y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) || false))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) != _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, clamp(1, 1, 1))))); _injected_loop_counter ++)
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))), (false ? _GLF_FUZZED(_injected_loop_counter) : ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) << 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(61291) : _injected_loop_counter --))) | 0), (_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(61291) : _injected_loop_counter --))) | 0), 1 * (_GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, (false ? _GLF_FUZZED(61291) : _injected_loop_counter --))) | 0)))) ^ int(_GLF_ZERO(0.0, injectionSwitch.x))))
            {
             barrier();
            }
          }
        }
      }
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), 1.0, 1.0)))) - vec2(0.0, 0.0)).y)) ? _GLF_ZERO(_GLF_IDENTITY(0.0, float(mat3x4(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, log(1.0), exp(0.0)))), _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).x) : _GLF_FUZZED(343.616)))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter < 1, ! (! (_injected_loop_counter < 1)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | int(_GLF_ZERO(0.0, injectionSwitch.x))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), bool(bvec2((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))), true))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, true && (true))), ! (! (! (_GLF_IDENTITY(true, true && (true))))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         barrier();
        }
       for(int _injected_loop_counter = _GLF_IDENTITY((0 | 0), (_GLF_IDENTITY(false ? _GLF_FUZZED(92498) : (0 | 0), min(false ? _GLF_FUZZED(92498) : (0 | 0), false ? _GLF_FUZZED(92498) : (0 | 0))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
           barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bool(false)))))), ! (_GLF_IDENTITY(! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, bool(bool(false))))))), ! (! (! (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false) || (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), (bool(bool(false))) || false))) || false)))))))))))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)) > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0), mat3(1.0) * (mat2x3(injectionSwitch.x, 0.0, 0.0, 1.0, 0.0, 0.0))))) < injectionSwitch.y)) && (false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), (_GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, true, true)), ! (! (bool(bvec3(_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, 1.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0))), injectionSwitch.x)) > injectionSwitch.y, true, true)))))) || false))))))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))));
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         barrier();
        }
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_base + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), min(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))), 0u ^ (_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))))))) + 1) % _GLF_IDENTITY(subgroup_size, uint(uvec4(subgroup_size, _GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), max(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x)))), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x))) - 0u), uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))));
 if(_GLF_DEAD(false))
  barrier();
 uint read = 0;
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), 0 | (int(_GLF_ZERO(0.0, injectionSwitch.x))))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), ! (! (false)))), ! (! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), ~ (~ (_GLF_IDENTITY(uint(1), (uint(1)) | (uint(1))))))))), 4, 64, 4);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(905.056)), bool(false))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), min(clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y), clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, injectionSwitch.y))) : _GLF_FUZZED(-825.235)))), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)))).y), _GLF_IDENTITY(float(_GLF_FUZZED(905.056)), (true ? _GLF_IDENTITY(float(_GLF_FUZZED(905.056)), mix(float(_GLF_FUZZED(-63.60)), float(float(_GLF_FUZZED(905.056))), bool(true))) : _GLF_FUZZED(5134.6053))), bool(false))))))), injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-211.869)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(905.056)), bool(false))))), _GLF_IDENTITY(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(905.056)), bool(false)))))), max(0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(905.056)), bool(false)))))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)).y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mat2(1.0) * (mat2(1.0) * (injectionSwitch)))).y)), injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(905.056)), bool(false))))))))), injectionSwitch.y)))))) && true))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_IDENTITY((subgroup_local_id % 2) == 0, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((subgroup_local_id % 2) == 0)))
  {
   read = atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY((64), 0 | ((64))) | (64), max(_GLF_IDENTITY((64) | (_GLF_IDENTITY(64, (false ? _GLF_FUZZED(58925) : 64))), int(_GLF_IDENTITY(ivec4((64) | (64), 0, 0, (0 ^ 1)), ~ (~ (ivec4((64) | (64), 0, 0, (0 ^ 1))))))), (64) | (64)))), 2);
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
  }
 else
  {
   _GLF_IDENTITY(read = _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), ~ (~ _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(4, max(4, 4)), (_GLF_IDENTITY(4, max(4, 4))) | 0), 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2), (atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2)) | 0u)))), (0u | 0u) + (_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2)))), 0u | ((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2)))))), (false ? _GLF_FUZZED(uvec3(56172u, 43575u, 185454u).b) : (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2)))))))) * 1u)), (_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2), (false ? _GLF_FUZZED(subgroup_base) : atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), max((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), clamp((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u * ((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))), (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), 4, 64, 2))))), uint(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], ~ (~ (buf[virtual_gid]))), 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | ((buf[virtual_gid]))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(64, min(64, _GLF_IDENTITY(64, clamp(64, 64, 64))))) | (_GLF_IDENTITY(64, (64) | (64)))), 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))))), 0u), (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u)))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u))))))), (false ? _GLF_FUZZED((uvec2(126692u, 4671u) / uvec2(112489u, 173733u))) : uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u)))), uvec2(0u, 0u) | (uvec2(_GLF_IDENTITY(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), clamp(uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u), uvec2(_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (false ? _GLF_FUZZED(num_workgroup) : uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) | 0), 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, _GLF_IDENTITY(uint(uvec3(virtual_gid, 1u, 1u)), min(uint(uvec3(virtual_gid, 1u, 1u)), uint(uvec3(virtual_gid, 1u, 1u)))))], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(_GLF_IDENTITY(64, (64) / 1), 64)), 2))))), 0u))))))))))) / uvec2(_GLF_IDENTITY(1u, (1u) ^ 0u), 1u))))), (0u | 0u) + (_GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4), clamp(_GLF_IDENTITY((4), (false ? _GLF_FUZZED(67517) : (4))), (4), (4))) - 0), 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, _GLF_IDENTITY(64, max(64, 64)), 2)))), ~ (_GLF_IDENTITY(~ ((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, (4) - 0), 64, 2), min(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 2), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(pow(-48.23, 224.275)) : _GLF_ZERO(0.0, injectionSwitch.x)))) - 0.0))))))), 4, 64, 2))))), (~ ((_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (~ (_GLF_IDENTITY((4), int(ivec2((4), 1)))))) - 0), 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u * ((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))), uint(uint(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, _GLF_IDENTITY((4), ~ (~ (_GLF_IDENTITY((4), int(ivec2((4), 1)))))) - 0), 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 1u * ((buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 2))))))))) - 0u))))) * 1u)), clamp((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(1.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), mix(float(_GLF_FUZZED(-6.0)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true)))), bool(true)))))) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(1.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), mix(float(_GLF_FUZZED(-6.0)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1312.3183), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0), max(vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0), vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0)))))), float(injectionSwitch.x), bool(true)))), bool(true)))))) * 1.0)) * 1.0), 1.0, 1.0, _GLF_IDENTITY(determinant(mat4(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, abs(1.0), sqrt(0.0), 1.0, 1.0)), (determinant(mat4(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, abs(1.0), sqrt(0.0), 1.0, 1.0))) / 1.0), 0.0, 1.0, 0.0, 1.0))))), (uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, float(mat4x2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(1.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), mix(float(_GLF_FUZZED(-6.0)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true)))), bool(true)))))) * 1.0), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), (false ? _GLF_FUZZED(1.4) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(1312.3183)), float(injectionSwitch.x), bool(true))), mix(float(_GLF_FUZZED(-6.0)), float(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(_GLF_FUZZED(1312.3183), float(_GLF_IDENTITY(vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0), max(vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0), vec4(_GLF_FUZZED(1312.3183), 0.0, 0.0, 1.0)))))), float(injectionSwitch.x), bool(true)))), bool(true)))))) * 1.0)) * 1.0), 1.0, 1.0, _GLF_IDENTITY(determinant(mat4(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, abs(1.0), sqrt(0.0), 1.0, 1.0)), (determinant(mat4(1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0))), 1.0, 1.0, 0.0, 0.0, exp(0.0), 1.0, 1.0, 0.0, abs(1.0), sqrt(0.0), 1.0, 1.0))) / 1.0), 0.0, 1.0, 0.0, 1.0)))))) | 0u)), 4, 64, 2)))), (0u | 0u) + ((_GLF_IDENTITY(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, 0 | (2))), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), clamp(_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, 0 | (2))), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, 0 | (2))), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2))), _GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, _GLF_IDENTITY(2, 0 | (2))), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], min(buf[virtual_gid], buf[virtual_gid])), (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), 4, 64, 2)))))))) * 1u)), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], clamp(buf[virtual_gid], buf[virtual_gid], buf[virtual_gid])), 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) + 0u)]) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u), (_GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u), clamp(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u), _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (uint(_GLF_ZERO(0.0, injectionSwitch.x))) >> 0u)))) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), 4, 64, _GLF_IDENTITY(2, (2) * ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))))), (0u | _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u))))), _GLF_IDENTITY((uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u))), ((uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))) | ((uint(_GLF_IDENTITY(uint(0u), ~ (~ (uint(0u)))))) | (0u >> _GLF_IDENTITY(uint(1u), uint(1u)))))))) + ((_GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, 0u + (virtual_gid))], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], _GLF_IDENTITY((buf[virtual_gid]), uint(uvec4(_GLF_IDENTITY((buf[virtual_gid]), ((buf[virtual_gid])) | 0u), 1u, uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u))) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(9532.5913)), float(_GLF_IDENTITY(injectionSwitch.x, float(mat4x3(injectionSwitch.x, 0.0, 1.0, log(1.0), 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0)))), _GLF_IDENTITY(bool(true), true && (bool(true)))))))), 4, 64, 2)))))) * 1u)), (_GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) * 1u), 4, 64, 2), _GLF_IDENTITY((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, 64, 2), atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * exp(0.0))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) : _GLF_FUZZED(injectionSwitch))).x, _GLF_IDENTITY(float(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * exp(0.0))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) : _GLF_FUZZED(injectionSwitch))).x, sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, exp(0.0))), min(float(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * exp(0.0))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) : _GLF_FUZZED(injectionSwitch))).x, sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, exp(0.0))), float(mat3(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), min(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) * exp(0.0))), _GLF_IDENTITY(bvec2(true, true), bvec2(bvec3(bvec2(true, true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-3.4), _GLF_FUZZED(4027.0686)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))) : _GLF_FUZZED(injectionSwitch))).x, sqrt(1.0), length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 0.0, 1.0, exp(0.0))))))))), 4, 64, 2)))), _GLF_IDENTITY((0u | 0u), ~ (~ ((0u | 0u)))) + ((_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(buf[virtual_gid], 4, _GLF_IDENTITY(64, (64) << _GLF_IDENTITY(0, 0 | (_GLF_IDENTITY(0, int(ivec2(0, 0)))))), 2), atomicLoad(_GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(210.166, -903.597), (vec2(210.166, -903.597)) * mat2(1.0))) : injectionSwitch)).x))), clamp(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(210.166, -903.597), (vec2(210.166, -903.597)) * mat2(1.0))) : injectionSwitch)).x))), _GLF_IDENTITY(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(210.166, -903.597), (vec2(210.166, -903.597)) * mat2(1.0))) : injectionSwitch)).x))), (_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(210.166, -903.597), (vec2(210.166, -903.597)) * mat2(1.0))) : injectionSwitch)).x)))) | 0u), _GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(210.166, -903.597), (vec2(210.166, -903.597)) * mat2(1.0))) : injectionSwitch)).x))))), 4, _GLF_IDENTITY(64, clamp(64, 64, 64)), 2)))))) * 1u))))) | _GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), (_GLF_IDENTITY((0u >> _GLF_IDENTITY(uint(4u), uint(4u))), ((0u >> _GLF_IDENTITY(uint(4u), uint(4u)))) << 0u)) | ((0u >> _GLF_IDENTITY(uint(4u), uint(_GLF_IDENTITY(4u, max(4u, 4u)))))))))), ~ (~ (read = _GLF_IDENTITY(atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], min(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)], buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) ^ 0u)])), 4, 64, 2), ~ (~ (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), (_GLF_IDENTITY(atomicLoad(buf[virtual_gid], 4, 64, 2), min(atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (_GLF_IDENTITY(0u, max(_GLF_IDENTITY(0u, (0u) << 0u), 0u)) >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), 0u | (_GLF_IDENTITY(uint(8u), (uint(8u)) >> 0u))))) + (_GLF_IDENTITY(buf[_GLF_IDENTITY(virtual_gid, min(virtual_gid, _GLF_IDENTITY(virtual_gid, clamp(virtual_gid, virtual_gid, virtual_gid))))], 0u + (buf[virtual_gid])))), 4, 64, 2), atomicLoad(buf[virtual_gid], 4, 64, 2)))) * _GLF_IDENTITY(1u, (1u) << 0u))))))));
  }
 subgroupBarrier();
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true)))))))
  {
   do
    {
     atomicStore(checker[virtual_gid], read, 4, 64, 4);
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, true)), false || (bool(bvec4(false, true, false, true))))), bool(bvec4(false, false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y)), true)))));
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
