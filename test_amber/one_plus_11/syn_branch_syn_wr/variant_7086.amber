#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 vec2 _f0;
 bvec3 _f1;
 bvec4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_5 {
 uvec4 _f0;
 _GLF_struct_4 _f1;
} ;

struct _GLF_struct_2 {
 vec2 _f0;
 uint _f1;
 vec3 _f2;
} ;

struct _GLF_struct_1 {
 mat3 _f0;
 mat2x4 _f1;
 vec4 _f2;
 mat3 _f3;
 ivec2 _f4;
 int _f5;
 mat4x2 _f6;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 ivec4 _f1;
 _GLF_struct_1 _f2;
 uvec4 _f3;
 bool _f4;
 _GLF_struct_2 _f5;
 uint _f6;
} ;

struct _GLF_struct_0 {
 ivec2 _f0;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 mat3x4 _f1;
 mat2x4 _f2;
 _GLF_struct_0 _f3;
 uint subgroup_id;
 _GLF_struct_3 _f4;
 _GLF_struct_5 _f5;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
#extension GL_EXT_maximal_reconvergence : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), float(vec4(_GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))), 1.0, sin(0.0), 0.0))) * 1.0)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec4(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false)))), bool(bool(! (false))))), false || (! (_GLF_IDENTITY(! (false), bool(bool(_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) && true), ! (! (! (false)))))))))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
  }
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(bvec3(true), mat3x4(1.0), mat2x4(1.0), _GLF_struct_0(ivec2(1)), gl_SubgroupID, _GLF_struct_3(mat2(1.0), ivec4(1), _GLF_struct_1(mat3(1.0), mat2x4(1.0), vec4(1.0), mat3(1.0), ivec2(1), 1, mat4x2(1.0)), uvec4(1u), _GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, bool(bvec3(_GLF_IDENTITY(true, ! (! (true))), false, true))), true, false, false)))) && true), _GLF_struct_2(vec2(1.0), 1u, vec3(1.0)), 1u), _GLF_struct_5(uvec4(1u), _GLF_struct_4(vec2(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, 1.0 * (1.0))))), bvec3(true), bvec4(true), ivec2(1))));
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, false || (true))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false))))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, true && (false)))), true)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, true && (false)))), bool(bvec2(bool(bool(_GLF_IDENTITY(false, true && (false)))), true))))) || false), ! (! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))), ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))) || false)), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))), ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))) || false))) && true))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (true && _GLF_IDENTITY((false), ((false)) && true)) && true)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))) || false)), (! (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), (_GLF_IDENTITY(true && _GLF_IDENTITY((false), ((false)) && true), bool(bvec2(true && _GLF_IDENTITY((false), ((false)) && true), false)))) && true))), ((_GLF_IDENTITY(false, true && _GLF_IDENTITY((false), ((false)) && true)))) || false))) && true)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).y) + 0.0)), false || (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-618.680)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > injectionSwitch.y), bool(_GLF_IDENTITY(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))), false), bvec2(_GLF_IDENTITY(bvec3(bvec2((injectionSwitch.x > injectionSwitch.y), false), _GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(length(vec3(_GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-8.5)), float(_GLF_IDENTITY(0.0, max(0.0, 0.0))), bool(true))), 0.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), dot(vec3(length(vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, float(mat2(0.0, 0.0, 0.0, 1.0))), 0.0)), 1.0), vec3(0.0, 0.0, 1.0))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0), mat3(mat4x3(mat3(injectionSwitch.y, 0.0, 1.0, _GLF_IDENTITY(dot(vec3(length(vec3(0.0, _GLF_IDENTITY(0.0, 0.0 + (_GLF_IDENTITY(0.0, min(0.0, 0.0)))), 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), _GLF_IDENTITY(dot(vec3(_GLF_IDENTITY(length(vec3(0.0, 0.0, 0.0)), (true ? length(vec3(0.0, 0.0, 0.0)) : _GLF_FUZZED(6180.2304))), 0.0, 1.0), vec3(0.0, 0.0, 1.0)), max(dot(vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0), (true ? mat4x2(0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0) : _GLF_FUZZED(mat4x2(-1445.9162, 6459.6447, -471.786, 307.088, 7.0, 58.48, -5531.9021, -67.42)))))))), 0.0, 1.0)), dot(vec3(length(vec3(0.0, 0.0, 0.0)), 0.0, 1.0), vec3(0.0, 0.0, 1.0))))), 0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0, 0.0))))))))), bvec3(bvec4(bvec3(bvec2((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, 0.0, 0.0, determinant(mat3(0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0))), injectionSwitch.y)), ! (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2x4(injectionSwitch.y, 0.0, 0.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(49.55) : 0.0)))), 0.0, determinant(mat3(0.0, 0.0, _GLF_IDENTITY(0.0, (0.0) / _GLF_IDENTITY(dot(vec4(0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0), vec4(0.0, 0.0, 0.0, 1.0)), dot(vec4(0.0, 0.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), 1.0), vec4(0.0, 0.0, 0.0, 1.0)))), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 1.0, 1.0))), injectionSwitch.y)))))), false), _GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))), false)))))))))) || (_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((false ? _GLF_FUZZED(vec2(592.598, 6592.8347)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), vec2(vec4(_GLF_IDENTITY((false ? _GLF_FUZZED(vec2(592.598, 6592.8347)) : _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch))), vec2(mat3x4((false ? _GLF_FUZZED(_GLF_IDENTITY(vec2(592.598, 6592.8347), (false ? _GLF_FUZZED(injectionSwitch) : vec2(592.598, 6592.8347)))) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), vec2(1.0, 1.0) * (injectionSwitch))), 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0))), 0.0, tan(sqrt(0.0)))))), injectionSwitch, injectionSwitch)).y)))))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, false)))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * workgroup_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (workgroup_size * workgroup_id), ~ (~ (~ (workgroup_size * workgroup_id))))), (((1u << _GLF_IDENTITY(uint(1u), uint(1u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), (_GLF_IDENTITY(uint(1u), min(uint(1u), uint(1u)))) ^ 0u), uint(1u))) ^ 0u) * ((~ (workgroup_size * workgroup_id)))));
 uint subgroup_base = _GLF_IDENTITY(_GLF_struct_replacement_6.subgroup_id, ~ (~ (_GLF_struct_replacement_6.subgroup_id))) * subgroup_size;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + subgroup_base + subgroup_local_id, clamp(workgroup_base + subgroup_base + subgroup_local_id, workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_base, 0u | (_GLF_IDENTITY(subgroup_base, clamp(subgroup_base, subgroup_base, subgroup_base)))), (_GLF_IDENTITY(subgroup_base, max(subgroup_base, subgroup_base))) * 1u) + _GLF_IDENTITY(subgroup_local_id, max(subgroup_local_id, subgroup_local_id)), workgroup_base + subgroup_base + _GLF_IDENTITY(subgroup_local_id, uint(_GLF_IDENTITY(uvec3(subgroup_local_id, 0u, 0u), ~ (~ (uvec3(subgroup_local_id, 0u, 0u))))))))) | (workgroup_base + subgroup_base + subgroup_local_id))) >> 0u);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)))) && true)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true))), (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))))))))) || false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2((injectionSwitch.x > injectionSwitch.y), true), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), false, false))), bvec2(bvec4(bvec2((injectionSwitch.x > injectionSwitch.y), true), true, true))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      return;
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_base, (workgroup_base + subgroup_base) | (workgroup_base + subgroup_base)) + ((_GLF_IDENTITY(subgroup_local_id + 1, (_GLF_IDENTITY(_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (true ? ~ (~ (1)) : _GLF_FUZZED(71647)))) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (false ? _GLF_FUZZED(ivec2(34511, 58248).r) : (~ (1))))) : _GLF_FUZZED(subgroup_local_id))))))))), clamp(_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (true ? ~ (~ (1)) : _GLF_FUZZED(71647)))) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (false ? _GLF_FUZZED(ivec2(34511, 58248).r) : (~ (1))))) : _GLF_FUZZED(subgroup_local_id))))))))), _GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (true ? ~ (~ (1)) : _GLF_FUZZED(71647)))) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (false ? _GLF_FUZZED(ivec2(34511, 58248).r) : (~ (1))))) : _GLF_FUZZED(subgroup_local_id))))))))), _GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (1)), (true ? ~ (~ (1)) : _GLF_FUZZED(71647)))) : _GLF_FUZZED(subgroup_local_id), (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id)) / uint(_GLF_ONE(1.0, injectionSwitch.y)))) | (_GLF_IDENTITY(true ? subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))) : _GLF_FUZZED(subgroup_local_id), ~ (~ (true ? subgroup_local_id + _GLF_IDENTITY(1, ~ _GLF_IDENTITY((~ (1)), (false ? _GLF_FUZZED(ivec2(34511, 58248).r) : (~ (1))))) : _GLF_FUZZED(subgroup_local_id)))))))))))))) % _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))));
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(true, (true) || false))))), false)), ! _GLF_IDENTITY((! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), bool(bvec3((! (bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))), _GLF_IDENTITY(false, (false) || false), true))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), true, true))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (false))), true, true))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), bool(bvec3(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true))))), (bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, true)))))) && true))) && true)))), true, true)))))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    return;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(_GLF_IDENTITY(injectionSwitch.y, float(vec2(injectionSwitch.y, 0.0))), injectionSwitch.y, injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     return;
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec3(! (_GLF_IDENTITY(false, (false) || false)), false, false)))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0) > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    return;
  }
 uint read = 0;
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), _GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u))) - 0u), 1u))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), _GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u))) - 0u), 1u))), (_GLF_IDENTITY(uint(1), uint(uvec2(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)), clamp((uint(1)), (uint(1)), _GLF_IDENTITY((uint(1)), ((uint(1))) >> 0u))) - 0u), 1u)))) - 0u)))) >> _GLF_IDENTITY(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) >> 0u)), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) >> 0u)), (uint(_GLF_IDENTITY(0u, (0u) >> 0u))) * 1u), uint(_GLF_IDENTITY(0u, (0u) >> 0u)), uint(_GLF_IDENTITY(0u, (0u) >> 0u)))))), (_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) >> 0u)), clamp(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) >> 0u)), (uint(_GLF_IDENTITY(0u, (0u) >> 0u))) * 1u), uint(_GLF_IDENTITY(0u, (0u) >> 0u)), uint(_GLF_IDENTITY(0u, (0u) >> 0u))))))) >> 0u)), 4, 64, 4);
 if(_GLF_IDENTITY((subgroup_local_id % 2) == _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), clamp(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), min(_GLF_IDENTITY(0, clamp(0, 0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, clamp(0, 0, 0)), (false ? _GLF_FUZZED(58549) : _GLF_IDENTITY(0, clamp(0, 0, 0)))))), _GLF_IDENTITY(0, clamp(0, 0, 0)))), ! (! ((subgroup_local_id % 2) == _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) ^ 0)) * 1)))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
   read = _GLF_IDENTITY(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (4) | 0), 4), clamp(max(_GLF_IDENTITY(4, (4) | 0), 4), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) | (4))))), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(4, ~ (~ (4))))))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), (true ? _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-27659))) | _GLF_IDENTITY((2), max((2), (2))) : _GLF_FUZZED(75899))))), clamp(atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (4) | 0), 4), clamp(max(_GLF_IDENTITY(4, (4) | 0), 4), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) | (4))))), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(4, ~ (~ (4))))))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), (true ? _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-27659))) | _GLF_IDENTITY((2), max((2), (2))) : _GLF_FUZZED(75899))))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (4) | 0), 4), clamp(max(_GLF_IDENTITY(4, (4) | 0), 4), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) | (4))))), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(4, ~ (~ (4))))))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), (true ? _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-27659))) | _GLF_IDENTITY((2), max((2), (2))) : _GLF_FUZZED(75899))))), atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (virtual_gid) * 1u)], _GLF_IDENTITY(4, _GLF_IDENTITY(max(_GLF_IDENTITY(4, (4) | 0), 4), clamp(max(_GLF_IDENTITY(4, (4) | 0), 4), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, (4) | (4))))), max(_GLF_IDENTITY(4, (4) | 0), _GLF_IDENTITY(4, (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(4, ~ (~ (4))))))))), 64, _GLF_IDENTITY(2, _GLF_IDENTITY((2) | (2), (true ? _GLF_IDENTITY((2), (true ? (2) : _GLF_FUZZED(-27659))) | _GLF_IDENTITY((2), max((2), (2))) : _GLF_FUZZED(75899)))))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), ! (! (_GLF_IDENTITY(false, ! (! (false))))))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, _GLF_IDENTITY(true, ! (! (true)))))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0)), min(_GLF_IDENTITY(vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0)), (vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0))) / vec2(1.0, 1.0)), vec2(vec4(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), 0.0, 1.0))))))).x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(uintBitsToFloat(uvec2(44830u, 123298u))) : injectionSwitch)), (injectionSwitch) + vec2(0.0, 0.0)))).x > injectionSwitch.y, true)))), false || (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, true))), _GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) || false)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(true), true && (bool(true)))), ! (! (bool(_GLF_IDENTITY(bool(true), true && (bool(true)))))))), (_GLF_IDENTITY(true, (true) || _GLF_IDENTITY(false, ! (! (false))))) || _GLF_IDENTITY(false, true && (false))))))))), true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, (_GLF_IDENTITY(true, (true) || false)) && true))), ! (! (true))) && (false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         barrier();
        }
       barrier();
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true)))))))), true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), bool(bvec3((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), false, true)))))), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch[0], clamp(injectionSwitch[0], injectionSwitch[0], injectionSwitch[0])), injectionSwitch[1])))), injectionSwitch)).y))))))) && true)))), ((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), bool(_GLF_IDENTITY(bvec2(injectionSwitch.x > injectionSwitch.y, true), bvec2(bvec3(bvec2(injectionSwitch.x > injectionSwitch.y, true), true)))))))), true && (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, round(length(normalize(1.0))), 1.0, _GLF_ONE(1.0, injectionSwitch.y)))), _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y), bool(bool((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))), injectionSwitch)).y))))))) && true))))) && true))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(-160.569)), bool(false)))))) || _GLF_IDENTITY(false, ! (! (false))))))), false || (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).y, true && _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) || false)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (! (false))) && true)), true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))), _GLF_IDENTITY(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))), ! (! ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))))) || false)))))), bool(bvec2(! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), injectionSwitch, injectionSwitch)).y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))), true)))), _GLF_IDENTITY(true, _GLF_IDENTITY(! (! (true)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), true, true, true))), false, false, false)), false || (bool(bvec4(_GLF_IDENTITY(! (! (true)), bool(bvec4(! (! (true)), true, true, true))), false, false, false)))))) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), false, true, false))))) || false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false))))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))) || _GLF_IDENTITY(false, (false) || false))))), true && (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! (! (injectionSwitch.x > injectionSwitch.y)), true && (! (! (injectionSwitch.x > injectionSwitch.y)))))), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), min(float(mat3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0)), float(mat3(injectionSwitch.y, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0))))), ! (! (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y)))), false, true, false))))) || false)))))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))) || false)))))))) && true))))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(7069.0286), _GLF_FUZZED(float(-60028))), bvec2(false, false))).x > injectionSwitch.y)) || (false)), (injectionSwitch.x > injectionSwitch.y))), true, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false))))))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))), ! (! (_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y), min((injectionSwitch.y), (injectionSwitch.y))) - 0.0)) && true))))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), bool(bvec3(bool(bool(false)), true, false))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true)))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! _GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y)))))) && true), false || (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(! _GLF_IDENTITY(_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > injectionSwitch.y)))))) && true), false || (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY((! (injectionSwitch.x > injectionSwitch.y)), ! (! ((! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))))) && true))), false || (! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), (! (injectionSwitch.x > injectionSwitch.y)) && true))))))))))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, true))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, 0 ^ (4)), 64, 2);
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
      barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec3(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && ((false))) && true)))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 subgroupBarrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 atomicStore(checker[virtual_gid], read, 4, 64, 4);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bool(false)))), (! (_GLF_IDENTITY(false, bool(bool(false))))) && true))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
