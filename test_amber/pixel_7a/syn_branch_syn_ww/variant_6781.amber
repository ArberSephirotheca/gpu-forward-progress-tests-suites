#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_47 {
 ivec3 _f0;
 ivec2 _f1;
 mat4x3 _f2;
 ivec2 _f3;
 mat2x3 _f4;
 mat4 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_46 {
 bvec4 _f0;
 mat2x4 _f1;
 vec4 _f2;
 uvec2 _f3;
 uvec4 _f4;
 bool _f5;
} ;

struct _GLF_struct_48 {
 vec2 _f0;
 int _f1;
 _GLF_struct_46 _f2;
 vec3 _f3;
 bvec2 _f4;
 _GLF_struct_47 _f5;
} ;

struct _GLF_struct_44 {
 uint _f0;
 mat3x4 _f1;
 mat3x2 _f2;
 mat2 _f3;
 uvec2 _f4;
} ;

struct _GLF_struct_45 {
 _GLF_struct_44 _f0;
 mat3x4 _f1;
} ;

struct _GLF_struct_42 {
 ivec2 _f0;
} ;

struct _GLF_struct_41 {
 mat3x4 _f0;
} ;

struct _GLF_struct_40 {
 bool _f0;
 uvec4 _f1;
 mat3 _f2;
 ivec2 _f3;
 float _f4;
 bvec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_43 {
 mat3x4 _f0;
 _GLF_struct_40 _f1;
 _GLF_struct_41 _f2;
 mat4 _f3;
 mat4 _f4;
 _GLF_struct_42 _f5;
} ;

struct _GLF_struct_38 {
 ivec4 _f0;
 bvec4 _f1;
 mat2x3 _f2;
 float _f3;
} ;

struct _GLF_struct_37 {
 mat4x3 _f0;
 uvec4 _f1;
 mat3 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_36 {
 bvec3 _f0;
 ivec3 _f1;
 uint _f2;
 mat3 _f3;
 mat2x4 _f4;
 mat3x4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_35 {
 ivec2 _f0;
 bvec4 _f1;
 bvec3 _f2;
 mat2x3 _f3;
 uvec4 _f4;
} ;

struct _GLF_struct_34 {
 mat4x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_33 {
 vec2 _f0;
 mat2 _f1;
 mat3 _f2;
} ;

struct _GLF_struct_39 {
 _GLF_struct_33 _f0;
 _GLF_struct_34 _f1;
 mat3x2 _f2;
 _GLF_struct_35 _f3;
 _GLF_struct_36 _f4;
 _GLF_struct_37 _f5;
 _GLF_struct_38 _f6;
} ;

struct _GLF_struct_49 {
 ivec3 _f0;
 _GLF_struct_39 _f1;
 _GLF_struct_43 _f2;
 uint next_virtual_gid;
 _GLF_struct_45 _f3;
 _GLF_struct_48 _f4;
} ;

struct _GLF_struct_30 {
 uvec2 _f0;
 mat2x4 _f1;
 uvec4 _f2;
 bvec3 _f3;
 int _f4;
 mat3x4 _f5;
} ;

struct _GLF_struct_29 {
 float _f0;
 bvec4 _f1;
 bool _f2;
 uvec2 _f3;
 bvec2 _f4;
 bvec3 _f5;
} ;

struct _GLF_struct_28 {
 ivec2 _f0;
 bvec4 _f1;
 bvec4 _f2;
 mat3x4 _f3;
 bvec4 _f4;
 int _f5;
} ;

struct _GLF_struct_31 {
 mat4 _f0;
 _GLF_struct_28 _f1;
 ivec2 _f2;
 uint _f3;
 _GLF_struct_29 _f4;
 _GLF_struct_30 _f5;
} ;

struct _GLF_struct_32 {
 mat4x2 _f0;
 _GLF_struct_31 _f1;
 int i;
 mat2 _f2;
} ;

struct _GLF_struct_25 {
 vec2 _f0;
 mat2x3 _f1;
 mat2x4 _f2;
 mat4x2 _f3;
 bvec2 _f4;
 mat3x2 _f5;
 ivec4 _f6;
} ;

struct _GLF_struct_24 {
 ivec2 _f0;
 uint _f1;
 mat3x2 _f2;
 bvec3 _f3;
 ivec4 _f4;
} ;

struct _GLF_struct_26 {
 _GLF_struct_24 _f0;
 mat2x3 _f1;
 bvec4 _f2;
 _GLF_struct_25 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_22 {
 mat4x3 _f0;
 bvec4 _f1;
 ivec3 _f2;
} ;

struct _GLF_struct_21 {
 mat2 _f0;
 uint _f1;
 uvec4 _f2;
 bvec4 _f3;
 ivec2 _f4;
 bvec3 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_20 {
 uint _f0;
 mat4 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_19 {
 uvec2 _f0;
 vec2 _f1;
 mat2x3 _f2;
 ivec4 _f3;
 vec3 _f4;
 mat2x4 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_23 {
 _GLF_struct_19 _f0;
 ivec2 _f1;
 _GLF_struct_20 _f2;
 _GLF_struct_21 _f3;
 mat3x4 _f4;
 _GLF_struct_22 _f5;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
} ;

struct _GLF_struct_16 {
 mat2x3 _f0;
 bvec3 _f1;
 uint _f2;
} ;

struct _GLF_struct_18 {
 _GLF_struct_16 _f0;
 vec4 _f1;
 _GLF_struct_17 _f2;
} ;

struct _GLF_struct_14 {
 int _f0;
 mat3x2 _f1;
 uvec4 _f2;
 mat4x3 _f3;
} ;

struct _GLF_struct_13 {
 bvec2 _f0;
 mat3 _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_15 {
 _GLF_struct_13 _f0;
 _GLF_struct_14 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_27 {
 _GLF_struct_15 _f0;
 mat2 _f1;
 uint _f2;
 _GLF_struct_18 _f3;
 _GLF_struct_23 _f4;
 _GLF_struct_26 _f5;
 uvec4 _f6;
} ;

struct _GLF_struct_12 {
 uint subgroup_id;
 mat2 _f0;
 float _f1;
} ;

struct _GLF_struct_9 {
 vec4 _f0;
 mat4x3 _f1;
 uvec4 _f2;
 mat3x4 _f3;
 mat3 _f4;
 bvec4 _f5;
 ivec2 _f6;
} ;

struct _GLF_struct_8 {
 vec3 _f0;
 mat4x2 _f1;
 ivec4 _f2;
 uvec2 _f3;
 mat2 _f4;
 vec2 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_7 {
 vec4 _f0;
 int _f1;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 _GLF_struct_8 _f1;
 _GLF_struct_9 _f2;
 uint num_workgroup;
} ;

struct _GLF_struct_11 {
 _GLF_struct_10 _f0;
 vec3 _f1;
} ;

struct _GLF_struct_4 {
 mat2x4 _f0;
 mat4 _f1;
 uvec3 _f2;
 bool _f3;
} ;

struct _GLF_struct_5 {
 mat4x3 _f0;
 _GLF_struct_4 _f1;
 uint _f2;
 ivec2 _f3;
 float _f4;
 mat3x2 _f5;
} ;

struct _GLF_struct_3 {
 mat2 _f0;
 mat2 _f1;
 bvec4 _f2;
 ivec4 _f3;
 ivec2 _f4;
} ;

struct _GLF_struct_1 {
 float _f0;
 uint _f1;
 ivec4 _f2;
} ;

struct _GLF_struct_0 {
 uint subgroup_size;
 bvec2 _f0;
 ivec4 _f1;
 int _f2;
 uvec2 _f3;
} ;

struct _GLF_struct_2 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 mat3x4 _f2;
} ;

struct _GLF_struct_6 {
 bvec3 _f0;
 uvec3 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_5 _f4;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 _GLF_struct_12 _GLF_struct_replacement_12 = _GLF_struct_12(gl_SubgroupID, mat2(1.0), 1.0);
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(bvec3(true), uvec3(1u), _GLF_struct_2(_GLF_struct_0(gl_SubgroupSize, bvec2(true), ivec4(1), 1, uvec2(1u)), _GLF_struct_1(1.0, 1u, ivec4(1)), mat3x4(1.0)), _GLF_struct_3(mat2(1.0), mat2(1.0), bvec4(true), ivec4(1), ivec2(1)), _GLF_struct_5(mat4x3(1.0), _GLF_struct_4(mat2x4(1.0), mat4(1.0), uvec3(1u), true), 1u, ivec2(1), 1.0, mat3x2(1.0)));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(_GLF_struct_10(_GLF_struct_7(vec4(1.0), 1), _GLF_struct_8(vec3(1.0), mat4x2(1.0), ivec4(1), uvec2(1u), mat2(1.0), vec2(1.0), mat2x3(1.0)), _GLF_struct_9(vec4(1.0), mat4x3(1.0), uvec4(1u), mat3x4(1.0), mat3(1.0), bvec4(true), ivec2(1)), gl_NumWorkGroups.x), vec3(1.0));
 uint workgroup_size = gl_WorkGroupSize.x;
 _GLF_struct_27 _GLF_struct_replacement_27 = _GLF_struct_27(_GLF_struct_15(_GLF_struct_13(bvec2(true), mat3(1.0), gl_WorkGroupID.x), _GLF_struct_14(1, mat3x2(1.0), uvec4(1u), mat4x3(1.0)), mat3x4(1.0)), mat2(1.0), 1u, _GLF_struct_18(_GLF_struct_16(mat2x3(1.0), bvec3(true), 1u), vec4(1.0), _GLF_struct_17(ivec3(1))), _GLF_struct_23(_GLF_struct_19(uvec2(1u), vec2(1.0), mat2x3(1.0), ivec4(1), vec3(1.0), mat2x4(1.0), mat4x3(1.0)), ivec2(1), _GLF_struct_20(1u, mat4(1.0), bvec4(true)), _GLF_struct_21(mat2(1.0), 1u, uvec4(1u), bvec4(true), ivec2(1), bvec3(true), uvec4(1u)), mat3x4(1.0), _GLF_struct_22(mat4x3(1.0), bvec4(true), ivec3(1))), _GLF_struct_26(_GLF_struct_24(ivec2(1), 1u, mat3x2(1.0), bvec3(true), ivec4(1)), mat2x3(1.0), bvec4(true), _GLF_struct_25(vec2(1.0), mat2x3(1.0), mat2x4(1.0), mat4x2(1.0), bvec2(true), mat3x2(1.0), ivec4(1)), vec4(1.0)), uvec4(1u));
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_27._f0._f0.workgroup_id;
 uint virtual_gid = workgroup_base + _GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_6._f2._f0.subgroup_size + subgroup_local_id;
 _GLF_struct_49 _GLF_struct_replacement_49 = _GLF_struct_49(ivec3(1), _GLF_struct_39(_GLF_struct_33(vec2(1.0), mat2(1.0), mat3(1.0)), _GLF_struct_34(mat4x3(1.0), mat2x4(1.0)), mat3x2(1.0), _GLF_struct_35(ivec2(1), bvec4(true), bvec3(true), mat2x3(1.0), uvec4(1u)), _GLF_struct_36(bvec3(true), ivec3(1), 1u, mat3(1.0), mat2x4(1.0), mat3x4(1.0), mat3x4(1.0)), _GLF_struct_37(mat4x3(1.0), uvec4(1u), mat3(1.0), mat4x3(1.0)), _GLF_struct_38(ivec4(1), bvec4(true), mat2x3(1.0), 1.0)), _GLF_struct_43(mat3x4(1.0), _GLF_struct_40(true, uvec4(1u), mat3(1.0), ivec2(1), 1.0, bvec3(true), uvec4(1u)), _GLF_struct_41(mat3x4(1.0)), mat4(1.0), mat4(1.0), _GLF_struct_42(ivec2(1))), workgroup_base + _GLF_struct_replacement_12.subgroup_id * _GLF_struct_replacement_6._f2._f0.subgroup_size + ((subgroup_local_id + 1) % _GLF_struct_replacement_6._f2._f0.subgroup_size), _GLF_struct_45(_GLF_struct_44(1u, mat3x4(1.0), mat3x2(1.0), mat2(1.0), uvec2(1u)), mat3x4(1.0)), _GLF_struct_48(vec2(1.0), 1, _GLF_struct_46(bvec4(true), mat2x4(1.0), vec4(1.0), uvec2(1u), uvec4(1u), true), vec3(1.0), bvec2(true), _GLF_struct_47(ivec3(1), ivec2(1), mat4x3(1.0), ivec2(1), mat2x3(1.0), mat4(1.0), bvec4(true))));
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 do
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) & 1)); _injected_loop_counter ++)
    {
     if(subgroup_local_id + 1 < _GLF_struct_replacement_6._f2._f0.subgroup_size)
      {
       _GLF_struct_32 _GLF_struct_replacement_32 = _GLF_struct_32(mat4x2(1.0), _GLF_struct_31(mat4(1.0), _GLF_struct_28(ivec2(1), bvec4(true), bvec4(true), mat3x4(1.0), bvec4(true), 1), ivec2(1), 1u, _GLF_struct_29(1.0, bvec4(true), true, uvec2(1u), bvec2(true), bvec3(true)), _GLF_struct_30(uvec2(1u), mat2x4(1.0), uvec4(1u), bvec3(true), 1, mat3x4(1.0))), 0, mat2(1.0));
       do
        {
         atomicStore(buf[_GLF_struct_replacement_49.next_virtual_gid], uint(2), 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     else
      {
       atomicStore(buf[_GLF_struct_replacement_49.next_virtual_gid], uint(2), 4, 64, 4);
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
