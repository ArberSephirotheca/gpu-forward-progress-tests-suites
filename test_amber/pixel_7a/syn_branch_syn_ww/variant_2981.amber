#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   do
    {
     for(int _injected_loop_counter = (1 ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   return;
  }
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))))
  {
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, clamp(_GLF_IDENTITY(2, max(2, 2)), 2, 2))))) & _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | (1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     return;
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           return;
          }
        }
       if(_GLF_DEAD(false))
        break;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              continue;
             return;
            }
           return;
          }
        }
       else
        {
        }
      }
     else
      {
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
    {
    }
   else
    {
     return;
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = (-94529 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     return;
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) * 1u);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    return;
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), (int(3)) / 1))))))); _injected_loop_counter --)
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec4(true, true, true, true)), bool(bool(bool(bvec4(true, true, true, true))))))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter ++)
      {
       return;
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, exp(vec2(0.0, 0.0)) * (injectionSwitch)).x < injectionSwitch.y))))
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, true), bvec3(bvec3(bvec3(false, true, true))))))))
      return;
    }
   else
    {
    }
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              continue;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))))
            return;
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bvec2(_GLF_WRAPPED_LOOP(false), false))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(58.48)), bool(false))) > _GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, 0.0, 1.0, determinant(mat2(1.0, 0.0, 1.0, 1.0)), 0.0, 0.0, 1.0, 1.0, sqrt(0.0), length(0.0), 1.0, _GLF_IDENTITY(sin(0.0), float(_GLF_IDENTITY(mat2x4(sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, 0.0, 1.0, 0.0), mat2x4(mat2x4(mat2x4(sin(0.0), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 1.0, 0.0, 0.0, 1.0, 0.0)))))), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))), 0.0))).y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > ((0 >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), (int(1)) ^ 0)))); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), clamp(int(1), _GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), int(_GLF_IDENTITY(int(int(1)), min(int(int(1)), int(int(1)))))))), int(1)))))); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          continue;
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
    }
   for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED(vec4(91.67, 8.6, 4.9, -9772.0567).y)), bool(false)))))));
           for(int _injected_loop_counter = (91678 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(false), (bool(false)) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(bool(false), (bool(false)) || false)), ((_GLF_IDENTITY(bool(false), (bool(false)) || false))) && true)) || false)))), ! (! (false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (false)), true && ((! (false))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, false)), ! (! (bool(bvec3(! (false), false, false)))))))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec3(! (false), false, false)), ! (! (bool(bvec3(! (false), false, false)))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true))))) && true)), (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (_GLF_IDENTITY(! (false), bool(bvec3(_GLF_IDENTITY(! (false), (! (false)) && true), false, true)))) || false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec2(! (! (false)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true))))) && true))) || false)))), false, true, false)))), _GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec3(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), false, false)))), false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (_GLF_IDENTITY(bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(_GLF_IDENTITY(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), false, false))))))))))))) || false), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY((false), ((false)) || false), false, true), bvec3(bvec3(bvec3(_GLF_IDENTITY((false), ((false)) || false), false, true)))))))), false)))) && true), false, false)))), false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), (bool(bvec3(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(_GLF_IDENTITY(bvec2(! (! (false)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec2(bvec2(bvec2(! (! (false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))))) || false), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true)), bool(bvec4(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), false, false))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), false, false))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), false)))) && true), false, false)))) || false), true, true, false)))), false, true, false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false))) || false)) && true))), (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                        return;
                       return;
                      }
                     return;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * 1))
                      {
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          {
                           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), (! (_GLF_WRAPPED_IF_FALSE(false))) || false))))
                            {
                             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              break;
                             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
                              return;
                            }
                           else
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               return;
                              }
                             else
                              {
                              }
                            }
                          }
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          continue;
                         if(_GLF_DEAD(false))
                          return;
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       if(_GLF_DEAD(false))
                        break;
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  return;
                 do
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))) && true)))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(true))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           if(_GLF_WRAPPED_IF_FALSE(false))
                            {
                            }
                           else
                            {
                             if(_GLF_DEAD(false))
                              return;
                            }
                          }
                         else
                          {
                          }
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(false))
                          return;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          return;
                        }
                       else
                        {
                        }
                       return;
                      }
                     return;
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 return;
                 do
                  {
                   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, false)), (bool(bvec3(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(_GLF_IDENTITY(min(injectionSwitch, injectionSwitch), min(min(injectionSwitch, injectionSwitch), min(injectionSwitch, injectionSwitch))), min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y, false, false))) || false))))))
                        return;
                      }
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   if(_GLF_DEAD(false))
                    return;
                  }
                 else
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, _GLF_IDENTITY(false, true && (false)), true)))))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
            }
           for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)))) && true)))) && true); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              break;
            }
           if(_GLF_DEAD(false))
            return;
           return;
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (true))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
      }
     else
      {
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
   return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, 0u | (_GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id))) / 1u)));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          break;
         return;
        }
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-6.1), _GLF_FUZZED(4911.9702)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))))))).x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             return;
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                return;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 return;
                }
               else
                {
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bool((injectionSwitch.x > injectionSwitch.y))), false || (bool(bool((injectionSwitch.x > injectionSwitch.y)))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               return;
              }
            }
           return;
          }
         return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), _GLF_IDENTITY((_GLF_IDENTITY(int(0), ~ (~ (int(0))))), max(_GLF_IDENTITY((_GLF_IDENTITY(int(0), ~ (~ (int(0))))), (true ? _GLF_IDENTITY((_GLF_IDENTITY(int(0), ~ (~ (int(0))))), ~ (~ ((_GLF_IDENTITY(int(0), ~ (~ (int(0)))))))) : _GLF_FUZZED(-6610))), (_GLF_IDENTITY(int(0), ~ (~ (int(0))))))) - 0)))); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(6), int(6)))); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
  return;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), clamp(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, _GLF_IDENTITY(int(int(_GLF_IDENTITY(3, 1 * (3)))), 1 * (int(int(_GLF_IDENTITY(3, 1 * (3))))))))), _GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), max(_GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) - 0))), _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(int(3), int(3))) | (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(ivec4(_GLF_IDENTITY(int(3), int(3)), 0, 1, 0)), 0 ^ (int(ivec4(_GLF_IDENTITY(int(3), int(3)), 0, 1, 0)))))))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat2x3(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), sqrt(1.0), 1.0, _GLF_IDENTITY(dot(vec4(_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, float(mat3x2(1.0, 0.0, 1.0, 0.0, tan(0.0), exp(0.0))))) / 1.0), 0.0, 1.0, cos(0.0)), vec4(0.0, 1.0, 0.0, 0.0)), dot(vec4(1.0, 0.0, 1.0, cos(0.0)), vec4(0.0, 1.0, 0.0, 0.0)))))), clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))), mix(vec2(_GLF_FUZZED(934.921), _GLF_IDENTITY((injectionSwitch)[1], ((injectionSwitch)[1]) + 0.0)), vec2((injectionSwitch)[_GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (_GLF_IDENTITY(0, (0) | 0))), _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) / 1)))], _GLF_FUZZED(5179.3847)), bvec2(true, false))), 0.0, abs(0.0), 1.0, 0.0), (_GLF_IDENTITY(false, bool(bvec4(false, true, true, _GLF_IDENTITY(false, (false) || false)))) ? _GLF_FUZZED(mat2x3(-6.6, -8419.5162, 9.5, 9.6, 6.9, 9.8)) : mat2x3(injectionSwitch, 0.0, abs(0.0), _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(1.7))), 1.0)), _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(1.0, 0.0)), dot(vec2(1.0, 0.0), vec2(1.0, 0.0))) * ((1.0))) - 0.0), 1.0)), 0.0))))))).y))))
      return;
    }
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) | (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         continue;
        }
       if(_GLF_DEAD(false))
        break;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          break;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            return;
          }
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      break;
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       return;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((1 ^ 0) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           return;
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, true && (true))) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, bool(bvec2(true, false)))) || false)))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), max(vec2(injectionSwitch[0], injectionSwitch[1]), _GLF_IDENTITY(vec2(injectionSwitch[0], injectionSwitch[1]), mix(vec2((vec2(injectionSwitch[0], injectionSwitch[1]))[0], (vec2(injectionSwitch[0], injectionSwitch[1]))[1]), vec2(_GLF_FUZZED(-444.669), _GLF_FUZZED(-2.6)), bvec2(false, false)))))).y), ((injectionSwitch.x > injectionSwitch.y)) && true))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     return;
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(3, min(3, _GLF_IDENTITY(3, (_GLF_IDENTITY(3, 0 + (3))) ^ 0)))), (_GLF_IDENTITY(int(3), _GLF_IDENTITY((int(3)) | (int(3)), ((int(3)) | (int(3))) | 0))) / (1 | 0)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec4(int(3), 1, 1, 0), (ivec4(int(3), 1, 1, 0)) | ivec4(0, 0, 0, 0))), (false ? _GLF_FUZZED(59980) : int(_GLF_IDENTITY(ivec4(int(3), 1, 1, 0), _GLF_IDENTITY((ivec4(int(3), 1, 1, _GLF_IDENTITY(0, min(0, 0)))), (_GLF_IDENTITY((ivec4(int(3), 1, 1, 0)), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(ivec4(-22075, -48432, 40957, -63690)) : (_GLF_IDENTITY(ivec4(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3))), 1, 1, 0), (ivec4(0, 0, 0, 0) >> _GLF_IDENTITY(ivec4(1), ivec4(1))) ^ (ivec4(_GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), ~ (~ (int(3))))) | (int(3))), 1, 1, 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(ivec4(-22075, -48432, 40957, -63690)) : (ivec4(int(3), 1, 1, 0)), max(_GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(ivec4(-22075, -48432, 40957, -63690)) : (ivec4(int(3), 1, 1, 0)), _GLF_IDENTITY(false, bool(bvec3(false, true, true))) ? _GLF_FUZZED(ivec4(-22075, -48432, 40957, -63690)) : (ivec4(int(3), 1, 1, 0))))) | ivec4(0, 0, 0, 0))))) | ((ivec4(int(3), 1, 1, 0)))) | ivec4(0, 0, 0, 0)))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      continue;
     return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        break;
       continue;
      }
     if(_GLF_DEAD(false))
      break;
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(_GLF_IDENTITY(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), bvec3(bvec4(bvec3((injectionSwitch.x > injectionSwitch.y), true, true), _GLF_IDENTITY(true, false || (true)))))))) && true))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         break;
        }
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, _GLF_IDENTITY(true, ! (! (true))), false))), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       return;
      }
     else
      {
      }
    }
  }
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))), min(_GLF_IDENTITY((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)))))), ((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))) / 1u), (subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, min(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) | (_GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size))))))))) | (_GLF_IDENTITY((subgroup_local_id + 1) % subgroup_size, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + 1), min((subgroup_local_id + 1), (subgroup_local_id + 1))), max((subgroup_local_id + _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, 0 ^ (1))))), (subgroup_local_id + _GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) | 0)))))) % subgroup_size) - 0u))));
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_DEAD(false))
      return;
     break;
    }
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, ! (! (false)))), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, ! (! (false))))), (! (! (_GLF_IDENTITY(false, ! (! (false)))))) || _GLF_IDENTITY(false, (false) && true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   for(int _injected_loop_counter = (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(_GLF_IDENTITY(5, ~ (~ (5))))) - 0)), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), min(0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (_GLF_IDENTITY(true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), max(true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), _GLF_IDENTITY(true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), (_GLF_IDENTITY(true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), clamp(true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter), true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter)))) - 0))))))), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))))), (false ? _GLF_FUZZED(-98657) : ~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), clamp(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), clamp(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(_GLF_IDENTITY(0, max(0, 0)), min(_GLF_IDENTITY(0, max(0, 0)), _GLF_IDENTITY(0, max(0, 0)))))), _GLF_IDENTITY(0, max(0, 0)))))) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0, (0) << 0) >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), min(0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(int(int(_GLF_IDENTITY(int(5), int(5)))), clamp(int(int(_GLF_IDENTITY(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), int(5)))), int(int(_GLF_IDENTITY(int(5), int(5))))))), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), (true ? 0 >> _GLF_IDENTITY(int(5), int(5)) : _GLF_FUZZED(_injected_loop_counter))))), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5))))))))))), min((~ _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), min(int(5), int(5)))) - 0)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(5), int(5))), ((0 >> _GLF_IDENTITY(int(5), int(5)))) - 0)))))), _GLF_IDENTITY(0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5))))))))) / 1)), (0 | (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), ~ (~ (_GLF_IDENTITY(int(5), _GLF_IDENTITY(int(int(int(5))), (int(int(int(5)))) | (int(int(int(5)))))))))) - 0)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5)))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0))) | (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), (_GLF_IDENTITY(int(5), max(int(5), int(5)))) << (0 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(int(5), (int(5)) - 0)))), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))), ~ (~ (0 >> _GLF_IDENTITY(int(5), int(5))))))))) / 1))) ^ 0))), (~ (_GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) - 0)), clamp(0 >> _GLF_IDENTITY(int(5), int(5)), 0 >> _GLF_IDENTITY(int(5), int(5)), _GLF_IDENTITY(0 >> _GLF_IDENTITY(int(5), int(5)), ~ (~ (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), max(int(5), int(5))), int(5))))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (_GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(5), 0 + (_GLF_IDENTITY(int(5), (int(5)) / 1))), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), clamp(int(_GLF_IDENTITY(5, (5) - 0)), int(5), _GLF_IDENTITY(int(5), min(int(5), _GLF_IDENTITY(int(5), clamp(int(5), int(5), int(5)))))))))), _GLF_IDENTITY(bool(bvec4(_injected_loop_counter != (_GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ (int(5))))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(5), int(5)), 0 ^ (_GLF_IDENTITY(int(5), int(5)))))), true, false, true)), ! (! (bool(bvec4(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), min((int(5)), (int(5))))) * 1)))) >> _GLF_IDENTITY(int(5), int(5)))), min((_GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), min((int(5)), (int(5))))) * 1)))) >> _GLF_IDENTITY(int(5), int(5)))), (_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), min((int(5)), (int(5))))) * 1)))) >> _GLF_IDENTITY(int(5), int(5))), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(1, clamp(1, 1, 1)) & ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), 0 ^ _GLF_IDENTITY((int(5)), (_GLF_IDENTITY((int(5)), min((int(5)), (int(5))))) * 1)))) >> _GLF_IDENTITY(int(5), int(5))) : _GLF_FUZZED(_injected_loop_counter)))))), true, false, true))))))); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))), true, false, false)))))
      {
       if(_GLF_DEAD(false))
        return;
       break;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  return;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 do
  {
   if(subgroup_local_id + 1 < subgroup_size)
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(false))
          continue;
         return;
        }
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, true, true)))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     int i = 0;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           return;
          }
         else
          {
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        continue;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bool(true)))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                   if(_GLF_DEAD(false))
                    return;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), (false) || false)));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           break;
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        break;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        continue;
       return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((_GLF_IDENTITY(0, _GLF_IDENTITY((0) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6))))), ((0) * ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), (int(6)) | (int(6)))))) >> 0)) << _GLF_IDENTITY(int(2), int(2))), ((0 << _GLF_IDENTITY(int(2), int(2)))) >> 0)); _injected_loop_counter --)
        {
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       do
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           continue;
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec2(_GLF_IDENTITY((false) && true, true && ((false) && true)), false))))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), int(ivec4(int(_GLF_ONE(1.0, injectionSwitch.y)), 0, 0, 1))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ (0 ^ 0))); _injected_loop_counter --)
              {
               return;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2((false) && true, true), bvec2(bvec3(bvec2((false) && true, true), true)))), false || (bool(_GLF_IDENTITY(bvec2((false) && true, true), bvec2(bvec3(bvec2((false) && true, true), true))))))))) && true)))))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           return;
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), _GLF_IDENTITY(bvec2(bvec2(bvec2(false, _GLF_IDENTITY(true, (true) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bvec2(bvec3(bvec2(bvec2(bvec2(false, true))), true))))))))
            {
             if(_GLF_DEAD(false))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
        }
      }
     do
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.7)), bvec2(true, false))), mat2(1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-4.9), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(8.7)), bvec2(true, false))))))).x < injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 for(int _injected_loop_counter = (0 | (0 << _GLF_IDENTITY(int(7), int(7)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((_GLF_IDENTITY((_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0))) << _GLF_IDENTITY(int(2), int(2)), min((_GLF_IDENTITY(1 ^ 0, _GLF_IDENTITY(0 | (1 ^ 0), (_GLF_IDENTITY(true, true && (true)) ? 0 | (1 ^ 0) : _GLF_FUZZED(_injected_loop_counter))))) << _GLF_IDENTITY(int(2), int(2)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0)), 0 + (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0)), (_GLF_IDENTITY(_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0)), (_GLF_IDENTITY(1 ^ 0, 0 | (1 ^ 0))) / 1)) / 1)))) << _GLF_IDENTITY(int(2), int(2))))), _GLF_IDENTITY(max(((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))), ((1 ^ 0) << _GLF_IDENTITY(int(2), int(2)))), max(max(((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))), ((1 ^ 0) << _GLF_IDENTITY(int(2), int(2)))), max(((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))), ((1 ^ 0) << _GLF_IDENTITY(int(2), int(2))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    break;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        return;
                       continue;
                      }
                     return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
              }
             if(_GLF_DEAD(false))
              break;
            }
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               return;
              }
             else
              {
              }
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)))
              {
               if(_GLF_DEAD(false))
                continue;
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) >> 0) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(false))
                break;
               return;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 continue;
                }
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    break;
                   return;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(4), int(4))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, (4) >> 0)) + 0)), int(4))), 0 ^ ((1 << _GLF_IDENTITY(int(4), int(4)))))) | 0) >> _GLF_IDENTITY(int(4), int(4)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 return;
                }
               else
                {
                }
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).y, (injectionSwitch.x < injectionSwitch.y) && true)))))
        {
         atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
        }
       else
        {
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          break;
        }
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((_GLF_IDENTITY(1, (1) << 0) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), clamp(_GLF_IDENTITY(int(6), (int(6)) ^ 0), int(6), int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          return;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
              }
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             do
              {
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))
                  {
                   if(_GLF_DEAD(false))
                    return;
                   return;
                  }
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)))));
            }
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), (_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false))) && true))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], float(mat4(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(378.862), _GLF_FUZZED(-7.2)), bvec2(false, false)))[0], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0, 0.0))), (injectionSwitch)[0])), _GLF_FUZZED(float(_GLF_IDENTITY(-37380, clamp(_GLF_IDENTITY(-37380, clamp(-37380, -37380, _GLF_IDENTITY(-37380, clamp(-37380, -37380, -37380)))), -37380, -37380))))), bvec2(true, false))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(8.9), (injectionSwitch)[1]), vec2(_GLF_IDENTITY((injectionSwitch)[0], clamp((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[0], float(mat4(_GLF_IDENTITY((injectionSwitch), mix(vec2(((injectionSwitch))[0], ((injectionSwitch))[1]), vec2(_GLF_FUZZED(378.862), _GLF_FUZZED(-7.2)), bvec2(false, false)))[0], 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))), 0.0, 1.0, 0.0))), (injectionSwitch)[0])), _GLF_FUZZED(float(_GLF_IDENTITY(-37380, clamp(_GLF_IDENTITY(-37380, clamp(-37380, -37380, _GLF_IDENTITY(-37380, clamp(-37380, -37380, -37380)))), -37380, -37380))))), bvec2(true, false)))))) * mat2(1.0)).y))))
                return;
               for(int _injected_loop_counter = (0 & -1973); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, min(1, 1))); _injected_loop_counter ++)
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   return;
                  }
                }
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                return;
              }
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) >> 0)))); _injected_loop_counter ++)
              {
               return;
              }
            }
           if(_GLF_DEAD(false))
            return;
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
            }
           else
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               do
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   return;
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                    {
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      continue;
                     continue;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                        }
                      }
                    }
                   return;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))), true && (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true))))))));
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              continue;
            }
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              return;
             if(_GLF_DEAD(false))
              break;
            }
          }
        }
       else
        {
        }
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(5.3), mix(float(_GLF_FUZZED(-97.08)), float(_GLF_FUZZED(5.3)), bool(true)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), clamp(_GLF_IDENTITY(mix(float(_GLF_IDENTITY(_GLF_FUZZED(5.3), mix(float(_GLF_FUZZED(5.3)), float(_GLF_FUZZED(-1.8)), bool(false)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), (false ? _GLF_FUZZED(39.74) : _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), max(_GLF_IDENTITY(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), (_GLF_IDENTITY(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))), 1.0 * (mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false))))))) / 1.0), mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false))))))) / 1.0), float(mat2x4(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(false || (_GLF_IDENTITY(bool(true), (bool(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (_GLF_IDENTITY(! (true), false || (! (true))))))))) || false)), ! (! (false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), (bool(true)) || false), (_GLF_IDENTITY(bool(true), (bool(true)) || false)) && true)))))))))))), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(_GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(_GLF_IDENTITY(bvec2(bvec2(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bvec2(bvec4(bvec2(bvec2(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec2(bool(bvec4(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))), true && (bool(bool(bool(_GLF_IDENTITY(true, bool(bvec4(true, false, true, false)))))))), false, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), true, false)))))))), (bool(true)) || false)))), (true ? mix(float(_GLF_FUZZED(5.3)), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(true), (bool(true)) || false)))) : _GLF_FUZZED(-8.2))), mix(_GLF_IDENTITY(float(_GLF_FUZZED(5.3)), min(float(_GLF_FUZZED(5.3)), float(_GLF_FUZZED(5.3)))), float(injectionSwitch.y), _GLF_IDENTITY(bool(true), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true))))))), (false || (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))))) && true))), (bool(true)) || false)))))))))))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    {
     for(int _injected_loop_counter = (0 & -63698); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       return;
       if(_GLF_DEAD(false))
        break;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      continue;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, true && (false))))
      {
      }
     else
      {
       return;
       if(_GLF_DEAD(false))
        continue;
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
