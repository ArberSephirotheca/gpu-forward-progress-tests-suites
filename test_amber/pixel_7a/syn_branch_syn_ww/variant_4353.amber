#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), max(injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat2(injectionSwitch, 1.0, 0.0))).x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), false || (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))), max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)), injectionSwitch)).y)))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (0 >> _GLF_IDENTITY(int(1), int(1))) + (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), clamp(int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)), int(_GLF_ONE(1.0, injectionSwitch.y)))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, 4)), (4) | 0)), int(4))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))) && true), false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))) && true)))), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) && _GLF_IDENTITY(_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))) && true), false || (_GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), bool(bvec2(_GLF_IDENTITY(true, false || (true)), false)))) && true))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   do
    {
     do
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) && true))), (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (_GLF_IDENTITY(false, (false) && true)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = ((89187 & 0) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
         for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), max(int(2), int(2))))) << _GLF_IDENTITY(int(6), _GLF_IDENTITY(_GLF_IDENTITY(int(6), (int(6)) + 0), 1 * (int(6))))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))) || false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(241.550, 1.4)) : injectionSwitch)).y))));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
    }
   barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
      }
    }
   else
    {
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   barrier();
  }
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) | (gl_NumWorkGroups.x))));
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch))) - vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     for(int _injected_loop_counter = _GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) | (0)), 0, _GLF_IDENTITY(0, _GLF_IDENTITY(int(int(0)), min(int(int(0)), int(int(0))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), bool(bool(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), true && _GLF_IDENTITY((_injected_loop_counter < (0 | 1)), true && ((_injected_loop_counter < (0 | 1)))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), (_injected_loop_counter < (0 | 1)) && true), bool(bool(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), true && (_injected_loop_counter < (0 | _GLF_IDENTITY(1, (1) | (1)))))))), false, true)), (bool(bvec3(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), true && (_injected_loop_counter < (0 | 1))), bool(bool(_GLF_IDENTITY(_injected_loop_counter < (0 | 1), true && (_injected_loop_counter < (0 | 1))))))))), false, true))) || false))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), true && (_GLF_IDENTITY(! (true), false || (! (true))))))), ! (! (true))) && (false))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat4x2(injectionSwitch, 1.0, 1.0, tan(log(1.0)), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), round(length(normalize(vec3(1.0, 1.0, 1.0))))))).x > injectionSwitch.y))))))
                        barrier();
                      }
                     else
                      {
                       do
                        {
                         barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                    }
                  }
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)))))))))
                  barrier();
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = (_GLF_IDENTITY((0 | 0) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + 0)), min((0 | 0) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + 0)), (_GLF_IDENTITY(0 | 0, ~ (_GLF_IDENTITY(~ (0 | 0), max(~ (0 | 0), ~ (0 | 0)))))) >> _GLF_IDENTITY(int(8), _GLF_IDENTITY(int(8), (int(8)) + 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_injected_loop_counter)), _GLF_IDENTITY((_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), (_GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) - 0)) | ((_injected_loop_counter))), (_GLF_IDENTITY((_injected_loop_counter) | (_injected_loop_counter), max((_injected_loop_counter) | _GLF_IDENTITY((_injected_loop_counter), 1 * ((_injected_loop_counter))), (_GLF_IDENTITY(_injected_loop_counter, (_GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _injected_loop_counter))) << 0)) | (_injected_loop_counter)))) | int(_GLF_ZERO(0.0, injectionSwitch.x)))) != (1 ^ 0)); _injected_loop_counter ++)
                  {
                   barrier();
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch)[1], (true ? (injectionSwitch)[1] : _GLF_FUZZED(-3.6)))), vec2(_GLF_FUZZED(vec2(-8066.6390, -4316.7224).s), _GLF_FUZZED(-670.701)), bvec2(false, false))).x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, false), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true), false, false), false)))))));
          }
        }
      }
     else
      {
      }
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (false ? _GLF_FUZZED(num_workgroup) : workgroup_base + subgroup_id * subgroup_size)), (workgroup_base + subgroup_id * subgroup_size) + 0u) + _GLF_IDENTITY(subgroup_local_id, 1u * (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (true ? ~ (subgroup_local_id) : _GLF_FUZZED(subgroup_id)))))), max(~ (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (subgroup_local_id), (false ? _GLF_FUZZED(subgroup_local_id) : ~ (subgroup_local_id))), (true ? ~ (subgroup_local_id) : _GLF_FUZZED(subgroup_id)))))), ~ (_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(~ (subgroup_local_id), (true ? _GLF_IDENTITY(~ (subgroup_local_id), (~ (subgroup_local_id)) ^ 0u) : _GLF_FUZZED(subgroup_id))))))))))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! _GLF_IDENTITY((false), bool(bvec2((false), true)))), bool(bvec4(_GLF_IDENTITY((! (false)), ! _GLF_IDENTITY((! _GLF_IDENTITY(((! (false))), bool(bvec2(((! (false))), false)))), ((! ((! (false))))) && true)), true, false, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) && true)))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * cos(vec2(0.0, 0.0))).y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))), bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > injectionSwitch.y, false)))))))))))))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(_GLF_IDENTITY(5482.8136, max(5482.8136, 5482.8136))), _GLF_FUZZED(-658.606)), bvec2(false, false))).x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), (! (! ((injectionSwitch.x < injectionSwitch.y)))) && true))), (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (! ((injectionSwitch.x < injectionSwitch.y))), (! (! ((injectionSwitch.x < injectionSwitch.y)))) && true)))) && true)))), true), bvec3(bvec3(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (! ((injectionSwitch.x < injectionSwitch.y))))), true))))))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))));
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     do
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (true))))
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = (0 | int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(4), int(4))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_injected_loop_counter != (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_GLF_IDENTITY(_GLF_IDENTITY(int(4), int(4)), (_GLF_IDENTITY(int(4), int(4))) >> 0))))))); _injected_loop_counter --)
            {
             do
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               else
                {
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2(injectionSwitch, tan(0.0), 1.0)), (vec2(mat2(injectionSwitch, tan(0.0), 1.0))) * mat2(1.0))), injectionSwitch, injectionSwitch)).x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
                  barrier();
                }
              }
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, true && (false))))), true && (bool(bool(! (_GLF_IDENTITY(false, true && (false))))))))), ! (! ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bool(! (_GLF_IDENTITY(false, true && (false))))), true && (bool(bool(! (_GLF_IDENTITY(false, true && (false))))))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(233.077), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4888.0607)), bvec2(true, false))).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(233.077), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4888.0607)), bvec2(true, false))).x, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(233.077), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4888.0607)), bvec2(true, false))).x) - 0.0), _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(233.077), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(4888.0607)), bvec2(true, false))).x)) > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-9757.7411))), (injectionSwitch.x) + 0.0) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), log(1.0))), min(float(vec2(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, log(1.0), 0.0, 0.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, log(1.0), 0.0, 0.0, 0.0)) * mat2(1.0))), (false ? _GLF_FUZZED(9.9) : float(_GLF_IDENTITY(mat2x3(injectionSwitch.y, 0.0, log(1.0), 0.0, 0.0, 0.0), (mat2x3(injectionSwitch.y, 0.0, log(1.0), 0.0, 0.0, 0.0)) * mat2(1.0)))))))), injectionSwitch.y)), log(1.0))), _GLF_IDENTITY(float(vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), log(1.0))), float(float(float(vec2(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), log(1.0))))))))))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(bvec2(false, true)))))))))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (bool(bool(! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) && true)), bool(bvec4(_GLF_IDENTITY(! (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, float(mat2x3(injectionSwitch.y, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0)))))), true && (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false, false, false)))))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           do
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             else
              {
              }
             for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
          }
         else
          {
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), true && (bool(bool(false)))))))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         do
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) || false))), (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (workgroup_base)) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u)))))) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size) << (1u ^ uint(_GLF_ONE(1.0, injectionSwitch.y)))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | _GLF_IDENTITY((1), ((1)) >> 0))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), ~ (_GLF_IDENTITY(~ (~ (1)), int(ivec2(~ (~ (1)), 1))))))), _GLF_IDENTITY((1), min((1), (1))) ^ 0) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)))))))) % subgroup_size), max((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (0) | (0))) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)))))))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), min(_GLF_IDENTITY(1, (1) ^ 0), _GLF_IDENTITY(1, (1) ^ 0))) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)))))))) % subgroup_size))), (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (workgroup_base), 0u ^ ((0u << _GLF_IDENTITY(uint(3u), uint(3u))) | (workgroup_base)))) + subgroup_id * _GLF_IDENTITY(subgroup_size, (subgroup_size) >> 0u), (_GLF_IDENTITY(workgroup_base, (0u << _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(_GLF_IDENTITY(3u, clamp(_GLF_IDENTITY(3u, ~ (~ (_GLF_IDENTITY(3u, (3u) | (3u))))), _GLF_IDENTITY(3u, min(3u, 3u)), 3u)))))))) | (workgroup_base)) + _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))) * subgroup_size) << (1u ^ _GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(uint(_GLF_ONE(1.0, injectionSwitch.y)), (uint(_GLF_ONE(1.0, injectionSwitch.y))) << 0u)) | (uint(_GLF_ONE(1.0, injectionSwitch.y)))))) + _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * _GLF_IDENTITY((1), ~ (_GLF_IDENTITY(~ ((1)), (~ ((1))) | (~ ((1))))))), 1, 1))) | (1))), min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, _GLF_IDENTITY((1), (_GLF_IDENTITY((1), min((1), _GLF_IDENTITY((1), (true ? (1) : _GLF_FUZZED(67830)))))) >> 0) ^ 0)))) * (_GLF_IDENTITY(1, (1) | (1)))), _GLF_IDENTITY(1, int(ivec2(1, ((1 << _GLF_IDENTITY(int(4), int(4))) >> _GLF_IDENTITY(int(4), int(4)))))), 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1), (_GLF_IDENTITY((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1), ((_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)) + 0)) ^ 0)))))))) % subgroup_size), max((_GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * _GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)))), 0 ^ ((1)))), 1, 1))) | (1))), (true ? (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, (1) >> 0))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * _GLF_IDENTITY((_GLF_IDENTITY(1, int(ivec4(1, 1, ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))), 1)))), 0 ^ ((1)))), 1, 1))) | (1))) : _GLF_FUZZED(workgroup_id))), min((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1)), (subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1))) | (_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1)), max(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1)), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - 0), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1))))))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)), max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))))), _GLF_IDENTITY(~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))))), ~ (_GLF_IDENTITY(~ (~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)))))), min(~ (~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)))))), ~ (~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))))))))))))) % subgroup_size), (_GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) >> 0), max(_GLF_IDENTITY(1, (1) >> 0), _GLF_IDENTITY(1, (1) >> 0))))), (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), _GLF_IDENTITY(min((_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id))) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), (_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1))) - 0), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), _GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)))), 1, 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) - 0), (1) ^ 0) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))))))), 0u + (_GLF_IDENTITY(min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) * (1)), 1, 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), ~ (~ ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1), (clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1)) | (clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))))) | (1))))))), (min((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), ~ (~ (_GLF_IDENTITY(1, (1) ^ _GLF_IDENTITY(0, (0) ^ 0))))) * (1)), 1, 1))) | (1))), _GLF_IDENTITY((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))), ~ (~ ((_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)), uint(uvec3(_GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1)), (subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY(1, (1) ^ 0) * (1)), 1, 1))) | (1))) ^ 0u), 0u, ((1u << _GLF_IDENTITY(uint(7u), uint(7u))) >> _GLF_IDENTITY(uint(7u), uint(7u)))))))))))) << 0u)))) % _GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))))) - 0u);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(mat3x4(injectionSwitch, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1]))))[_GLF_IDENTITY(1, (1) / 1)])).y))), _GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true)) && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, _GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), false)))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))), max(_GLF_IDENTITY(min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))), mix(vec2(_GLF_FUZZED(3533.8156), _GLF_FUZZED(575.100)), vec2((min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch))))[0], (min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, vec2(vec3(_GLF_IDENTITY(false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch, mix(vec2(_GLF_FUZZED(-5862.6814), _GLF_FUZZED(9994.3491)), vec2((false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[0], (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)[1]), bvec2(true, true))), 1.0)))))))[1]), bvec2(true, true))), min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)))))).x > injectionSwitch.y))), _GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), false))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), (bool(bvec4(false, true, true, false))) && true)), true, true), false)))), ! (! (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, true, false)), (bool(bvec4(false, true, true, false))) && true)), true, true), false)))))))) && true)) || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec2(true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false)))), false, false, false))))), false, true))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(max(injectionSwitch.y, injectionSwitch.y), clamp(max(injectionSwitch.y, injectionSwitch.y), max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - sin(0.0)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y, injectionSwitch.y)), injectionSwitch.y), max(injectionSwitch.y, injectionSwitch.y)))))))))))))
  return;
 for(int _injected_loop_counter = (1 | 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       barrier();
      }
    }
   atomicStore(buf[virtual_gid], uint(1), 4, _GLF_IDENTITY(64, max(64, 64)), 4);
  }
 do
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(subgroup_local_id + _GLF_IDENTITY(1, _GLF_IDENTITY((1), clamp(_GLF_IDENTITY((1), 1 * _GLF_IDENTITY(((1)), (_GLF_IDENTITY(((1)), (true ? ((1)) : _GLF_FUZZED(-91823)))) | (((1))))), (1), _GLF_IDENTITY(_GLF_IDENTITY((1), ((1)) | ((1))), ~ (~ (_GLF_IDENTITY((1), ((1)) | ((1)))))))) >> 0) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (0) | 0))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (true ? _GLF_IDENTITY(int(7), int(7)) : _GLF_FUZZED((_injected_loop_counter << -82591)))), (_GLF_IDENTITY(int(7), int(7))) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), clamp(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) << 0))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), clamp(0 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), max(0 << _GLF_IDENTITY(int(7), int(7)), 0 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) | (_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), (0 << _GLF_IDENTITY(int(7), int(7))) - 0))))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & _GLF_IDENTITY(1, (1) / 1))), ivec4(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (_GLF_IDENTITY(false ? _GLF_FUZZED(15593) : _GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 1))), (false ? _GLF_FUZZED(15593) : _GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 1)))) | (false ? _GLF_FUZZED(15593) : _GLF_IDENTITY(int(7), int(ivec4(int(7), 0, 0, 1)))))))) | (_GLF_IDENTITY(int(7), _GLF_IDENTITY((int(7)) | 0, min(_GLF_IDENTITY((int(7)) | 0, int(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY((int(7)) | 0, ((int(7)) | 0) / 1))), _GLF_IDENTITY((int(7)) | 0, min((int(7)) | 0, (int(7)) | 0))))))), int(7)))) | _GLF_IDENTITY(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), max(0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, max(7, 7))), int(7)), 0 << _GLF_IDENTITY(int(7), int(7)))), (1 | 1))), min(int(ivec2(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), max(0 << _GLF_IDENTITY(int(7), int(7)), 0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (true ? _GLF_IDENTITY(int(7), 1 * (int(7))) : _GLF_FUZZED(min(-55976, -97258))))))), (1 | 1))), int(ivec2(_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(0, (0) >> 0) << _GLF_IDENTITY(int(7), int(7)), 0 << _GLF_IDENTITY(int(7), int(7)))), (1 | 1)))))))), int(_GLF_ZERO(0.0, injectionSwitch.x)) | (((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(7, (0 << _GLF_IDENTITY(int(4), int(4))) ^ (7))), int(7)), (_GLF_IDENTITY(int(7), int(7))) >> 0))))), _GLF_IDENTITY(1, max(1, 1)), 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), min(((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec2(0, 0), (ivec2(0, 0)) - ivec2(0, 0)))) << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 + (int(7)))))), int(int(((0 << _GLF_IDENTITY(int(7), int(7))))))))), 1, 1, (1 & 1)))), ivec4(1, 1, 1, 1) * (ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1))))))), (_GLF_IDENTITY(_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (int(7)) + 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7))) / int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), min(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))))), _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(0, int(_GLF_IDENTITY(ivec4(0, 0, 0, 1), min(ivec4(0, 0, 0, 1), ivec4(0, 0, 0, 1))))) << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (_GLF_IDENTITY(~ (int(7)), 0 | (~ (int(7)))))), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(_GLF_IDENTITY(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(int(7), int(7)))))), (0 >> _GLF_IDENTITY(int(2), int(2))) | (((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), 0 | (_GLF_IDENTITY(int(7), int(7)))))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), clamp(((0 << _GLF_IDENTITY(int(7), int(7)))) | (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), 0 ^ ((0 << _GLF_IDENTITY(int(7), int(7)))))), ((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 0 | (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7))))) / 1))))), 1, 1, (1 & 1)), _GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), (_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(7), int(7)))), 1, _GLF_IDENTITY(1, int(ivec2(1, 1))), (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((_GLF_IDENTITY(0, max(0, 0)) << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), min(_GLF_IDENTITY(int(7), clamp(int(7), int(7), int(7))), int(7))), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)))), clamp(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) >> 0) & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)))), _GLF_IDENTITY(ivec4(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), int(ivec2(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1))), _GLF_IDENTITY(1, (1) - (-34361 & (0 << _GLF_IDENTITY(int(4), int(4))))), _GLF_IDENTITY(1, (_GLF_IDENTITY(1, max(1, 1))) - (0 >> _GLF_IDENTITY(int(7), int(7)))), (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), ~ (~ (_GLF_IDENTITY(int(7), (int(7)) - 0)))), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) | (0 & 44771)) & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)))), _GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)))))), _GLF_IDENTITY(ivec4((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), 0 | (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), 0 | ((0 << _GLF_IDENTITY(int(7), int(7)))))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), min(int(7), int(7)))))), 1, 1, (1 & 1)))), _GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, min(_GLF_IDENTITY(7, (_GLF_IDENTITY(7, (7) / 1)) | (7)), 7))), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), clamp(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1)), (ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1))) >> ivec4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) | (0 << _GLF_IDENTITY(int(0), int(0)))) & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (1 & 1))))))) | _GLF_IDENTITY((_GLF_IDENTITY(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), clamp(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1))))), clamp((_GLF_IDENTITY(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), clamp(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1))))), _GLF_IDENTITY((_GLF_IDENTITY(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), clamp(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1))))), ivec4(0, 0, 0, 0) | ((_GLF_IDENTITY(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), clamp(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1))))))), (_GLF_IDENTITY(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), clamp(ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)), ivec4(0, 0, 0, 0) << _GLF_IDENTITY(ivec4(1), ivec4(1)))))))))), ivec4(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), 1, 1, 1) * (ivec4(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), ~ (_GLF_IDENTITY(~ ((0 << _GLF_IDENTITY(int(7), int(7)))), clamp(~ ((0 << _GLF_IDENTITY(int(7), int(7)))), ~ ((0 << _GLF_IDENTITY(int(7), int(7)))), ~ ((0 << _GLF_IDENTITY(int(7), int(7)))))))) / 1))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, _GLF_IDENTITY((1 & 1), ((1 & 1)) << 0))))))), _GLF_IDENTITY(1 * (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), 0 | (int(7)))), (_GLF_IDENTITY(int(7), int(7))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), injectionSwitch.y))), _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(81044) : _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), max((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))))))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), min(_GLF_IDENTITY(((_GLF_IDENTITY(0, 0 ^ (0)) << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7))))) - 0), ((0 << _GLF_IDENTITY(int(7), int(7)))))), 1, 1, (1 & 1)), clamp(ivec4(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), min(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), (_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), int(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), 0, 1, 0)))) | (((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))))), _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), 0 + (((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))))))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ (int(_GLF_IDENTITY(7, ~ (~ (7)))))), int(7)))), 1, 1, (1 & 1)), ivec4(_GLF_IDENTITY(((_GLF_IDENTITY(0 << _GLF_IDENTITY(int(7), int(7)), min(0 << _GLF_IDENTITY(int(7), int(7)), 0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7))))) >> 0), 1, 1, (1 & 1)))), _GLF_IDENTITY(ivec4(1, 1, 1, 1) * (ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) >> 0) & 1))), (false ? _GLF_FUZZED(ivec4(98188, -62373, 64300, 20000)) : ivec4(1, 1, 1, 1) * (ivec4(((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) + 0), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) >> 0) & 1)))))))))), (1 * (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), injectionSwitch.y))), _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, (7) - 0)), int(7))), (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), (_GLF_IDENTITY(int(7), (int(7)) | (int(7)))) / 1))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | (_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), ((0 << _GLF_IDENTITY(int(7), int(7)))) - 0)), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), min(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7))))) - 0), ((0 << _GLF_IDENTITY(int(7), int(7)))))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), clamp(~ (1), ~ (1), ~ (1))))) ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ (int(7))), int(7)))), 1, 1, _GLF_IDENTITY((1 & 1), (false ? _GLF_FUZZED(19433) : _GLF_IDENTITY((1 & 1), ((1 & 1)) - 0)))), ivec4(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (int(7)) | (int(7))), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, 0 | (0)), 0))) | (_GLF_IDENTITY(0, (0) << 0)))), 1, 1, (1 & 1)))), ivec4(1, 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) | (1)), 1) * (ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) >> 0) & 1), ((_GLF_IDENTITY(1, (1) >> 0) & 1)) - 0))))))))) | (1 * (_GLF_IDENTITY((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), (_GLF_IDENTITY(int(7), int(7))) / int(_GLF_ONE(_GLF_IDENTITY(1.0, float(vec3(1.0, 0.0, 0.0))), injectionSwitch.y))), _GLF_IDENTITY(int(7), int(7))))), _GLF_IDENTITY((_GLF_IDENTITY((0 << _GLF_IDENTITY(int(7), int(7))), clamp((0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7))), (0 << _GLF_IDENTITY(int(7), int(7)))))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), int(_GLF_IDENTITY(_GLF_IDENTITY(ivec4(((_GLF_IDENTITY(0, (0) - 0) << _GLF_IDENTITY(int(7), int(7)))) | _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), min(_GLF_IDENTITY(((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7))))) - 0), ((0 << _GLF_IDENTITY(int(7), int(7)))))), 1, 1, (1 & 1)), clamp(ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(_GLF_IDENTITY(7, ~ (~ (7)))), int(7)))), 1, 1, (1 & 1)), ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), (1 ^ ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(int(1), int(1)))) ^ (int(7))), int(7)))), 1, 1, (1 & 1)), ivec4(_GLF_IDENTITY(((_GLF_IDENTITY(0, (0) | (0 >> _GLF_IDENTITY(int(7), int(7)))) << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), (((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7))))) >> 0), 1, 1, (1 & 1)))), ivec4(1, 1, 1, 1) * (ivec4(((0 << _GLF_IDENTITY(int(7), int(7)))) | ((0 << _GLF_IDENTITY(int(7), int(7)))), 1, 1, (_GLF_IDENTITY(1, (1) >> 0) & 1)))))))))))) << 0)); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, false, false))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true))))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   int i = 0;
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(_GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), mix(vec2(_GLF_FUZZED(43.77), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(_GLF_IDENTITY(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), (vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9)))) * vec2(1.0, 1.0)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], round(length(_GLF_IDENTITY(normalize(vec2(1.0, 1.0)), clamp(normalize(vec2(1.0, 1.0)), _GLF_IDENTITY(normalize(vec2(1.0, 1.0)), (true ? _GLF_IDENTITY(normalize(vec2(1.0, 1.0)), vec2(0.0, 0.0) + (normalize(vec2(1.0, 1.0)))) : _GLF_FUZZED(vec2(-960.545, 2.3)))), normalize(vec2(1.0, 1.0)))))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(true, false || (true)))), ! (! (bool(bool(_GLF_IDENTITY(true, false || (true)))))))), true))), injectionSwitch)))[0], _GLF_FUZZED(vec2(-5866.9620, 50.18).s)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[1]), float(_GLF_FUZZED(94.41)), bool(false)))), (_GLF_IDENTITY(true ? vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[1]), bvec2(true, true))), injectionSwitch)), mix(vec2(_GLF_FUZZED(43.77), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[0], _GLF_FUZZED(vec2(-5866.9620, 50.18).s)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[1]), float(_GLF_IDENTITY(_GLF_FUZZED(94.41), clamp(_GLF_FUZZED(94.41), _GLF_FUZZED(94.41), _GLF_FUZZED(94.41)))), bool(false)))) : _GLF_IDENTITY(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), (_GLF_IDENTITY(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), vec2(vec3(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), 1.0)))) - vec2(0.0, 0.0)), mat2(1.0) * (true ? vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], _GLF_IDENTITY((injectionSwitch), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * ((injectionSwitch)))[1]), bvec2(true, true))), injectionSwitch)), mix(vec2(_GLF_FUZZED(43.77), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], float(mat2x3((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[1], round(length(normalize(vec2(1.0, 1.0)))), 1.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 0.0)))), vec2((_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)))[0], _GLF_FUZZED(vec2(-5866.9620, 50.18).s)), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))[1]), float(_GLF_IDENTITY(_GLF_FUZZED(94.41), clamp(_GLF_FUZZED(94.41), _GLF_FUZZED(94.41), _GLF_FUZZED(94.41)))), bool(false)))) : _GLF_IDENTITY(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), (_GLF_IDENTITY(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), vec2(vec3(_GLF_FUZZED(mat4x2(955.103, -9884.8911, -9.4, 155.254, 555.516, -579.063, -8.5, 921.302)[2]), 1.0)))) - vec2(0.0, 0.0)))))), (_GLF_IDENTITY(vec2(injectionSwitch[0], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(0.0, 0.0) + (vec2((injectionSwitch)[0], (injectionSwitch)[1]))), bvec2(true, true))), injectionSwitch))) * mat2(1.0))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x < injectionSwitch.y), (bool(injectionSwitch.x < injectionSwitch.y)) && true))))) ? 1 : _GLF_FUZZED(-77307))), _GLF_IDENTITY(1, (1) ^ 0)))], (false ? _GLF_FUZZED(8.2) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[_GLF_IDENTITY(1, (1) + 0)]), bvec2(true, true))), injectionSwitch)), (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))) * mat2(1.0))[_GLF_IDENTITY(1, min(_GLF_IDENTITY(1, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y))))) ? 1 : _GLF_FUZZED(_GLF_IDENTITY(-77307, int(ivec3(_GLF_IDENTITY(-77307, (-77307) << 0), 1, 0)))))), _GLF_IDENTITY(1, (1) ^ 0)))]))), float(_GLF_FUZZED(94.41)), bool(false)))), (false ? _GLF_FUZZED(vec2(-6034.9810, 41.89)) : vec2(injectionSwitch[_GLF_IDENTITY(0, (0) / _GLF_IDENTITY(1, int(ivec3(1, 1, 1))))], _GLF_IDENTITY(injectionSwitch[1], mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-7847.1547), _GLF_FUZZED((+ 8.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), injectionSwitch))[_GLF_IDENTITY(1, _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(1, (1) ^ 0))), (~ (~ (_GLF_IDENTITY(1, (1) ^ 0)))) >> 0))]), float(_GLF_FUZZED(94.41)), bool(false))))))) - vec2(0.0, 0.0))).y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)), true && _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), (_GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) || false)) && _GLF_TRUE(_GLF_IDENTITY(true, false || (true)), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).y)))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (true), true && (! (true)))), true && (! (_GLF_IDENTITY(! (true), true && (! (true))))))))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true))))))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_IDENTITY(_GLF_DEAD(false), false || _GLF_IDENTITY((_GLF_DEAD(false)), ((_GLF_DEAD(false))) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))), (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))) && true)) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), false || (! (injectionSwitch.x > injectionSwitch.y)))))))))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), int(ivec2(int(5), 0))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
          }
         else
          {
          }
         for(int _injected_loop_counter = (1 ^ (_GLF_IDENTITY((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), min(_GLF_IDENTITY(int(3), max(int(3), int(3))), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(int(3), (true ? int(3) : _GLF_FUZZED(-12615)))) | (int(3))))), int(3))), (_GLF_IDENTITY((1 << _GLF_IDENTITY(int(3), int(3))), ((1 << _GLF_IDENTITY(int(3), int(3)))) << 0)) | ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (true ? _GLF_IDENTITY(int(3), int(3)) : _GLF_FUZZED(i)))))) >> _GLF_IDENTITY(int(3), int(3)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, true && (_GLF_IDENTITY(true, ! (! (true)))))))
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false)))))))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), true))))) || (false))))
                  barrier();
                 barrier();
                }
              }
             else
              {
              }
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(820.040, 242.834)) : injectionSwitch)).y))); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(76.92), _GLF_FUZZED(-3651.3646)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y))))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((+ 3.7))), bool(false))), injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(vec2(injectionSwitch), (vec2(injectionSwitch)) * mat2(1.0)))), (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0))), injectionSwitch.y))), injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x) * 1.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x)))), _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y))), injectionSwitch)).x)) > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         for(int _injected_loop_counter = (0 | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < (((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) & 1) << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), _GLF_IDENTITY(int(2), 0 | (int(2)))))); _injected_loop_counter ++)
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))));
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
    }
   atomicStore(buf[next_virtual_gid], uint(2), 4, _GLF_IDENTITY(64, (64) >> 0), 4);
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x < injectionSwitch.y)), (! ((injectionSwitch.x < injectionSwitch.y))) && true)))) && (_GLF_IDENTITY(false, bool(bool(false))))))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)) : _GLF_FUZZED(vec2(-6.0, -43.40)))).y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), max(vec2(vec2(injectionSwitch)), vec2(vec2(injectionSwitch))))).y))))))))
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   else
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)) + vec2(0.0, 0.0))).y))))
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       else
                        {
                        }
                      }
                     else
                      {
                       barrier();
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                }
               else
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                   barrier();
                  }
                }
              }
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, false)), _GLF_IDENTITY(bool(bvec3(bool(bvec4(false, false, _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(bvec2(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), false)), false, false)), (bool(bvec3(bool(bvec4(false, false, true, false)), false, false))) || false)))));
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
        }
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))))))
      {
       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) * (1 ^ 0)), (_injected_loop_counter --) + (1 ^ 1)))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.30)), vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(mat2(1.0), _GLF_IDENTITY(transpose(transpose(mat2(1.0))), transpose(transpose(_GLF_IDENTITY(transpose(transpose(mat2(1.0))), (false ? _GLF_FUZZED(mat2(-8.5, 1.6, 91.95, 606.321)) : transpose(transpose(mat2(1.0)))))))))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(17.93))), 0.0, 0.0)), injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(mat2(1.0), (_GLF_IDENTITY(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))), transpose(transpose(_GLF_IDENTITY(mat2(1.0), transpose(transpose(mat2(1.0)))))))) - mat2(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0)), _GLF_IDENTITY(mat2x4(mat3x4(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0)))), mat2x4(mat2x4(mat2x4(mat3x4(mat2x4(injectionSwitch, 0.0, 0.0, 1.0, 0.0, 0.0, sqrt(0.0)))))))))).x)))) / mat2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))) * (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.30)), _GLF_IDENTITY(vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) - 0))))]), mix(vec2((vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) - 0))))]))[0], _GLF_FUZZED(-277.024)), vec2(_GLF_FUZZED(-382.202), (vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, (1) - 0))))]))[1]), bvec2(false, true))), bvec2(false, _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, ! (! (injectionSwitch.x < injectionSwitch.y)))))))))).y))), true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0) * (injectionSwitch), mix(vec2((mat2(1.0) * (injectionSwitch))[0], (mat2(1.0) * (injectionSwitch))[1]), vec2(_GLF_FUZZED(61.12), _GLF_FUZZED(110.018)), bvec2(false, false)))).x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mix(_GLF_IDENTITY(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(20.30), clamp(_GLF_FUZZED(20.30), _GLF_FUZZED(20.30), _GLF_IDENTITY(_GLF_FUZZED(20.30), clamp(_GLF_FUZZED(_GLF_IDENTITY(20.30, (20.30) / _GLF_ONE(1.0, injectionSwitch.y))), _GLF_FUZZED(20.30), _GLF_FUZZED(20.30)))))), min(vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(_GLF_IDENTITY(20.30, (_GLF_IDENTITY(20.30, (20.30) / 1.0)) + 0.0)), clamp(_GLF_FUZZED(20.30), _GLF_FUZZED(20.30), _GLF_IDENTITY(_GLF_FUZZED(20.30), clamp(_GLF_FUZZED(_GLF_IDENTITY(20.30, min(_GLF_IDENTITY(20.30, float(mat3x2(20.30, 1.0, 0.0, 0.0, 1.0, 0.0))), 20.30))), _GLF_FUZZED(20.30), _GLF_FUZZED(20.30)))))), vec2((injectionSwitch)[0], _GLF_IDENTITY(_GLF_FUZZED(20.30), clamp(_GLF_FUZZED(20.30), _GLF_FUZZED(20.30), _GLF_IDENTITY(_GLF_FUZZED(20.30), clamp(_GLF_FUZZED(20.30), _GLF_FUZZED(20.30), _GLF_FUZZED(20.30)))))))), vec2(_GLF_FUZZED(-5.5), _GLF_IDENTITY((injectionSwitch), vec2(_GLF_IDENTITY(mat4x2((injectionSwitch), 1.0, sqrt(0.0), 0.0, sqrt(0.0), _GLF_IDENTITY(0.0, (true ? _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)) : _GLF_FUZZED(-96.69))), 1.0), mat4x2(mat4x3(mat4x2((injectionSwitch), 1.0, sqrt(0.0), 0.0, _GLF_IDENTITY(sqrt(0.0), 1.0 * (_GLF_IDENTITY(sqrt(0.0), float(vec3(sqrt(0.0), 0.0, 1.0))))), 0.0, 1.0))))))[1]), bvec2(_GLF_IDENTITY(false, bool(bool(false))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), mat2(1.0) * (mix(vec2((injectionSwitch)[0], _GLF_FUZZED(20.30)), vec2(_GLF_FUZZED(-5.5), (injectionSwitch)[1]), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))).y))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), false || (! (true))))), (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) - vec2(0.0, 0.0)))).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x)))), 1.0 * (float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x), max(float(injectionSwitch.x), float(injectionSwitch.x))))))) > injectionSwitch.y)))))), ((_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, 1.0)))) - vec2(0.0, 0.0)))).y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(_GLF_IDENTITY(float(injectionSwitch.x), max(float(injectionSwitch.x), float(injectionSwitch.x)))), 1.0 * (float(_GLF_IDENTITY(float(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) * vec2(1.0, 1.0)).x), max(float(injectionSwitch.x), float(injectionSwitch.x))))))) > injectionSwitch.y))))))) && true) && true), _GLF_IDENTITY(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), bool(bvec4(bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! _GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bool(true))))), ! (! (! ((_GLF_IDENTITY(true, bool(bool(true)))))))))), true)), true && (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bool(true))))), ! (! (! ((_GLF_IDENTITY(true, bool(bool(true)))))))))), true)), ! (! (bool(bvec2(_GLF_IDENTITY((_GLF_IDENTITY(true, bool(bool(true)))), ! (_GLF_IDENTITY(! ((_GLF_IDENTITY(true, bool(bool(true))))), ! (! (! ((_GLF_IDENTITY(true, bool(bool(true)))))))))), true)))))))))))), false, false, true))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 else
  {
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
