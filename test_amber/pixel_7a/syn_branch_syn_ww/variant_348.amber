#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + ((subgroup_local_id + 1) % subgroup_size);
 atomicStore(buf[virtual_gid], uint(1), 4, 64, 4);
 if(subgroup_local_id + 1 < subgroup_size)
  {
   switch(_GLF_SWITCH(0))
    {
     case 0:
     case 40:
     case 66:
     case 22:
     case 31:
     case 6:
     int i = 0;
     case 32:
     case 94:
     case 95:
     case 92:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     case 48:
     vec2 _GLF_SWITCH_0_0v, _GLF_SWITCH_0_1v;
     default:
     1;
    }
  }
 else
  {
   switch(_GLF_SWITCH(0))
    {
     case 30:
     while((mat4(634.027, -9.1, -4329.8677, 0.4, 9519.5236, -776.229, -37.11, 6.6, 5397.5093, -7.5, 2.2, 732.891, -422.809, 2.8, 47.26, -8183.8835) != (false ? mat4(-5.0, 59.59, -4919.3718, -84.63, 1.6, -85.48, 13.44, -0.7, -5635.3649, -7280.7017, 8162.6340, 6.6, 65.19, -7.1, -4.9, 73.45) : mat4(-8080.2059, -8.0, -2717.5163, -2.4, 7998.7208, 2614.0774, -1817.4934, -9148.7126, 9781.7537, 8.8, -44.31, -8.0, 2.4, 0.5, -1.1, 5040.9148))))
      {
       mat2x3 _GLF_SWITCH_1_0v, _GLF_SWITCH_1_1v, _GLF_SWITCH_1_2v;
       ;
       false;
       (vec4(-555.175, 5.2, 34.03, 9.3) * vec4(-9471.1066, -7316.6408, 7290.8727, 6660.5841));
       ivec4(-79, 59831, -56809, -22130);
       ;
       {
        mat4x2 _GLF_SWITCH_1_3v[74];
        uvec4 _GLF_SWITCH_1_4v;
        if((workgroup_size < virtual_gid))
         {
          (_GLF_SWITCH_1_1v - (- mat2x3(826.141, -8.2, 0.5, 894.757, -3.9, 92.15)));
          num_workgroup;
          mat4(18.26, -7035.8547, -566.466, 3978.6644, -0.8, -9.8, 64.32, 53.13, 7.9, 70.57, -0.1, -359.926, -5141.9507, -5.5, 3892.8174, -8.6);
          (mat4x3(-1.3, -869.271, 2309.9670, 6.1, -134.508, 873.095, -0.6, 188.998, 7177.8486, 42.40, 3754.8234, 0.8) / round(17.21));
          (_GLF_SWITCH_1_4v >> num_workgroup);
          mat4x2(37.45);
          ceil(vec3(3.8, -7.7, 4880.7614));
          mat3x2(mat3x4(-715.117, -5.3, 6723.9642, -1850.9434, -6528.8414, -5852.3011, 5.5, -88.68, -4.5, 831.364, 53.07, 7735.0223));
          ;
         }
        else
         {
          (_GLF_SWITCH_1_1v --);
          mat2 _GLF_SWITCH_1_5v[66], _GLF_SWITCH_1_6v[21], _GLF_SWITCH_1_7v[63];
         }
        if(bool(virtual_gid))
         {
          ;
          ;
          ;
          uvec3(29535u, 21385u, 70549u);
          (ivec4(87103, 90746, 12158, 44825) != ivec4(-81537, -43626, 344, 5513));
          vec2 _GLF_SWITCH_1_8v, _GLF_SWITCH_1_9v, _GLF_SWITCH_1_10v;
          bvec2 _GLF_SWITCH_1_11v;
          radians(inversesqrt(_GLF_SWITCH_1_8v));
          (-- _GLF_SWITCH_1_0v);
         }
        else
         {
          ;
          ivec4 _GLF_SWITCH_1_12v[68], _GLF_SWITCH_1_13v[19], _GLF_SWITCH_1_14v;
          (ivec2(9991, 56364) << 60524);
          mat2x4 _GLF_SWITCH_1_15v, _GLF_SWITCH_1_16v, _GLF_SWITCH_1_17v[10];
         }
        mat3x2(_GLF_SWITCH_1_2v);
        {
        }
        vec4(-16.03, -42.78, 1901.6375, -7247.0998);
        workgroup_id;
        while(((next_virtual_gid) == num_workgroup))
         {
          uint _GLF_SWITCH_1_18v[40], _GLF_SWITCH_1_19v, _GLF_SWITCH_1_20v;
          mat3x2(7.1, -59.91, -2051.2890, 12.23, 75.04, 4557.4612);
          ;
         }
       }
       for(ivec2 _GLF_SWITCH_1_21v, _GLF_SWITCH_1_22v; (vec2(2534.6565, 8.9) != injectionSwitch); bvec3(true, false, false))
        {
         mat3x4(mat3x2(-7.0, -468.506, -0.7, -0.6, 598.632, -919.533));
         mat2x4(-3.1, -206.594, -98.23, 12.41, 27.69, -6.4, 597.702, 1327.3758);
         56.68;
         ivec3(93382, 76926, -97919);
         while(false)
          {
           ivec2 _GLF_SWITCH_1_23v[6], _GLF_SWITCH_1_24v;
           (atomicOr(subgroup_size, workgroup_size) + workgroup_size);
           mat3 _GLF_SWITCH_1_25v[84], _GLF_SWITCH_1_26v[65];
           mat2x4 _GLF_SWITCH_1_27v;
          }
         ;
         mat2(-796.268, -5064.1226, 29.05, -4569.8026)[1];
         true;
         if(true)
          {
          }
        }
      }
     case 0:
     case 74:
     case 3:
     case 51:
     case 31:
     atomicStore(buf[next_virtual_gid], uint(2), 4, 64, 4);
     break;
     default:
     1;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT tester EQ_BUFFER expected
