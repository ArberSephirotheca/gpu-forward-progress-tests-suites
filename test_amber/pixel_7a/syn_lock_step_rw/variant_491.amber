#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uvec2 GLF_merged2_0_1_13_1_1_4num_workgroupread;
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(_GLF_IDENTITY(! (false), bool(_GLF_IDENTITY(bvec2(! (false), true), bvec2(bvec4(bvec2(! (false), true), false, true))))), true, false, false)))))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           continue;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_DEAD(false))
            continue;
           break;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bool(_GLF_WRAPPED_IF_TRUE(true))))))))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     return;
                    }
                   else
                    {
                    }
                  }
                }
               else
                {
                }
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          break;
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           else
            {
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
        }
       if(_GLF_DEAD(false))
        return;
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)));
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  return;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  return;
 uint num_workgroup = gl_NumWorkGroups.x;
 for(int _injected_loop_counter = (-92324 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (false ? _GLF_FUZZED((_injected_loop_counter * 42104)) : 1))); _injected_loop_counter ++)
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(vec3(-4605.6364, 6.9, 3123.4958).y)), float(injectionSwitch.y), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
      break;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (false))))
          continue;
         return;
        }
      }
     else
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          break;
        }
       else
        {
         GLF_merged2_0_1_13_1_1_4num_workgroupread.x = num_workgroup;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
            break;
          }
         else
          {
           if(_GLF_DEAD(false))
            break;
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, ! (! (false))), false), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-96.45) : _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0), injectionSwitch.x)))) < injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))))); _injected_loop_counter --)
                    {
                     return;
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_DEAD(false))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  continue;
                }
               return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(false))
                break;
              }
             if(_GLF_DEAD(false))
              break;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
          {
           for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 return;
                }
              }
            }
           continue;
          }
        }
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, false || (false))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
    }
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u) + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
        {
         return;
        }
      }
     return;
    }
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 | 1)); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))) && true))))) || false)) && true), false, false)), (bool(bvec3(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), _GLF_IDENTITY(true, false || (true)) && (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))), ! (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(false, false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), false)))), true && (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) && true)) || false)) && true), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false)))))), false))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(false))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, true && (false)))), true && (false)))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))), ! (! (bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))))))) || false)), _GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))))), false || ((_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bool(bool(_GLF_IDENTITY(false, true && (false))))))))))))) && true), true))))) || false) && true), (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, (false) && true), false)))) || false)))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                return;
               return;
              }
            }
           else
            {
            }
          }
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(7), _GLF_IDENTITY(int(7), max(int(7), int(7))))); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 ^ 1)); _injected_loop_counter ++)
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(((0 ^ 0) ^ 0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(max(23435, 67914)) : _GLF_IDENTITY(((0 ^ 0) ^ 0), min(((0 ^ 0) ^ 0), _GLF_IDENTITY(((0 ^ 0) ^ 0), ~ (~ (((0 ^ 0) ^ 0)))))))), 0 + (_GLF_IDENTITY(((0 ^ 0) ^ 0), 0 ^ _GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, (0 & 50603) | (_GLF_IDENTITY(0, ~ (~ (0))))))) ^ 0) ^ 0, _GLF_IDENTITY(clamp((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)), ~ (~ (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0))))) ^ 0) ^ 0, _GLF_IDENTITY(((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0) | ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0), 0 ^ (((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0) | ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))), max(clamp((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, _GLF_IDENTITY((0), max((0), (0))) * 1), 0)) ^ 0) ^ 0) | ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, ~ (~ (1)))), 0)) ^ 0) ^ 0))), clamp((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, (_GLF_IDENTITY(_GLF_IDENTITY(0, (0) + (1 ^ 1)), _GLF_IDENTITY(max(_GLF_IDENTITY(0, (0) * 1), 0), (max(_GLF_IDENTITY(0, (0) * 1), 0)) >> 0)) ^ 0) ^ 0, _GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0) | ((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))))))), _GLF_IDENTITY(min((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)), (_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)), min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)), _GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0))))) | (_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)))) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * _GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 1), (ivec2(1, 1)) >> ivec2(0, 0))))), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))), ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec2(_GLF_IDENTITY(0, 0 | (0)), 1))), max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0))))))) ^ 0) ^ 0)), _GLF_IDENTITY(((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))), (0) * 1), 0)) ^ 0) ^ 0))), (false ? _GLF_FUZZED(14714) : ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), clamp(_GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))), _GLF_IDENTITY(0, ~ (~ (0))))), (0) * 1), 0)) ^ 0) ^ 0))))) | (_GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), min(_GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), clamp((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), (((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), (((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))), (((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))))))), min(_GLF_IDENTITY(_GLF_IDENTITY(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))))), int(int(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))))))))), (_GLF_IDENTITY(_GLF_IDENTITY(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))))), int(int(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))))))))), (0 | 0) | (_GLF_IDENTITY(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))))), int(int(min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0)) ^ 0) ^ 0))) | ((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0))))))))))))) >> 0), min((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(_GLF_IDENTITY(0, int(ivec4(0, 1, 1, 1))), (0) * 1), _GLF_IDENTITY(0, (0) - 0))) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, min(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, _GLF_IDENTITY(_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) * 1)))) ^ 0)), min((((_GLF_IDENTITY(_GLF_IDENTITY(0, clamp(_GLF_IDENTITY(0, int(_GLF_IDENTITY(int(0), (int(0)) | (int(0))))), _GLF_IDENTITY(0, 0 + (0)), 0)), max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)), _GLF_IDENTITY((((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), _GLF_IDENTITY(0, min(0, 0)))) ^ 0) ^ 0)), ((((_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, 0)), _GLF_IDENTITY(max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0), int(_GLF_IDENTITY(ivec4(max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0), 0, 1, 1), (ivec4(max(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), (0) * 1), 0), 0, 1, 1)) << ivec4(0, 0, 0, 0))))) ^ 0) ^ 0))) | (_GLF_IDENTITY(((_GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, max((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))), (true ? ((_GLF_IDENTITY((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, max((_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0, (_GLF_IDENTITY(0, max(_GLF_IDENTITY(0, (0) * 1), 0)) ^ 0) ^ 0)))) : _GLF_FUZZED(-61189)))))))))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))), clamp(~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))), ~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))), _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))), (false ? _GLF_FUZZED((~ 25569)) : _GLF_IDENTITY(~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))), ~ (~ (~ (~ _GLF_IDENTITY((_injected_loop_counter), ((_injected_loop_counter)) / (1 & 1))))))))))) != 1, _GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1, true, true), _GLF_IDENTITY(bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1, true, true))), bvec3(_GLF_IDENTITY(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1, true, true)))), bvec3(bvec3(bvec3(bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1, true, true)))))))))), bvec3(bvec3(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))))) != 1, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, 0 | (_injected_loop_counter)), ~ (_GLF_IDENTITY(~ (_injected_loop_counter), clamp(~ (_injected_loop_counter), ~ (_injected_loop_counter), ~ (_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0)))))) != 1, true, true)))))))), _GLF_IDENTITY(true, true && (true)) && (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != 1, true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_injected_loop_counter, ~ _GLF_IDENTITY((~ (_injected_loop_counter)), min((~ (_injected_loop_counter)), (~ (_injected_loop_counter))))) != 1, true, true))))))))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               continue;
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              break;
             break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
            }
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) || false)))
          {
           return;
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       do
        {
         for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 + (int(1))))) >> _GLF_IDENTITY(int(1), int(1))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(8), int(8)))); _injected_loop_counter --)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)), (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))) && true)));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      return;
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(1), int(1))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(1), min(int(1), _GLF_IDENTITY(int(1), (int(1)) | 0))), _GLF_IDENTITY(int(1), (int(1)) * _GLF_IDENTITY(1, (1) | 0))))); _injected_loop_counter ++)
      {
       do
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (1 & 1)); _injected_loop_counter ++)
          {
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        continue;
      }
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
  }
 else
  {
  }
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * subgroup_size, max(_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, ~ (~ (subgroup_size))), (subgroup_id * subgroup_size) << 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)), (_GLF_IDENTITY(uint(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)), (true ? uint(uint(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u) * subgroup_size)) : _GLF_FUZZED(workgroup_id)))) | 0u)), (false ? _GLF_FUZZED(subgroup_size) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id * subgroup_size, uint(uint(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)) * subgroup_size))), (_GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(subgroup_size, (subgroup_size) | (subgroup_size)), subgroup_size)), uint(uint(subgroup_id * _GLF_IDENTITY(subgroup_size, clamp(_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)), subgroup_size, _GLF_IDENTITY(subgroup_size, (false ? _GLF_FUZZED(subgroup_id) : subgroup_size)))))))) / 1u))))) + _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + _GLF_IDENTITY(0.0, float(mat2x3(_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-1.7) : 0.0)), 1.0, 1.0, 1.0, determinant(mat3(0.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)), 0.0)))), mix(float(_GLF_FUZZED(-4.4)), float(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), clamp(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(false, bool(bvec2(false, true))) ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)).x, (injectionSwitch.x) + 0.0)))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), _GLF_IDENTITY(((subgroup_local_id) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0)))) - vec2(0.0, 0.0)).x) / 1.0))), _GLF_IDENTITY(0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(0u ^ (_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) - 0u) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))), max(0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / abs(vec2(1.0, 1.0))).x))), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))))) | (0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)))))))))) >> 0u) : _GLF_FUZZED(subgroup_local_id))) | ((_GLF_IDENTITY(subgroup_local_id, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))))), max(_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), _GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), clamp(~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u)))))), ~ (_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 0u, 1u))))))))))) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), _GLF_IDENTITY(((subgroup_local_id) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], clamp(injectionSwitch[1], injectionSwitch[1], injectionSwitch[1])), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0), mix(float(_GLF_FUZZED(96.90)), float(_GLF_IDENTITY(injectionSwitch[1], (injectionSwitch[1]) - 0.0)), bool(true)))) * 1.0))).x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u) : _GLF_FUZZED(subgroup_local_id))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1) % subgroup_size)) | (_GLF_IDENTITY(((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) / 1.0)) / 1.0)))), _GLF_IDENTITY(((subgroup_local_id) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-9.8) : injectionSwitch.x)))) : _GLF_FUZZED(86639u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(160.227)), bool(false))), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0)), (float(mat3x4(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_ZERO(0.0, injectionSwitch.x)), float(_GLF_FUZZED(160.227)), bool(false))), 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), _GLF_IDENTITY(1.0, min(1.0, 1.0)), 1.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec2(0.0, 0.0), vec2(1.0, 1.0)), dot(vec2(0.0, 0.0), vec2(1.0, 1.0))), 1.0))) / 1.0))), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u) : _GLF_FUZZED(subgroup_local_id))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1, 0u + (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), _GLF_IDENTITY(((_GLF_IDENTITY(subgroup_local_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(atomicAnd(subgroup_id, num_workgroup)) : subgroup_local_id))) >> _GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u)))), (true ? _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u) : _GLF_FUZZED(subgroup_local_id))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1))) % subgroup_size), 0u ^ (((_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_local_id), ((subgroup_local_id)) | (0u & uvec3(150539u, 190445u, 184683u).g)) >> uint(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0))), _GLF_IDENTITY(((subgroup_local_id) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u))), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u)))), (~ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u))))) | (~ (_GLF_IDENTITY(uint(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? uint(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(86639u))))))))), (true ? _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), (false ? _GLF_FUZZED(virtual_gid) : _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), min(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u))), min(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), min(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), min(_GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)), 0u ^ ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))), (((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x)))) >> 0u))))))) : _GLF_FUZZED(subgroup_local_id))) | ((subgroup_local_id) >> uint(_GLF_ZERO(0.0, injectionSwitch.x))))) + 1) % subgroup_size)))));
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[virtual_gid], _GLF_IDENTITY(4, max(4, 4)), 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-5373.3632)))) + 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y), false || (! (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))))))))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch, injectionSwitch)))))).x < injectionSwitch.y))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        return;
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
    }
   else
    {
    }
   return;
  }
 GLF_merged2_0_1_13_1_1_4num_workgroupread.y = _GLF_IDENTITY(read, _GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))) - _GLF_IDENTITY(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : 0u)))), ~ (~ (0u))), (0u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), 0u)), (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(0u, (_GLF_IDENTITY(0u, min(0u, 0u))) | (_GLF_IDENTITY(0u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_size) : 0u)))), ~ (~ (0u))), (0u) ^ (0u << _GLF_IDENTITY(uint(1u), uint(1u)))), 0u))) >> 0u), ((_GLF_IDENTITY(_GLF_IDENTITY(read, min(_GLF_IDENTITY(read, 0u | (read)), _GLF_IDENTITY(read, (read) | (read)))), (read) | (read))) - 0u) | (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), (_GLF_IDENTITY((_GLF_IDENTITY(read, (read) | (read))), max((_GLF_IDENTITY(read, (read) | (read))), (_GLF_IDENTITY(read, (read) | (read)))))) << 0u) - _GLF_IDENTITY(0u, _GLF_IDENTITY((0u) << 0u, (true ? (0u) << 0u : _GLF_FUZZED(read)))))));
 for(int _injected_loop_counter = _GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), ~ (~ (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), (_GLF_IDENTITY(int(_GLF_ONE(1.0, injectionSwitch.y)), 0 | (int(_GLF_ONE(1.0, injectionSwitch.y))))) ^ 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) || false), true, false, false))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)), ! (! (bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), (bool(injectionSwitch.x > injectionSwitch.y)) && true)))))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-18.76), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-16357))), bvec2(true, false))), injectionSwitch)).y, max(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-18.76), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-16357))), bvec2(true, false))), injectionSwitch)).y, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-18.76), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-16357))), bvec2(true, false))), injectionSwitch)).y, mix(float(_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-18.76), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(float(-16357))), bvec2(true, false))), injectionSwitch)).y), float(_GLF_FUZZED((3.4))), bool(false))))), ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), true, false), false)))), bool(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), _GLF_IDENTITY(bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), false))), true))), false)), bvec3(bvec4(bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), bvec3(bvec4(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(vec4(injectionSwitch.y, 1.0, 1.0, 0.0), vec4(mat2(vec4(injectionSwitch.y, 1.0, 1.0, 0.0)))))), _GLF_IDENTITY(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), bool(bvec2(! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))), true))))), true, false), false))), true))), false)), true)))), false))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(bool(_GLF_IDENTITY(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), true, false), bvec3(bvec4(bvec3((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (_GLF_IDENTITY(! _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))), true, false), false)))))))))), true && ((injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))), false || (true && (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(1.0, 1.0)) * (injectionSwitch)).x > injectionSwitch.y))))))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      continue;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(4.8, 3699.7127)))).y)))))) && (_GLF_DEAD(false))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_DEAD(false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       return;
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
      }
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) || false), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY(! (_GLF_WRAPPED_IF_FALSE(false)), ! (! (! (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))))))))))))
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), bool(bvec4((_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(-4.1)), float(injectionSwitch.x), bool(true))) > injectionSwitch.y), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
          {
          }
         else
          {
           return;
          }
        }
       do
        {
         do
          {
           for(int _injected_loop_counter = ((int(_GLF_ONE(1.0, injectionSwitch.y)) << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), 0 ^ (_GLF_IDENTITY(int(1), clamp(int(1), int(1), int(1))))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _GLF_IDENTITY(_injected_loop_counter ++, int(_GLF_ZERO(0.0, injectionSwitch.x)) | (_injected_loop_counter ++)))
              {
               return;
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))));
    }
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(2.0) : injectionSwitch.x)), 1.0, 0.0, 1.0, log(1.0), 1.0, 0.0, 0.0))) < injectionSwitch.y))) || false)))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      return;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
        }
       else
        {
        }
      }
    }
   else
    {
    }
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u)))) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))))), uvec2(0u, 0u) ^ (uvec2(0u, 0u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(_GLF_IDENTITY(4u, (4u) ^ (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))))))))).y, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, 0u) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))).y)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u)))) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))))), uvec2(0u, 0u) ^ (uvec2(0u, 0u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(_GLF_IDENTITY(4u, (4u) ^ (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))))))))).y, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, 0u) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))).y)), (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))), (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u)))) | (_GLF_IDENTITY(uvec2(0u, 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u))))), uvec2(0u, 0u) ^ (uvec2(0u, 0u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(_GLF_IDENTITY(4u, (4u) ^ (0u >> _GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))))))))).y, 0u + (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, 0u) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(4u), uvec2(4u)))).y))) - 0u)) ^ 0u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY((uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)), ((uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u))) | (_GLF_IDENTITY((uvec2(_GLF_IDENTITY(0u, (0u) >> 0u), 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)), uvec2(0u, 0u) | ((uvec2(0u, _GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y))), (uvec3(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, (0u) | (0u)), 0u)), 0u, uint(_GLF_ONE(1.0, injectionSwitch.y)))) >> uvec3(0u, 0u, 0u))))) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)))))) + (uvec2(0u, 0u))), (_GLF_IDENTITY(_GLF_IDENTITY(uvec2(0u, 0u), clamp(uvec2(0u, 0u), uvec2(0u, 0u), uvec2(0u, 0u))), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)), 116807u)) + (uvec2(0u, 0u)))) | (_GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, uint(uvec4(0u, 0u, 1u, 0u))), 0u)), 0u), (uvec2(0u, 0u) & uvec2(_GLF_IDENTITY(183366u, _GLF_IDENTITY(clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u), clamp(_GLF_IDENTITY(clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u), max(clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u), clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u))), clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u), clamp(_GLF_IDENTITY(183366u, (183366u) << 0u), 183366u, 183366u)))), 116807u)) + (uvec2(0u, 0u))))), uvec2(0u, 0u) ^ (uvec2(0u, 0u))) >> _GLF_IDENTITY(uvec2(4u), uvec2(_GLF_IDENTITY(4u, (4u) ^ _GLF_IDENTITY((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(_GLF_IDENTITY(uint(3u), uint(uvec4(uint(3u), 1u, 1u, 0u))))))), 0u ^ (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u)))))))), max((0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))), 0u ^ (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u)))))))), (0u >> _GLF_IDENTITY(_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))), 0u ^ (_GLF_IDENTITY(uint(3u), _GLF_IDENTITY(uint(3u), uint(uint(uint(3u))))))))))))))).y, 0u + _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(next_virtual_gid))), 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) >> 0u)), uvec2(4u)))).y, ~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(next_virtual_gid))), 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) >> 0u)), uvec2(4u)))).y, (_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, _GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(virtual_gid)))), _GLF_IDENTITY(uvec2(_GLF_IDENTITY(0u, (true ? 0u : _GLF_FUZZED(next_virtual_gid))), 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)))), 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) >> 0u)), uvec2(4u)))).y) >> 0u))))), ~ (~ (_GLF_IDENTITY((_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, ~ (~ (4u)))), uvec2(4u)))).y), ((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) / 1u)), uvec2(4u)))).y, clamp(_GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) / 1u)), uvec2(4u)))).y, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) / 1u)), uvec2(4u)))).y, _GLF_IDENTITY(GLF_merged2_0_1_13_1_1_4num_workgroupread, (GLF_merged2_0_1_13_1_1_4num_workgroupread) - (_GLF_IDENTITY(uvec2(0u, 0u), _GLF_IDENTITY(uvec2(0u, 0u) ^ (uvec2(0u, 0u)), uvec2(0u, 0u) ^ (uvec2(0u, _GLF_IDENTITY(0u, ~ (~ (_GLF_IDENTITY(0u, min(_GLF_IDENTITY(0u, 0u + (0u)), 0u)))))) ^ (uvec2(0u, 0u))))) >> _GLF_IDENTITY(uvec2(_GLF_IDENTITY(4u, (4u) / 1u)), uvec2(4u)))).y)))) << 0u))))) : _GLF_FUZZED(num_workgroup))), 4, 64, _GLF_IDENTITY(4, 0 ^ (4)));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(_GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! ((false) && _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))), _GLF_IDENTITY(bool(bvec4((false) && _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, false || (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), vec3(mat4x2(vec3(injectionSwitch.x, 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 1.0))))), injectionSwitch.x)) < injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 0.0), vec3(mat4x2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (injectionSwitch)).x, 1.0, 0.0), 0.0, 1.0, 1.0, 1.0, 1.0))))), injectionSwitch.x)) < injectionSwitch.y) || false)))) && true))), false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)), _GLF_IDENTITY(! (! _GLF_IDENTITY((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))), true && ((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))))), bool(bvec2(_GLF_IDENTITY(! (! _GLF_IDENTITY((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))), true && ((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (! _GLF_IDENTITY((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true))), true && ((bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)))))))), true))))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y)), _GLF_IDENTITY(bool(bvec4((false) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(bvec2(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), bool(bool(! (_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))), false))), false, true, true)), ! (! (_GLF_IDENTITY(bool(bvec4((false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, true, true)), ! (! (bool(bvec4((false) && _GLF_TRUE(_GLF_IDENTITY(true, ! (! (true))), (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.7) : injectionSwitch.y)), max(_GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.7) : injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-7.7) : injectionSwitch.y))))) - _GLF_IDENTITY(dot(vec4(1.0, 1.0, 0.0, 0.0), vec4(0.0, sqrt(0.0), 1.0, 1.0)), dot(vec4(1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY(vec4(0.0, sqrt(0.0), 1.0, 1.0), (vec4(0.0, sqrt(0.0), 1.0, 1.0)) * vec4(1.0, 1.0, 1.0, 1.0))))))), false, true, true)))))))))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))))), true, false, false)))), ! (! (false || (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec2(bvec2(true, false))))))))), true, false, false))))))))))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
              return;
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(mat3x4(injectionSwitch.y, 1.0, 1.0, 0.0, abs(1.0), 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0)), 1.0, 1.0, determinant(mat2(0.0, 0.0, 0.0, 0.0))))), min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(1.5) : injectionSwitch.y))))))))
                {
                 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                  {
                   return;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    return;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     return;
                    }
                  }
                 if(_GLF_DEAD(false))
                  return;
                }
               else
                {
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              return;
             if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
              return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false)))))))
            {
             for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               return;
              }
            }
           continue;
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            continue;
           do
            {
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         return;
        }
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false))))), (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           return;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
        {
         return;
        }
      }
    }
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(false))
        return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec2(false, false)))));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, ! (! (_injected_loop_counter != 0)))); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --))) * 1))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))))
          return;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           do
            {
             return;
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
        }
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       return;
      }
    }
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 1, false || (_injected_loop_counter != 1))); _injected_loop_counter ++)
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-86.76), _GLF_FUZZED(-8.3)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-86.76), _GLF_FUZZED(-8.3)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mix(vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], (vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1]), vec2(_GLF_FUZZED(-7.2), _GLF_FUZZED(-5.6)), bvec2(false, false))), bvec2(true, true))))).x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-86.76), _GLF_IDENTITY(_GLF_FUZZED(-8.3), float(_GLF_IDENTITY(mat2x4(_GLF_FUZZED(-8.3), 1.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))), (mat2x4(_GLF_FUZZED(-8.3), 1.0, 0.0, 0.0, 0.0, 1.0, exp(0.0), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))) - mat2x4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))), vec2(1.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(7.6)))) * (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-86.76), _GLF_FUZZED(-8.3)), _GLF_IDENTITY(vec2((injectionSwitch)[0], (injectionSwitch)[1]), mix(vec2((vec2((injectionSwitch)[0], (injectionSwitch)[1]))[0], (vec2((injectionSwitch)[0], (injectionSwitch)[1]))[1]), vec2(_GLF_FUZZED(-7.2), _GLF_FUZZED(-5.6)), bvec2(false, false))), bvec2(true, true))))).x > injectionSwitch.y)))))))
  return;
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   do
    {
     if(_GLF_DEAD(false))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(4.6))) > injectionSwitch.y))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true))), bool(bvec4(false, true, true, true))))) && true))
    {
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           return;
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     return;
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bool(true))), false))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bool(true))), false)), (bool(bvec3(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(true, bool(bool(true))), false))) && true))) || false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          break;
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (false) && true))))))
          break;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), true && (_GLF_WRAPPED_IF_FALSE(false))))
              {
               if(_GLF_DEAD(false))
                break;
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 return;
                }
              }
            }
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false, ! (! (false))) || (_GLF_IDENTITY(false, ! (! (false)))))))
      return;
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter --)
          {
           return;
          }
        }
      }
    }
   if(_GLF_DEAD(false))
    return;
   return;
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
