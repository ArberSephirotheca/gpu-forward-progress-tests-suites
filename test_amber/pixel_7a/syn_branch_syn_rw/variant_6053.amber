#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_4 {
 mat4x2 _f0;
 mat4x3 _f1;
 bvec3 _f2;
 mat3 _f3;
} ;

struct _GLF_struct_3 {
 uvec4 _f0;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 mat3x2 _f1;
 vec2 _f2;
 ivec4 _f3;
 uvec4 _f4;
 ivec4 _f5;
} ;

struct _GLF_struct_1 {
 mat4x2 _f0;
 uvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_1 _f0;
 uvec2 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 _GLF_struct_4 _f4;
} ;

struct _GLF_struct_0 {
 float _f0;
 vec3 _f1;
 uint workgroup_base;
} ;

struct _GLF_struct_6 {
 _GLF_struct_0 _f0;
 _GLF_struct_5 _f1;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(_GLF_struct_0(1.0, vec3(1.0), workgroup_size * workgroup_id), _GLF_struct_5(_GLF_struct_1(mat4x2(1.0), uvec4(1u), uvec2(1u)), uvec2(1u), _GLF_struct_2(ivec4(1), mat3x2(1.0), vec2(1.0), ivec4(_GLF_IDENTITY(1, ~ (~ (1)))), uvec4(1u), ivec4(_GLF_IDENTITY(1, ~ (~ (1))))), _GLF_struct_3(uvec4(1u)), _GLF_struct_4(mat4x2(1.0), mat4x3(1.0), bvec3(true), mat3(1.0))));
 uint virtual_gid = _GLF_IDENTITY(_GLF_struct_replacement_6._f0.workgroup_base + subgroup_id * subgroup_size, (_GLF_struct_replacement_6._f0.workgroup_base + subgroup_id * subgroup_size) >> (0u | 0u)) + subgroup_local_id;
 uint next_virtual_gid = _GLF_struct_replacement_6._f0.workgroup_base + subgroup_id * subgroup_size + ((_GLF_IDENTITY(subgroup_local_id + 1, clamp(_GLF_IDENTITY(subgroup_local_id + 1, (false ? _GLF_FUZZED(packSnorm4x8(vec4(-3.4, -0.7, 8.1, -59.51))) : subgroup_local_id + 1)), subgroup_local_id + 1, subgroup_local_id + 1))) % subgroup_size);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), (uint(1)) | 0u), _GLF_IDENTITY(4, max(_GLF_IDENTITY(_GLF_IDENTITY(4, int(ivec2(4, 0))), (_GLF_IDENTITY(4, int(ivec2(4, 0)))) << 0), _GLF_IDENTITY(4, ~ (~ (4))))), 64, 4);
 if(_GLF_IDENTITY(subgroup_local_id, uint(uvec3(subgroup_local_id, 1u, 1u))) + 1 < subgroup_size)
  {
   int i = _GLF_IDENTITY(0, (0) - 0);
   atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(read, min(_GLF_IDENTITY(read, max(read, read)), _GLF_IDENTITY(read, (false ? _GLF_FUZZED(atomicAnd(read, virtual_gid)) : read)))), (read) ^ uint(_GLF_ZERO(0.0, injectionSwitch.x))))), 4, 64, 4);
  }
 else
  {
   atomicStore(checker[virtual_gid], read, _GLF_IDENTITY(4, (4) | (4)), 64, 4);
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
