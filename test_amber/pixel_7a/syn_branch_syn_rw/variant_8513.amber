#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])))).y))))
  barrier();
 uvec3 GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base;
 if(_GLF_DEAD(false))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_WRAPPED_LOOP(false));
 uvec4 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id;
 uint subgroup_id = gl_SubgroupID;
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w = subgroup_id;
 if(_GLF_DEAD(false))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 for(int _injected_loop_counter = (0 ^ 0); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) + (0 | 0)) != (1 & 1)); _injected_loop_counter ++)
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
       barrier();
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         barrier();
        }
      }
     else
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, true && (false)))), ((! (_GLF_IDENTITY(false, true && (false))))) || false))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 do
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), _GLF_IDENTITY((true && (false)), ! (! ((true && (false))))) && true))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false || (true), (false || (true)) && true))))
      {
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(false, false, true)))))
        barrier();
      }
     if(_GLF_DEAD(false))
      continue;
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bool(false)))))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))))
        {
         for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     return;
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
      {
       if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false))))))), (_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))) && true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
          barrier();
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true), (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! _GLF_IDENTITY((false), ((false)) || false), (! (false)) && true))))) && true))
      {
       do
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_IDENTITY(false, ! (! (false))) || (true))))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = subgroup_size, (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = subgroup_size, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = subgroup_size) ^ 0u)) >> 0u), (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x = subgroup_size) ^ 0u);
  }
 while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch, injectionSwitch)).x < injectionSwitch.y)) && (_GLF_WRAPPED_LOOP(false))));
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 for(int _injected_loop_counter = ((((1 << _GLF_IDENTITY(int(_GLF_IDENTITY(4, (4) ^ 0)), _GLF_IDENTITY(int(4), 0 ^ (int(4))))) >> _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(0.7) : injectionSwitch.y))))))
    barrier();
  }
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.y = num_workgroup;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize.x, _GLF_IDENTITY(_GLF_IDENTITY(uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u)))), (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))) | (_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u), ~ (~ (uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u))))), 0u | (_GLF_IDENTITY(uint(uvec3(_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), 0u | (_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, clamp(6u, 6u, 6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), (uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), 0u | (_GLF_IDENTITY(uint(6u), max(uint(6u), uint(6u))))), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(_GLF_IDENTITY(6u, clamp(6u, 6u, 6u))))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u)))))) | 0u), 1u, 0u)), max(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(6u), uint(6u)), 1u * (_GLF_IDENTITY(uint(6u), uint(6u))))), 1u), (true ? _GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u)) / uvec4(1u, 1u, 1u, 1u)) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), _GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), max(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)))), clamp(_GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), max(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)))), _GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), max(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)))), _GLF_IDENTITY(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), max(uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)), uint(uvec3(uint(_GLF_IDENTITY(uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u), (true ? uvec4(gl_WorkGroupSize.x, 1u, ((1u << _GLF_IDENTITY(uint(6u), uint(6u))) >> _GLF_IDENTITY(uint(6u), uint(6u))), 1u) : _GLF_FUZZED(uvec4(5584u, 186816u, 176303u, 159899u))))), 1u, 0u)))))))))) ^ (0u | 0u))), _GLF_IDENTITY((gl_WorkGroupSize.x), max((gl_WorkGroupSize.x), (gl_WorkGroupSize.x))) << 0u);
 do
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), injectionSwitch)).x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.8), clamp(_GLF_FUZZED(-7.8), _GLF_FUZZED(_GLF_IDENTITY(-7.8, _GLF_IDENTITY((-7.8), clamp((-7.8), (-7.8), (-7.8))) - 0.0)), _GLF_FUZZED(-7.8)))), float(float((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)))))), injectionSwitch)).x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_IDENTITY(_GLF_FUZZED(-7.8), clamp(_GLF_FUZZED(-7.8), _GLF_FUZZED(_GLF_IDENTITY(-7.8, _GLF_IDENTITY((-7.8), clamp((-7.8), (-7.8), (-7.8))) - 0.0)), _GLF_FUZZED(-7.8))))))), (_GLF_IDENTITY((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)) ? injectionSwitch.x : _GLF_FUZZED(-7.8)), mix(float((_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)), injectionSwitch)).x < injectionSwitch.y)) ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(intBitsToFloat(ivec2(55674, 81472))))).x, (true ? _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(intBitsToFloat(ivec2(55674, 81472))))).x : _GLF_FUZZED(mix(acosh(8994.2348), 498.252, 30.28)))) : _GLF_IDENTITY(_GLF_FUZZED(-7.8), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-2.2) : _GLF_FUZZED(-7.8))))), float(_GLF_FUZZED(_GLF_IDENTITY(vec4(-0.1, -5.7, 9326.3913, 796.509).g, min(vec4(-0.1, _GLF_IDENTITY(-5.7, (_GLF_IDENTITY(-5.7, 0.0 + (-5.7))) - 0.0), 9326.3913, 796.509).g, _GLF_IDENTITY(vec4(-0.1, -5.7, 9326.3913, 796.509).g, _GLF_IDENTITY((vec4(-0.1, -5.7, 9326.3913, 796.509).g), _GLF_IDENTITY(float(mat2x4((vec4(-0.1, -5.7, 9326.3913, 796.509).g), 1.0, 1.0, sqrt(0.0), abs(0.0), 0.0, sqrt(1.0), 0.0)), clamp(float(mat2x4((vec4(_GLF_IDENTITY(-0.1, (-0.1) + 0.0), -5.7, 9326.3913, 796.509).g), 1.0, 1.0, sqrt(0.0), abs(0.0), 0.0, sqrt(1.0), 0.0)), float(mat2x4((vec4(-0.1, -5.7, 9326.3913, 796.509).g), 1.0, 1.0, sqrt(0.0), abs(0.0), 0.0, sqrt(1.0), 0.0)), float(mat2x4((vec4(-0.1, -5.7, 9326.3913, 796.509).g), 1.0, 1.0, sqrt(0.0), abs(0.0), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(4.1)), float(0.0), bool(true))), sqrt(1.0), 0.0))))) + sin(0.0)))))), bool(false)))) - sin(_GLF_IDENTITY(dot(vec4(1.0, 1.0, 1.0, 1.0), vec4(0.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0)))), (true ? _GLF_IDENTITY(min(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0)))), (min(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, max(0.0, 0.0))) + 0.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, sin(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 0.0))))) - tan(0.0)) : _GLF_FUZZED(8.9)))), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(344.689)))), (vec4(0.0, 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, (0.0) + 0.0), _GLF_IDENTITY(0.0, float(mat4x2(0.0, 0.0, 0.0, sin(0.0), 0.0, 1.0, 0.0, 0.0))))), 0.0)) / vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, float(vec4(1.0, 0.0, 0.0, abs(1.0)))), 1.0))))))))) > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
          barrier();
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), bool(bvec4(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_WRAPPED_IF_FALSE(false)) && true)) || false)) && true), true, false, true)))) || false))
          {
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             barrier();
            }
           do
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(_GLF_IDENTITY(true, (true) || false), (injectionSwitch.x < injectionSwitch.y))))
                        {
                         barrier();
                        }
                       else
                        {
                        }
                      }
                    }
                  }
                 else
                  {
                  }
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | int(_GLF_ZERO(0.0, injectionSwitch.x)))); _injected_loop_counter --)
                    {
                     barrier();
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
              }
             if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))), ! (! (_GLF_IDENTITY(true, bool(bvec4(true, false, true, true))))))))
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             else
              {
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       do
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
            }
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         break;
         do
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), false)), true && (bool(bvec2(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), bool(bool(_GLF_WRAPPED_LOOP(false)))), false))))));
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y))))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
          barrier();
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (! (_GLF_WRAPPED_LOOP(false)))));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), ! (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)), injectionSwitch)).y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))))
      barrier();
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
          {
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) / 1), 0))); _injected_loop_counter --)
              {
               barrier();
              }
            }
           do
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(0.9)))))))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 | 0)); _injected_loop_counter --)
            {
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, (0) << 0)); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), clamp(_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), clamp((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019))) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), (true ? (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)) : _GLF_FUZZED(-198.741))))))) - 0.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), clamp(_GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), clamp((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), ((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019))) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)))), (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), _GLF_IDENTITY((true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)), (true ? (true ? _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2(injectionSwitch, 1.0, 0.0), mat2(1.0) * (mat2(injectionSwitch, 1.0, 0.0))))).x, (injectionSwitch.x) - 0.0) : _GLF_FUZZED(836.019)) : _GLF_FUZZED(-198.741))))))) - 0.0) > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))))))));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_IDENTITY(true, (true) && true)))
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = (1 | (1 & 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(_GLF_IDENTITY(0.0, (0.0) / 1.0), injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))), false || (! (_GLF_DEAD(false)))), ! (! (_GLF_IDENTITY(! _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (bool(bvec3(true, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && ((_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), true)))))), false || (! (_GLF_DEAD(false))))))))), true, false, false))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) | 0))
        {
         barrier();
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), ! (! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))), bool(bvec2(! (_GLF_IDENTITY(bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))), ! (! (bool(bool(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))))))), false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(sqrt(0.0), max(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) - 0.0), _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(-53.69) : sqrt(0.0)))))))))), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(vec3(injectionSwitch.y, 0.0, _GLF_IDENTITY(sqrt(0.0), max(_GLF_IDENTITY(sqrt(0.0), (sqrt(0.0)) - 0.0), _GLF_IDENTITY(sqrt(0.0), (false ? _GLF_FUZZED(-53.69) : sqrt(0.0))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(workgroup_id, (_GLF_IDENTITY(workgroup_id, (workgroup_id) - 0u)) << 0u);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
        {
         barrier();
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, (false) && true), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)))))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
      }
     else
      {
       do
        {
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   do
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z = workgroup_base, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z = workgroup_base) / uint(_GLF_ONE(1.0, injectionSwitch.y)));
 uint virtual_gid = GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x) | (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, ~ (_GLF_IDENTITY(~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base), ~ (~ (~ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)))))).x)) + subgroup_local_id;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ONE(1.0, injectionSwitch.y), mix(float(_GLF_FUZZED(-6.4)), float(_GLF_ONE(1.0, injectionSwitch.y)), bool(true)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       barrier();
      }
     else
      {
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, bool(bvec4((false) && true, false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), true), true, false)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec4(bvec2(_GLF_IDENTITY(false, (false) && true), true), true, false)))))), (! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, (false) && true), true), bvec2(bvec4(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true), bvec2(bvec2(bvec2(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ((false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true), true))))))), true, false))))))) || false))))))))
      barrier();
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, (injectionSwitch.x < injectionSwitch.y) && true)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) && true))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), true && (! (! (false)))))))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))), (false ? _GLF_FUZZED(vec2(-7.8, 607.590)) : injectionSwitch)))).x)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(_injected_loop_counter, clamp(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, max(_injected_loop_counter, _GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / 1))), _injected_loop_counter)), 0 + (_injected_loop_counter)) != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    barrier();
   GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y = virtual_gid;
   if(_GLF_DEAD(false))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))));
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(93998, 0 + (93998))), (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(93998, 0 + (93998)))) | (true ? 0 : _GLF_FUZZED(_GLF_IDENTITY(93998, 0 + (93998)))))))); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), false)))))))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(false), false, true, false)), ! (! (bool(bvec4(_GLF_DEAD(false), false, true, false)))))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              barrier();
             continue;
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).y, injectionSwitch.y))))))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(0, 0 | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat2(cos(0.0), 0.0, 0.0, 1.0)), 1.0 * (determinant(mat2(_GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(min(cos(0.0), cos(0.0)), mix(float(_GLF_FUZZED(-819.534)), float(min(cos(0.0), cos(0.0))), bool(true)))), 0.0, 0.0, 1.0)))))), mix(float(_GLF_FUZZED(-6.3)), float(float(mat3x2(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(determinant(mat2(cos(_GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-57.41) : 0.0))) - 0.0)), 0.0, 0.0, 1.0)), 1.0 * (determinant(mat2(_GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(min(cos(0.0), cos(0.0)), mix(float(_GLF_FUZZED(-819.534)), float(min(cos(0.0), cos(0.0))), bool(true)))), 0.0, 0.0, 1.0))))))), bool(true))))); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != 1), (_GLF_WRAPPED_LOOP(_injected_loop_counter != 1)) || false); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> 0))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
       barrier();
      }
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec2(! (_GLF_DEAD(false)), true))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint next_virtual_gid = _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.z) * 1u))) + GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.w * _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, clamp(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, (false ? _GLF_FUZZED(uvec3(168251u, 182140u, 161631u)) : GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)), _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, max(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, uvec3(0u, 0u, 0u) ^ (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)), GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)))).x + ((_GLF_IDENTITY(subgroup_local_id + 1, ~ (~ (_GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(1u, min(_GLF_IDENTITY(1u, ~ (~ (1u))), _GLF_IDENTITY(1u, (1u) + 0u))), _GLF_IDENTITY(~ (~ (1u)), uint(uvec4(~ (_GLF_IDENTITY(~ (1u), ~ (~ (~ (1u))))), _GLF_IDENTITY(1u, _GLF_IDENTITY(uint(uvec2(1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), clamp(uint(uvec2(1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), uint(uvec2(1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u))))), uint(uvec2(1u, (0u >> _GLF_IDENTITY(uint(6u), uint(6u)))))))), 0u, 1u)))) * (subgroup_local_id)) + _GLF_IDENTITY(1, min(1, 1)))))) % _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x, _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x), max((_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base) >> uvec3(0u, 0u, 0u)), uvec3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)) ^ (_GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, min(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, _GLF_IDENTITY(GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base, uvec3(1u, 1u, 1u) * (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base)))))).x), (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x))) | _GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x), (_GLF_IDENTITY((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x), min((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x), (GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)))) | ((GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x = next_virtual_gid;
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      continue;
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))) && true))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(true && (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, vec2(vec3(_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))).y)))), ! (! (true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).y)))))))))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), bool(bvec3(! (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false))))), true, false))))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
        }
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
      return;
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4123.7635) : injectionSwitch.y)))), ! (! (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4123.7635) : injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-4123.7635) : injectionSwitch.y)))))))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     if(_GLF_DEAD(false))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x))), float(_GLF_FUZZED((-42.80))), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))) || false)))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(true, ! (! (true))) && (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         for(int _injected_loop_counter = _GLF_IDENTITY(((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3))), (((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), int(3)), (1 << _GLF_IDENTITY(int(3), int(3))) - 0)) >> _GLF_IDENTITY(int(3), int(3)))) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, 1.0 * (injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, float(mat4x3(_GLF_IDENTITY(injectionSwitch.x, 0.0 + (injectionSwitch.x)), 1.0, 1.0, abs(1.0), 0.0, 1.0, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0, 1.0)))))))); _injected_loop_counter --)
          {
           barrier();
          }
        }
      }
    }
   else
    {
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))) && true)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))) && true)), (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)), injectionSwitch)), _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)))).x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true)))))) && true))) || false))))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           barrier();
          }
         else
          {
          }
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     do
      {
       barrier();
       do
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x3(injectionSwitch.x, 0.0, 0.0, length(0.0), abs(0.0), 1.0))) > injectionSwitch.y))))
          break;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 1.0 * (injectionSwitch.y))))));
       if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), false, true))))
        barrier();
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(1.0)), transpose(transpose(mat3(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, abs(1.0))))))))).x < injectionSwitch.y))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), bool(bvec2(bool(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (injectionSwitch.x > injectionSwitch.y))))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec3(injectionSwitch, 0.0)), vec2(_GLF_IDENTITY(mat2x3(vec2(vec3(injectionSwitch, 0.0)), 0.0, 0.0, 1.0, 0.0), (false ? _GLF_FUZZED(mat2x3(4.0, 78.18, -8.3, 604.974, 9899.4674, -473.722)) : mat2x3(vec2(vec3(injectionSwitch, 0.0)), 0.0, 0.0, 1.0, 0.0)))))).x > injectionSwitch.y))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   for(int _injected_loop_counter = (((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), (_GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)), max(int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)), int(ivec2(_GLF_IDENTITY(int(3), int(3)), 0)))))) ^ 0)) | (0 >> _GLF_IDENTITY(int(6), int(6)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     barrier();
    }
  }
 uint read = atomicLoad(buf[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y], 4, _GLF_IDENTITY(64, _GLF_IDENTITY((_GLF_IDENTITY(64, (64) | (64))) - 0, (_GLF_IDENTITY(_GLF_IDENTITY((64) - 0, (false ? _GLF_FUZZED(-28953) : (64) - 0)), 0 ^ (_GLF_IDENTITY((64) - 0, (false ? _GLF_FUZZED(-28953) : (64) - 0))))) << (1 ^ 1))), 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   else
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
      {
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z = read;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true), ((injectionSwitch.x > injectionSwitch.y)) || false)))))))
  barrier();
 atomicStore(buf[GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.x], _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) ^ (0u ^ 0u), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5036.9070), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((+ (- 3943.7348)))), bvec2(true, false))).y)) ? _GLF_FUZZED(subgroup_size) : (uint(1)) ^ (0u ^ 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) - 0u)) ^ (0u ^ 0u)), (_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ 0u))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, (3u) | (3u))))), uint(3u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | 0u), 0u)))))), (_GLF_IDENTITY(uint(1), (uint(1)) ^ _GLF_IDENTITY((0u ^ 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : (0u ^ 0u))))) | (_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ 0u)))))), (104883u & 0u) | (_GLF_IDENTITY(_GLF_IDENTITY(uint(1), _GLF_IDENTITY((uint(1)) ^ (0u ^ 0u), (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5036.9070), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED((+ (- 3943.7348)))), bvec2(true, false))).y)) ? _GLF_FUZZED(subgroup_size) : (uint(1)) ^ (0u ^ 0u)))), min(_GLF_IDENTITY(_GLF_IDENTITY(uint(1), (_GLF_IDENTITY(uint(1), (uint(1)) - 0u)) ^ (0u ^ 0u)), (_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ 0u))) * ((1u << _GLF_IDENTITY(uint(3u), uint(3u))) >> _GLF_IDENTITY(uint(_GLF_IDENTITY(3u, (3u) | (_GLF_IDENTITY(3u, (3u) | (3u))))), uint(3u)))), _GLF_IDENTITY(_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ _GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | 0u), 0u)))))), (_GLF_IDENTITY(uint(1), (uint(1)) ^ _GLF_IDENTITY((0u ^ 0u), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : (0u ^ 0u))))) | (_GLF_IDENTITY(uint(1), (uint(1)) ^ (0u ^ 0u)))))))), 4, 64, _GLF_IDENTITY(4, (4) << 0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       barrier();
      }
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), true && (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | 0u) + _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), _GLF_IDENTITY((~ (1)) | (0 >> _GLF_IDENTITY(int(6), int(6))), _GLF_IDENTITY(((~ (1)) | (0 >> _GLF_IDENTITY(int(6), int(6)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)), (true ? ((~ (1)) | (0 >> _GLF_IDENTITY(int(_GLF_IDENTITY(6, clamp(6, 6, 6))), int(6)))) >> int(_GLF_ZERO(0.0, injectionSwitch.x)) : _GLF_FUZZED(69826))))))) < GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.x)
        {
         int i = _GLF_IDENTITY(0, (_GLF_IDENTITY(_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-35899) : 0)))), (_GLF_IDENTITY(0, min(0, _GLF_IDENTITY(0, (false ? _GLF_FUZZED(-35899) : 0))))) | 0)) | (_GLF_IDENTITY(_GLF_IDENTITY(0, 0 ^ (_GLF_IDENTITY(0, 0 ^ (0)))), _GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) >> (0 >> _GLF_IDENTITY(int(3), int(3))), (0 << _GLF_IDENTITY(int(8), int(8))) ^ (_GLF_IDENTITY((_GLF_IDENTITY(0, 0 ^ (0))) >> (0 >> _GLF_IDENTITY(_GLF_IDENTITY(int(3), int(3)), ~ (~ (_GLF_IDENTITY(int(3), int(3)))))), ((_GLF_IDENTITY(0, 0 ^ (0))) >> (0 >> _GLF_IDENTITY(int(3), int(3)))) << 0))))));
         for(int _injected_loop_counter = (int(_GLF_ONE(_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0, (0.0) - abs(0.0)) + (_GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, abs(1.0) * (_GLF_IDENTITY(1.0, 1.0 * (1.0))))) - 0.0))), injectionSwitch.y)) ^ 1); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(0, int(ivec4(0, 0, 1, 1)))), clamp(_GLF_IDENTITY(int(0), (false ? _GLF_FUZZED(87440) : int(0))), _GLF_IDENTITY(int(0), (int(0)) | 0), int(0))), _GLF_IDENTITY(int(0), ~ (_GLF_IDENTITY(~ (int(0)), clamp(~ (int(0)), ~ (int(0)), _GLF_IDENTITY(~ (int(0)), ~ (~ (_GLF_IDENTITY(~ (int(0)), min(~ (int(0)), ~ (int(0))))))))))))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_IDENTITY(0, ~ (~ (0))), max(0, 0))), int(0)))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) << _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), min(int(_GLF_ZERO(0.0, injectionSwitch.x)), int(_GLF_ZERO(0.0, injectionSwitch.x))))))
          {
           if(_GLF_DEAD(false))
            return;
           atomicStore(checker[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y], GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z, 4, _GLF_IDENTITY(64, _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(64, 0, (1 & 1)), ivec3(0, _GLF_IDENTITY(0, 1 * (0)), 0) | (ivec3(64, 0, (1 & 1))))), _GLF_IDENTITY((int(_GLF_IDENTITY(ivec3(64, 0, (1 & 1)), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, _GLF_IDENTITY(0, (0) | 0))) / ivec3(1, 1, 1)) | (ivec3(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(int(64))))), 0, (1 & 1)))))), ((int(_GLF_IDENTITY(ivec3(64, 0, (1 & 1)), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, _GLF_IDENTITY(0, (0) | 0))) / ivec3(1, 1, 1)) | (ivec3(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(int(64))))), 0, (1 & 1))))))) | ((int(_GLF_IDENTITY(ivec3(64, 0, (1 & 1)), _GLF_IDENTITY(ivec3(0, 0, 0), (ivec3(0, 0, _GLF_IDENTITY(0, (0) | 0))) / ivec3(1, 1, 1)) | (ivec3(_GLF_IDENTITY(64, max(64, _GLF_IDENTITY(64, int(int(64))))), 0, (1 & 1)))))))) * 1), (_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(64, 0, (_GLF_IDENTITY(1, (1) ^ 0) & 1)), ivec3(0, 0, 0) | (ivec3(64, 0, (1 & 1))))), (int(_GLF_IDENTITY(ivec3(64, 0, (1 & 1)), ivec3(0, 0, 0) | _GLF_IDENTITY((ivec3(64, 0, (1 & 1))), ivec3(ivec4((ivec3(64, 0, (1 & 1))), 1)))))) * 1)) >> 0)), 4);
          }
        }
       else
        {
         atomicStore(checker[GLF_merged3_0_1_13_1_1_11_2_1_14subgroup_sizevirtual_gidworkgroup_base.y], _GLF_IDENTITY(_GLF_IDENTITY(GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id, _GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id), ~ (~ (_GLF_IDENTITY((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id), ~ (~ ((GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id))))))) >> uvec4(0u, 0u, 0u, _GLF_IDENTITY(0u, _GLF_IDENTITY(uint(uint(_GLF_IDENTITY(0u, max(0u, 0u)))), (uint(uint(_GLF_IDENTITY(0u, max(0u, 0u))))) | 0u)))).z, uint(_GLF_ZERO(0.0, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), (injectionSwitch) / vec2(1.0, 1.0)).x, min(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true))) ? injectionSwitch.x : _GLF_FUZZED(-57.54))), float(vec3(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(_GLF_IDENTITY(true, false || (true)), ! (! (true))) ? injectionSwitch.x : _GLF_FUZZED(-57.54))), 1.0, 0.0))))), clamp(_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(round(35.78)) : injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-803.062)), bool(false))) : _GLF_FUZZED(_GLF_IDENTITY(-57.54, max(-57.54, _GLF_IDENTITY(-57.54, (true ? -57.54 : _GLF_FUZZED(-893.250)))))))))), _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x : _GLF_FUZZED(-57.54)))), float(_GLF_IDENTITY(mat4x3(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x : _GLF_FUZZED(-57.54)))), 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0), (mat4x3(min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - sin(vec2(0.0, 0.0))))).x : _GLF_FUZZED(-57.54)))), 1.0, 1.0, 1.0, sin(0.0), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) - mat4x3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))))), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(true ? injectionSwitch.x : _GLF_FUZZED(-57.54), clamp(true ? injectionSwitch.x : _GLF_FUZZED(-57.54), true ? injectionSwitch.x : _GLF_FUZZED(-57.54), true ? injectionSwitch.x : _GLF_FUZZED(_GLF_IDENTITY(-57.54, (true ? -57.54 : _GLF_FUZZED(-9764.0900)))))))))))))) | (GLF_merged4_0_1_16_1_1_13_2_1_4_3_1_11next_virtual_gidnum_workgroupreadsubgroup_id.z)), 4, 64, 4);
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))))
          {
           do
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
         if(_GLF_DEAD(false))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             barrier();
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
              {
              }
             else
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                }
              }
             if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
              barrier();
            }
          }
         else
          {
          }
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec3(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false)))))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), true), bvec2(bvec2(bvec2(_GLF_DEAD(false), true)))))))
          {
           if(_GLF_DEAD(false))
            return;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), ((false)) || false))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (((0 ^ 1) << _GLF_IDENTITY(int(2), int(_GLF_IDENTITY(2, (true ? _GLF_IDENTITY(2, max(2, 2)) : _GLF_FUZZED(bitCount(-69647))))))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
            }
           if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true && (bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))), true, false), bvec3(bvec4(bvec3(bool(bvec4(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)), true, false), false)))))), (false) && true)))))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, bool(bvec2(false, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, true && (true)))))))
              return;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(8), int(8))), ((0 >> _GLF_IDENTITY(int(8), int(8)))) << 0)); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             barrier();
            }
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, bool(bool(false))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)), max(injectionSwitch, injectionSwitch)).y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0)))), true && (bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))))))), _GLF_IDENTITY(! (! (bool(bool(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), _GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false, false, false)), (bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) / 1.0))), false, false, false))) || false))))))))), true && (! (! (bool(bool(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.6)), float(injectionSwitch.y), bool(true)))) / 1.0), bool(bvec2(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(1.6)), float(injectionSwitch.y), bool(true)))) / 1.0), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 barrier();
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y))))
              return;
             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) | (_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(min(_GLF_IDENTITY(_injected_loop_counter, _GLF_IDENTITY(0 + (_injected_loop_counter), 0 ^ (0 + (_injected_loop_counter)))), _injected_loop_counter), (min(_GLF_IDENTITY(_injected_loop_counter, 0 + (_injected_loop_counter)), _injected_loop_counter)) / 1)))) != 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, false)), ! (! (_GLF_IDENTITY(bool(bvec3(false, false, false)), false || (bool(bvec3(false, false, false))))))))))
                {
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
               if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), bool(bool(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), true && ((_GLF_IDENTITY(false, ! (! (false))))))))))))))))
                  barrier();
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) - 0) > 0); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     barrier();
                    }
                   barrier();
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, sin(length(0.0)), 1.0), (mat2x4(injectionSwitch, 0.0, 0.0, 0.0, 1.0, sin(length(0.0)), 1.0)) * mat2(1.0)))).y))))
                  barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x > injectionSwitch.y))))
                barrier();
               barrier();
               do
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (! (false)))))))
                  {
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     return;
                    }
                   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   barrier();
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     barrier();
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, true)))))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   barrier();
                  }
                 else
                  {
                  }
                }
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             do
              {
               if(_GLF_DEAD(false))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true))));
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (false ? _GLF_FUZZED(7883.4019) : _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y) / 1.0)))))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               barrier();
              }
             else
              {
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))) || false), false || (_GLF_IDENTITY(false, bool(bvec3(false, false, true)))))))
                barrier();
               barrier();
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            barrier();
           return;
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
          }
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, _GLF_IDENTITY((false), ! (! (_GLF_IDENTITY((false), _GLF_IDENTITY(bool(bvec3((false), false, true)), bool(bvec2(bool(bvec3((false), false, true)), true))))))) || false))))))
              barrier();
             barrier();
            }
          }
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && true)))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
      barrier();
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false)))), (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, (false) || false)))))
        barrier();
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           barrier();
          }
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
            {
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
         else
          {
          }
        }
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bool(false)), ! (! (bool(bool(false))))))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false)), false || (bool(bvec2(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), false))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   do
    {
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
