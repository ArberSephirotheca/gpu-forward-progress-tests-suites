#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_17 {
 uint next_virtual_gid;
 float _f0;
} ;

struct _GLF_struct_18 {
 _GLF_struct_17 _f0;
} ;

struct _GLF_struct_15 {
 uvec3 _f0;
 vec3 _f1;
 int _f2;
 mat4 _f3;
 mat4 _f4;
} ;

struct _GLF_struct_14 {
 ivec4 _f0;
 uvec3 _f1;
} ;

struct _GLF_struct_13 {
 mat2 _f0;
 int _f1;
 ivec2 _f2;
 mat4 _f3;
} ;

struct _GLF_struct_12 {
 mat2x3 _f0;
 bvec2 _f1;
 ivec3 _f2;
 uint _f3;
 mat4x3 _f4;
 ivec2 _f5;
} ;

struct _GLF_struct_16 {
 _GLF_struct_12 _f0;
 _GLF_struct_13 _f1;
 _GLF_struct_14 _f2;
 _GLF_struct_15 _f3;
 bvec3 _f4;
 vec4 _f5;
 mat3x4 _f6;
} ;

struct _GLF_struct_11 {
 bvec2 _f0;
 bvec3 _f1;
} ;

struct _GLF_struct_9 {
 mat2x4 _f0;
 mat2 _f1;
 float _f2;
 mat3x2 _f3;
} ;

struct _GLF_struct_8 {
 mat2x4 _f0;
 vec4 _f1;
 uint _f2;
 mat3x2 _f3;
 vec2 _f4;
} ;

struct _GLF_struct_7 {
 mat4 _f0;
 uvec2 _f1;
 vec3 _f2;
 vec2 _f3;
 mat4x3 _f4;
 uint _f5;
 vec2 _f6;
} ;

struct _GLF_struct_10 {
 _GLF_struct_7 _f0;
 ivec2 _f1;
 mat3 _f2;
 _GLF_struct_8 _f3;
 bool _f4;
 _GLF_struct_9 _f5;
} ;

struct _GLF_struct_19 {
 _GLF_struct_10 _f0;
 _GLF_struct_11 _f1;
 _GLF_struct_16 _f2;
 uint _f3;
 ivec2 _f4;
 _GLF_struct_18 _f5;
} ;

struct _GLF_struct_6 {
 mat2x4 _f0;
 int _f1;
 uint workgroup_id;
} ;

struct _GLF_struct_3 {
 bvec4 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_2 {
 ivec4 _f0;
 bool _f1;
 uint virtual_gid;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
} ;

struct _GLF_struct_0 {
 mat4x2 _f0;
 vec4 _f1;
 ivec2 _f2;
 ivec3 _f3;
 uint _f4;
 uvec3 _f5;
} ;

struct _GLF_struct_4 {
 _GLF_struct_0 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
 float _f1;
 uvec4 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     for(int _injected_loop_counter = (((1 ^ 0) << _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (int(5))))) >> _GLF_IDENTITY(int(5), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter > (38733 & 0)); _injected_loop_counter --)
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
      }
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   else
    {
    }
   if(_GLF_DEAD(false))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = _GLF_IDENTITY(gl_NumWorkGroups.x, min(gl_NumWorkGroups.x, gl_NumWorkGroups.x));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true)))), _GLF_IDENTITY(true && (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))))), ! (! (true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec3(bvec3(true, false, false)))), true)))), (bool(_GLF_IDENTITY(bvec3(true, false, false), bvec3(bvec4(bvec3(true, false, false), true))))) || false))))))) && (false)))), (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat2x4(injectionSwitch, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0)), vec2(mat4x3(_GLF_IDENTITY(vec2(mat2x4(injectionSwitch, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0)), mat2(1.0) * (vec2(mat2x4(injectionSwitch, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0)))), 1.0, 1.0, sqrt(0.0), cos(0.0), 0.0, 0.0, 0.0, 0.0, exp(0.0), tan(0.0))))).y, mix(float(_GLF_IDENTITY(_GLF_FUZZED(338.920), (false ? _GLF_FUZZED(determinant(mat4(-2.1, -5977.1987, 9155.7456, 531.159, 126.658, 8.6, -1.1, -865.835, 360.596, -4307.2845, 23.85, 0.9, -4848.3313, 7.3, -24.86, 6.3))) : _GLF_FUZZED(338.920)))), float(_GLF_IDENTITY(injectionSwitch, vec2(mat2x4(injectionSwitch, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 1.0))).y), bool(true)))))))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_6 _GLF_struct_replacement_6 = _GLF_struct_6(mat2x4(1.0), 1, _GLF_IDENTITY(gl_WorkGroupID.x, (_GLF_IDENTITY(gl_WorkGroupID, (gl_WorkGroupID) | (gl_WorkGroupID)).x) - 0u));
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
    }
   else
    {
    }
  }
 uint workgroup_base = workgroup_size * _GLF_struct_replacement_6.workgroup_id;
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_4(_GLF_struct_0(mat4x2(1.0), vec4(1.0), ivec2(_GLF_IDENTITY(1, _GLF_IDENTITY((1) << 0, max(_GLF_IDENTITY((1), ((1)) << 0) << 0, _GLF_IDENTITY((1) << 0, ~ (~ (_GLF_IDENTITY((1) << 0, ((1) << 0) << 0)))))))), ivec3(1), 1u, uvec3(1u)), _GLF_struct_1(_GLF_IDENTITY(ivec3(1), (ivec3(1)) >> ivec3(0, 0, 0))), _GLF_struct_2(ivec4(1), true, workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u))) + subgroup_local_id), _GLF_struct_3(bvec4(true), bvec2(true))), 1.0, uvec4(1u));
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_19 _GLF_struct_replacement_19 = _GLF_struct_19(_GLF_struct_10(_GLF_struct_7(mat4(1.0), uvec2(1u), vec3(_GLF_IDENTITY(1.0, min(1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-9528.7535)), bool(false)))))), vec2(1.0), mat4x3(1.0), _GLF_IDENTITY(1u, clamp(1u, 1u, 1u)), vec2(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, min(1.0, 1.0))), float(_GLF_FUZZED(-7.1)), bool(false))))), _GLF_IDENTITY(ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(float(injectionSwitch.y)), float(mat4x2(float(float(injectionSwitch.y)), 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))), false, false))) ? 1 : _GLF_FUZZED(-86024)))), min(ivec2(_GLF_IDENTITY(1, (true ? _GLF_IDENTITY(1, max(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) << 0), 1)) : _GLF_FUZZED(-86024)))), ivec2(_GLF_IDENTITY(1, (_GLF_IDENTITY(true, false || (true)) ? 1 : _GLF_FUZZED(-86024)))))), mat3(_GLF_IDENTITY(_GLF_IDENTITY(1.0, max(1.0, 1.0)), max(1.0, 1.0))), _GLF_struct_8(mat2x4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) * mat4(1.0)), min(vec4(1.0), vec4(1.0))), 1u, mat3x2(1.0), vec2(1.0)), true, _GLF_struct_9(mat2x4(1.0), mat2(1.0), _GLF_IDENTITY(1.0, (1.0) * 1.0), mat3x2(1.0))), _GLF_struct_11(bvec2(true), bvec3(true)), _GLF_struct_16(_GLF_struct_12(mat2x3(1.0), bvec2(true), ivec3(1), 1u, mat4x3(1.0), ivec2(1)), _GLF_struct_13(mat2(1.0), 1, ivec2(1), mat4(1.0)), _GLF_struct_14(ivec4(1), uvec3(1u)), _GLF_struct_15(uvec3(1u), vec3(1.0), 1, _GLF_IDENTITY(mat4(1.0), (false ? _GLF_FUZZED(mat4(-1.4, 2673.8323, 6.3, 7.8, -9.9, -3.9, 1.7, -9741.4282, -4.9, 2.4, -14.44, -5.7, _GLF_IDENTITY(504.346, mix(float(_GLF_FUZZED(_GLF_IDENTITY(vec2(-5.9, 808.869).s, (vec2(-5.9, 808.869).s) - 0.0))), float(504.346), bool(true))), 0.4, -2513.4058, 6.0)) : mat4(1.0))), mat4(1.0)), bvec3(true), vec4(1.0), mat3x4(1.0)), 1u, ivec2(1), _GLF_struct_18(_GLF_struct_17(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) | 0u) + ((subgroup_local_id + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, min(1, 1))) / _GLF_IDENTITY(1, int(ivec4(1, (0 >> _GLF_IDENTITY(int(3), int(3))), 1, ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0)))))))) % subgroup_size), 1.0)));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 do
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         do
          {
           if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))), true && (_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), false || (false)), bool(bvec4(false, true, true, false)))))))
            {
            }
           else
            {
             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
              }
             else
              {
               barrier();
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       do
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         else
          {
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       do
        {
         if(_GLF_DEAD(false))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        {
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         barrier();
        }
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(false));
 uint read = atomicLoad(buf[_GLF_struct_replacement_5._f0._f2.virtual_gid], 4, 64, 0);
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))
      {
       do
        {
         do
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), bool(bvec4(bool(bvec3(false, false, true)), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), _GLF_IDENTITY(_GLF_IDENTITY(true, ! (! (true))) && (_GLF_IDENTITY(false, true && (false))), true && (_GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(false, true && (false))), bool(bvec3(true && (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), bool(bvec2(_GLF_IDENTITY(false, true && (false)), false)))), false, false))))))))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            {
             for(int _injected_loop_counter = (int(_GLF_ZERO(0.0, injectionSwitch.x)) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) >> 0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2)))); _injected_loop_counter ++)
              {
               barrier();
              }
            }
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       atomicStore(buf[_GLF_struct_replacement_19._f5._f0.next_virtual_gid], uint(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), ~ (~ (_GLF_IDENTITY(1, (1) | (1)))))), 4, 64, 4);
      }
     else
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
            }
           else
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            {
             do
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), min(int(4), int(4)))))); _injected_loop_counter --)
                {
                 barrier();
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           barrier();
          }
        }
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), true, false))))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true && (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true && (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), bool(bvec4(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false)))))), true && (bool(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))))))), true, false, false)))) || false))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 for(int _injected_loop_counter = (1 & 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (true ? _GLF_IDENTITY(1, (1) | (1)) : _GLF_FUZZED(5450)))) ^ 0), _GLF_IDENTITY(1, (1) | (1))))) ^ ((0 | 0) >> _GLF_IDENTITY(int(7), int(7)))) < subgroup_size)
      {
       int i = 0;
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(_GLF_IDENTITY(1.0, min(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, 0.0 + (1.0)))), clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3(_GLF_IDENTITY((vec3(1.0, 1.0, 1.0))[0], min((vec3(1.0, 1.0, 1.0))[0], (vec3(1.0, 1.0, 1.0))[0])), _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), 1.0), transpose(transpose(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), 1.0), (mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, min(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, _GLF_IDENTITY(1.0, max(1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0))), 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), 1.0)))), 1.0)) / mat4(1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0)))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(exp(0.0), (exp(0.0)) - abs(0.0)))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(313.973) : 1.0)), 1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, _GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat4x2(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0)), min(float(mat4x2(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0)), float(mat4x2(0.0, 1.0, 1.0, 0.0, abs(1.0), 1.0, 1.0, 0.0))))), 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, min(0.0, 0.0))) * 1.0), 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0))), 0.0 + (_GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0))), min(dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0))), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))))))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0)))))))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(exp(0.0), min(exp(0.0), _GLF_IDENTITY(exp(0.0), float(mat3x4(_GLF_IDENTITY(exp(0.0), 0.0 + (exp(0.0))), exp(0.0), _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, determinant(mat4(1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), round(length(normalize(vec3(1.0, 1.0, 1.0)))), 0.0))))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-84.77)), bool(false))), exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(acosh(-8993.5823)))), 1.0, 0.0, exp(0.0)), (vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)) : _GLF_FUZZED(acosh(-8993.5823)))), 1.0, 0.0, exp(0.0))) * mat4(1.0))), _GLF_IDENTITY((_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), mix(float(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), float(_GLF_FUZZED(-79.12)), bool(false)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (_GLF_IDENTITY(vec3(0.0, 0.0, 0.0), (vec3(0.0, 0.0, 0.0)) + vec3(0.0, 0.0, 0.0))) + vec3(0.0, 0.0, 0.0)), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_IDENTITY(_GLF_FUZZED(-51.58), (_GLF_FUZZED(-51.58)) * 1.0)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(_GLF_IDENTITY(vec3(1.0, 1.0, 0.0), mix(vec3((vec3(1.0, 1.0, 0.0))[0], (vec3(1.0, 1.0, 0.0))[1], _GLF_FUZZED(-899.470)), vec3(_GLF_FUZZED(84.04), _GLF_FUZZED((9043.5715 / -0.4)), (vec3(1.0, 1.0, 0.0))[2]), bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true))), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0))))))))) || false)), true && (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, cos(vec2(0.0, 0.0)) * (injectionSwitch)).y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(886.392) : _GLF_IDENTITY(_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0)))), 1.0 * (_GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), max(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), _GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), _GLF_IDENTITY((vec3(1.0, 1.0, 1.0)), min((vec3(1.0, 1.0, 1.0)), (vec3(1.0, 1.0, 1.0))))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0)))))))))))), ((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))) + 0.0)), float(_GLF_FUZZED(-68.52)), bool(false))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(mat4((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, determinant(_GLF_IDENTITY(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(0.0), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0), transpose(transpose(mat4(sqrt(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, 1.0, cos(_GLF_IDENTITY(0.0, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0.0 : _GLF_FUZZED(15.53)))), 0.0, 0.0, 0.0, 1.0, sqrt(_GLF_IDENTITY(1.0, min(1.0, 1.0))), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), _GLF_IDENTITY(vec3(1.0, 1.0, 1.0), (_GLF_IDENTITY(vec3(1.0, 1.0, 1.0), mix(vec3(_GLF_FUZZED(38.33), (vec3(1.0, 1.0, 1.0))[1], _GLF_FUZZED(-51.58)), vec3((vec3(1.0, 1.0, 1.0))[0], _GLF_FUZZED((-3.2 - 108.234)), (vec3(1.0, 1.0, 1.0))[2]), bvec3(true, false, true)))) / vec3(1.0, 1.0, 1.0)))), 1.0))))), 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, 0.0, 1.0))), 0.0, 1.0, 1.0))))))))) || false))))))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), _GLF_IDENTITY(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(48.12)), bool(false))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0)), mix(float(_GLF_FUZZED(-66.59)), _GLF_IDENTITY(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-99.19)))))), clamp(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(5.5), _GLF_FUZZED(754.049)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y)), 1.0, 0.0, exp(0.0)))) + 0.0))), _GLF_IDENTITY(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0))), mix(float(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2263.0384), _GLF_FUZZED(-7.6)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))).y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0)))), float(_GLF_FUZZED(-23.44)), bool(false))), float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), mix(float(_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), min((_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))))), float(_GLF_FUZZED(60.82)), bool(false)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, _GLF_IDENTITY(exp(0.0), max(_GLF_IDENTITY(exp(0.0), mix(float(_GLF_FUZZED(-7.8)), float(exp(0.0)), bool(true))), _GLF_IDENTITY(exp(0.0), min(exp(0.0), exp(0.0))))))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0))))), bool(true))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0))), injectionSwitch.y)), 1.0, 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), mix(float(min(injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-706.832)), bool(false)))), 1.0, 0.0, exp(0.0)))) + 0.0)))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), min(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))) + 0.0), 1.0, 0.0, exp(0.0))), mix(float(_GLF_FUZZED(-7458.9516)), float(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), bool(true))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), max(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (min(injectionSwitch.y, injectionSwitch.y)) / 1.0))), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)))) + 0.0)))))))))) || false), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 1.0))))) > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, float(_GLF_IDENTITY(mat3(injectionSwitch.y, 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0), (mat3(injectionSwitch.y, 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0, cos(0.0), 1.0)) - mat3(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0)), mix(float(_GLF_FUZZED(-66.59)), _GLF_IDENTITY(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0))), clamp(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch))) / vec2(1.0, 1.0)).y, min(injectionSwitch.y, injectionSwitch.y)), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(98.00)), float(0.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0))), _GLF_IDENTITY(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0 * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_IDENTITY((injectionSwitch)[0], ((injectionSwitch)[0]) + 0.0), (injectionSwitch)[1]), vec2(_GLF_FUZZED(585.987), _GLF_FUZZED(-95.16)), bvec2(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))).y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0))), mix(float(float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), mix(float(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))), float(_GLF_FUZZED(15.38)), bool(false))), 1.0, 0.0, exp(0.0)))) + 0.0)))), _GLF_IDENTITY(float(_GLF_FUZZED(-23.44)), 1.0 * (float(_GLF_FUZZED(-23.44)))), bool(false))), float(clamp(float(vec4(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 0.0 + (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))), float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, float(_GLF_IDENTITY(mat4x2((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), (true ? _GLF_IDENTITY(mat4x2((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0), transpose(transpose(mat4x2((float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))) + 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) : _GLF_FUZZED((- mat4x2(9.6, -1.6, 6624.2951, 62.06, -274.082, 7.5, -3.9, -807.031)))))))))))), bool(true))))))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, float(mat2(injectionSwitch.y, 1.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(0.0, 1.0, 1.0))), 1.0))), injectionSwitch.y)), 1.0, 0.0, exp(0.0))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)), mat4(1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0))))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), mix(float(min(injectionSwitch.y, injectionSwitch.y)), float(_GLF_FUZZED(-706.832)), bool(false)))), _GLF_IDENTITY(1.0, max(1.0, 1.0)), 0.0, exp(0.0)))) + 0.0)))))), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), mix(float(_GLF_FUZZED(-7458.9516)), float(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), bool(true))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)))) + 0.0))), clamp(_GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), mix(float(_GLF_FUZZED(-7458.9516)), float(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), bool(true))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)))) + 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), mix(float(_GLF_FUZZED(-7458.9516)), float(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), bool(true))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)))) + 0.0))), _GLF_IDENTITY(float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)), vec4(1.0, 1.0, 1.0, 1.0) * (vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))))), clamp(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), mix(float(_GLF_FUZZED(-7458.9516)), float(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0)))), bool(true))), _GLF_IDENTITY(float(vec4(_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)), 1.0, 0.0, exp(0.0))), (float(vec4(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), min(injectionSwitch.y, injectionSwitch.y)))), 1.0, 0.0, exp(0.0)))) + 0.0)))))))))))) || false), true, false, false))), false)))))
            {
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             barrier();
             do
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                 if(_GLF_DEAD(false))
                  barrier();
                 barrier();
                }
              }
             while(_GLF_WRAPPED_LOOP(false));
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               if(_GLF_DEAD(false))
                barrier();
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y), ! (! ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y))))))))))));
             barrier();
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             if(_GLF_DEAD(false))
              {
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, max(0, 0))); _injected_loop_counter --)
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                  {
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                 if(_GLF_DEAD(false))
                  barrier();
                 do
                  {
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       do
                        {
                         barrier();
                         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                          barrier();
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          barrier();
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  barrier();
                }
               barrier();
               if(_GLF_DEAD(false))
                barrier();
              }
            }
           else
            {
            }
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             barrier();
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 barrier();
                }
               while(_GLF_WRAPPED_LOOP(false));
              }
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), _GLF_IDENTITY((false ? _GLF_FUZZED(i) : int(3)), clamp((false ? _GLF_FUZZED(i) : int(3)), (false ? _GLF_FUZZED(i) : int(3)), _GLF_IDENTITY((false ? _GLF_FUZZED(i) : int(3)), (true ? (false ? _GLF_FUZZED(i) : int(3)) : _GLF_FUZZED(4129)))))))) >> _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter ++)
          {
           atomicStore(checker[_GLF_struct_replacement_5._f0._f2.virtual_gid], read, 4, 64, 4);
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))), false || (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).y, mix(float(_GLF_FUZZED(8.6)), float(injectionSwitch.y), bool(true))), injectionSwitch.y)))))))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
                barrier();
              }
             else
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(4), _GLF_IDENTITY(int(4), (int(4)) ^ 0))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(4, int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), 1.0 * _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(0.8)), bool(false))), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))), float(_GLF_FUZZED(float(19595u))), bool(false)))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(0.8)), bool(false))), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))), float(_GLF_FUZZED(float(19595u))), bool(false)))), float(mat4((_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), mix(float(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), max(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x)))), float(_GLF_FUZZED(0.8)), bool(false))), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - _GLF_IDENTITY(0.0, (_GLF_IDENTITY(0.0, (0.0) * 1.0)) - abs(0.0))), _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (_GLF_ZERO(0.0, injectionSwitch.x)) - 0.0)))), float(_GLF_FUZZED(float(19595u))), bool(false)))), 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0)))) + log(1.0)))) ^ (4))), int(4)))); _injected_loop_counter ++)
                  {
                   do
                    {
                     if(_GLF_DEAD(false))
                      barrier();
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                    {
                     barrier();
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) | (_GLF_IDENTITY(int(5), int(ivec4(int(5), 1, 0, 0)))))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
               else
                {
                }
              }
            }
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
          barrier();
        }
       else
        {
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(5), int(5))) >> _GLF_IDENTITY(int(5), int(5)))); _injected_loop_counter ++)
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
              }
             else
              {
               if(_GLF_DEAD(false))
                barrier();
               for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  {
                   for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(0, ~ (~ (_GLF_IDENTITY(0, max(0, 0)))))); _injected_loop_counter --)
                      {
                       barrier();
                      }
                    }
                  }
                }
              }
             if(_GLF_WRAPPED_IF_FALSE(false))
              {
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
                {
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), ! (! (_GLF_IDENTITY(false, (false) && true))))))
                    {
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       barrier();
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(false))
                        barrier();
                       if(_GLF_DEAD(false))
                        barrier();
                       barrier();
                      }
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     do
                      {
                       barrier();
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        barrier();
                       if(_GLF_DEAD(false))
                        {
                         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED((+ 8.1)) : _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(dot(vec2(0.0, 1.0), vec2(0.0, 1.0)), dot(vec2(0.0, 1.0), vec2(0.0, 1.0))) * (_GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y))))))))))
                          {
                           barrier();
                          }
                         else
                          {
                          }
                        }
                       do
                        {
                         if(_GLF_WRAPPED_IF_FALSE(false))
                          {
                          }
                         else
                          {
                           if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
                            {
                             if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                {
                                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                                  {
                                   if(_GLF_WRAPPED_IF_FALSE(false))
                                    {
                                    }
                                   else
                                    {
                                     barrier();
                                    }
                                  }
                                 barrier();
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(false))
                    barrier();
                  }
                }
               else
                {
                }
              }
             else
              {
               if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), false, false, false))))
                {
                 do
                  {
                   barrier();
                  }
                 while(_GLF_WRAPPED_LOOP(false));
                }
               else
                {
                 if(_GLF_DEAD(false))
                  barrier();
                }
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 barrier();
                }
               else
                {
                }
              }
            }
           if(_GLF_DEAD(false))
            {
             do
              {
               barrier();
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))) && true))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(mat3x4(injectionSwitch.x, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0))), _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0))) > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false)), ! (! (bool(bvec3(_GLF_WRAPPED_IF_FALSE(false), true, false))))))) || false))
        {
        }
       else
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           else
            {
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       atomicStore(checker[_GLF_struct_replacement_5._f0._f2.virtual_gid], read, _GLF_IDENTITY(4, clamp(4, 4, 4)), 64, 4);
      }
    }
   else
    {
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), max(_GLF_IDENTITY(int(1), (int(1)) ^ 0), int(1)))))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), ! (_GLF_IDENTITY(! (bool(bvec2(false, true))), true && (_GLF_IDENTITY(! (bool(bvec2(false, true))), bool(bvec3(! (bool(bvec2(false, true))), true, false))))))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
       barrier();
      }
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 0

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
