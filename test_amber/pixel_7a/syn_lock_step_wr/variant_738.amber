#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_1 {
 mat4 _f0;
 mat4x2 _f1;
 uint subgroup_local_id;
} ;

struct _GLF_struct_0 {
 mat3x4 _f0;
 uint subgroup_size;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec2(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true))))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
     return;
    }
   if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), bool(bvec4(_GLF_WRAPPED_IF_TRUE(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false, false))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (! (true)))))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)))), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true)))))
        barrier();
       if(_GLF_DEAD(false))
        return;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))
  {
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) + 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec3(true, false, false)))))
      {
       return;
      }
     else
      {
      }
    }
   do
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, true, false)), (bool(bvec3(false, true, false))) || false))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     barrier();
    }
   return;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(mat3x4(1.0), gl_SubgroupSize);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(5.0))))) > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != ((1 ^ 1) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
      }
     for(int _injected_loop_counter = _GLF_IDENTITY((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))), (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))), (_GLF_IDENTITY((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))), min((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))), (0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0)))))) | ((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0)))))) | ((0 | _GLF_IDENTITY(0, max(_GLF_IDENTITY(0, max(0, 0)), 0))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, 0 | (_GLF_IDENTITY(_injected_loop_counter, int(ivec3(_injected_loop_counter, 1, 1))))) < 1); _injected_loop_counter ++)
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true, false)))), bool(_GLF_IDENTITY(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true, false))))), bool(bool(bool(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), bool(bvec3(! (_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), true, false)))))))))))))
          barrier();
        }
       else
        {
        }
      }
    }
  }
 _GLF_struct_1 _GLF_struct_replacement_1 = _GLF_struct_1(_GLF_IDENTITY(_GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(99.13))), 0.0, 0.0, 0.0))) - mat4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(448.765)))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)), (true ? _GLF_IDENTITY(mat4(1.0), (_GLF_IDENTITY(mat4(1.0), (mat4(1.0)) - _GLF_IDENTITY(mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1794.9457)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(99.13))), 0.0, 0.0, 0.0), (mat4(_GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(-1794.9457)), bool(false))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(99.13))), 0.0, 0.0, 0.0)) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))) - mat4(0.0, _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(_GLF_IDENTITY(9.4, (true ? 9.4 : _GLF_FUZZED(448.765)))))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, _GLF_IDENTITY(0.0, float(mat2x4(0.0, 1.0, _GLF_IDENTITY(dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0)), dot(vec4(0.0, 1.0, 0.0, 0.0), vec4(determinant(mat4(1.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 1.0))), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0))), 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) : _GLF_FUZZED(mat4(-436.428, -7.3, 40.94, _GLF_IDENTITY(0.6, min(0.6, _GLF_IDENTITY(0.6, (0.6) - 0.0))), -91.31, 607.597, -580.236, -87.25, -44.34, -197.755, 20.18, 62.75, -57.40, 4403.1014, -6.6, -9129.8418)))), mat4x2(1.0), gl_SubgroupInvocationID);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       continue;
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, false))))))))
      barrier();
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false))))) || false), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0) > injectionSwitch.y)), ! _GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec3(bvec2(false, true), true))))) || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), (bool(_GLF_IDENTITY((_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false || (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))) || false)), (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false || (_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec2(! (bool(_GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false || ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), true)))))) || false))) && true)), ((! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (_GLF_IDENTITY(! ((injectionSwitch.x > injectionSwitch.y)), ! (! (! ((injectionSwitch.x > injectionSwitch.y))))))))))) || false))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
        return;
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))))))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec2(_GLF_IDENTITY(bvec2(_GLF_DEAD(false), false), bvec2(bvec3(bvec2(_GLF_DEAD(false), false), false)))))))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             continue;
             if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (_GLF_IDENTITY(false, bool(bool(false)))) && true)))
              barrier();
            }
           continue;
           if(_GLF_DEAD(false))
            barrier();
          }
         return;
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false || (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), _GLF_IDENTITY(bool(bvec3(_GLF_IDENTITY(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))), injectionSwitch, injectionSwitch)).y))), false || (false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(injectionSwitch))).x > _GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), _GLF_IDENTITY((injectionSwitch), clamp(_GLF_IDENTITY((injectionSwitch), min((injectionSwitch), (injectionSwitch))), (injectionSwitch), (injectionSwitch))))), min((injectionSwitch), (injectionSwitch)))).y))))), false, false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! (! (bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(_GLF_IDENTITY(false, (false) && true) || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))), false, false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bvec4(bool(bool(injectionSwitch.x < injectionSwitch.y)), true, false, true))))))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), false || ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))))))))) || false)) || false), true)), ! (! (_GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))), false, false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bvec4(bool(bool(injectionSwitch.x < injectionSwitch.y)), true, false, true))))))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), false || ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))))))))) || false)) || false), true)), true && (bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), bvec3(bvec3(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), _GLF_IDENTITY(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(_GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))), false, false), true)), true))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || _GLF_IDENTITY((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y)))))))))), ! (! ((_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(bool(bool(injectionSwitch.x > injectionSwitch.y)), true && (bool(bool(injectionSwitch.x > injectionSwitch.y))))))))))))), false, false))))))))), (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), true)), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, _GLF_IDENTITY(bool(bool(injectionSwitch.x < injectionSwitch.y)), bool(bvec4(bool(bool(injectionSwitch.x < injectionSwitch.y)), true, false, true))))))))))), ! _GLF_IDENTITY(_GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))), ! (! (! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))))), _GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), ! (! (_GLF_IDENTITY((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))))))))), false || ((! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false || (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0))) > injectionSwitch.y))), false, false), _GLF_IDENTITY(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y))))), false, false), true)), bvec3(bvec4(bvec3(bvec4(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false), _GLF_IDENTITY(true, ! (! (true))))), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)).x < injectionSwitch.y))))))), ! _GLF_IDENTITY((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false)))), ! (! ((! (bool(bvec3(false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false))))))))))))))) || false)) || false), true))))))))))))));
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           return;
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
        }
      }
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec4(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))), true, false, true)))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), true && (bool(bvec3(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)))))))))
    return;
   return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false))))) || false))
      barrier();
    }
   else
    {
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 do
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, 1.0, exp(0.0))), (false ? _GLF_FUZZED(vec2(6492.0448, 75.41)) : vec2(vec4(injectionSwitch, 1.0, exp(0.0))))))[0], injectionSwitch[1])), injectionSwitch)), injectionSwitch)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            return;
          }
         else
          {
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, false || (false)), true, true)))))
      break;
    }
   if(_GLF_DEAD(false))
    return;
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    barrier();
   if(_GLF_DEAD(false))
    break;
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false)))))))), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, false))))), true && (bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, _GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) || false), false)))))))))))))
    barrier();
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   return;
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_0.subgroup_size + _GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, 0u | _GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id))), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id))), max((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id))), (_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id)))))) ^ (0u & 50641u)));
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY((_GLF_IDENTITY(~ (subgroup_id), max(~ (subgroup_id), _GLF_IDENTITY(~ (subgroup_id), (~ (subgroup_id)) << 0u)))), ~ _GLF_IDENTITY((~ _GLF_IDENTITY(((~ (subgroup_id))), max(((~ (subgroup_id))), ((~ (subgroup_id)))))), 0u | (_GLF_IDENTITY((~ _GLF_IDENTITY(((~ (_GLF_IDENTITY(subgroup_id, ~ (_GLF_IDENTITY(~ (subgroup_id), ~ (~ (~ (subgroup_id))))))))), max(((~ _GLF_IDENTITY((subgroup_id), ((subgroup_id)) << 0u))), ((~ (subgroup_id)))))), ((~ _GLF_IDENTITY((_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))), (_GLF_IDENTITY((~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))), max((~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u))), (~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u)))))) | ((~ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id))) | 0u)))))), max(((~ (subgroup_id))), ((~ (subgroup_id))))))) - 0u))))), (_GLF_IDENTITY(subgroup_id, ~ _GLF_IDENTITY(_GLF_IDENTITY((~ (subgroup_id)), ~ (~ ((~ (subgroup_id))))), 0u ^ (_GLF_IDENTITY((~ (subgroup_id)), ~ (~ ((~ (subgroup_id))))))))) * 1u) * _GLF_struct_replacement_0.subgroup_size + ((_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), (_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), uint(uvec2(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), 1u))), 0u ^ (min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id)))) + 0u)) << 0u), (1u & 1u) * (_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), (_GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), (min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id)) << 0u), (_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), 0u ^ (_GLF_IDENTITY(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), clamp(min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id), min(_GLF_IDENTITY(_GLF_struct_replacement_1.subgroup_local_id, (_GLF_struct_replacement_1.subgroup_local_id) * 1u), _GLF_struct_replacement_1.subgroup_local_id), min(_GLF_struct_replacement_1.subgroup_local_id, _GLF_struct_replacement_1.subgroup_local_id)))))) + 0u)) << 0u)))) + 1) % _GLF_struct_replacement_0.subgroup_size);
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, ~ _GLF_IDENTITY((~ (next_virtual_gid)), clamp((~ (_GLF_IDENTITY(next_virtual_gid, min(next_virtual_gid, next_virtual_gid)))), (~ (next_virtual_gid)), (~ (next_virtual_gid)))))], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false))))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (true) || false)) || false), false, false)), (_GLF_IDENTITY(bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (true) || false)) || false), false, false)), bool(bvec2(bool(bvec4(false, _GLF_IDENTITY(true, (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), true && (bool(bvec3(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))), (true) || false)) || false), false, false)), false)))) || false))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)), true && _GLF_IDENTITY(((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true))))))))), true && (((_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, false, true, true)), ! (! (bool(bvec4(false, false, true, true)))))))))))) && true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y)))))))
          {
           do
            {
             barrier();
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), vec2(0.0, 0.0) + ((injectionSwitch) * mat2(1.0)))).y))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         return;
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
          {
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x, determinant(mat4(0.0, 0.0, tan(0.0), 1.0, 0.0, 0.0, sqrt(0.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x)) > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0))), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false, false, true)))))
            barrier();
           return;
          }
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) / abs(vec2(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y)))).x > injectionSwitch.y))))
          barrier();
         return;
        }
      }
     do
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (true ? injectionSwitch.x : _GLF_FUZZED(-787.866))) > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        break;
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false))))
        {
         if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
          {
           barrier();
          }
         else
          {
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      {
       for(int _injected_loop_counter = int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), min(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (true ? _GLF_ZERO(0.0, injectionSwitch.x) : _GLF_FUZZED(241.582))), _GLF_ZERO(0.0, injectionSwitch.x)))); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) ^ 0)) * 1)); _injected_loop_counter ++)
        {
         return;
         if(_GLF_DEAD(false))
          barrier();
        }
      }
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec2(false, true))))))))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY((false) || false, (_GLF_IDENTITY((false) || false, bool(bvec2((false) || false, false)))) || false))))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      continue;
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(buf[_GLF_IDENTITY(virtual_gid, (0u & 19354u) | (virtual_gid))], 4, 64, 0);
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(2.8), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(77.73)), bvec2(true, false))), min(_GLF_IDENTITY(injectionSwitch, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(vec2(-32.18, -20.97)) : _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(6.8, -6883.2158, 30.80, 24.94))))))), injectionSwitch)).x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))), (_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false))))) && true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       return;
      }
     return;
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  return;
 for(int _injected_loop_counter = _GLF_IDENTITY(1, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(_GLF_IDENTITY(77463, int(ivec2(77463, 0)))) : 1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false))), false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, false || ((false) || false)))))))
    continue;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(false))
          barrier();
         return;
        }
       else
        {
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        continue;
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    break;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     break;
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    continue;
   atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], _GLF_IDENTITY(_GLF_IDENTITY(read, _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), min(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), (_GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), min(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))), (uint(_GLF_IDENTITY(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), min(uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))), uvec3(read, 1u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))) ^ 0u)) >> 0u)), _GLF_IDENTITY(_GLF_IDENTITY((read) >> (0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), max(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(0u, uint(uvec3(_GLF_IDENTITY(0u, uint(_GLF_IDENTITY(uvec4(0u, 0u, 0u, 1u), (false ? _GLF_FUZZED(uvec4(152797u, 65050u, 90370u, 99794u)) : uvec4(0u, 0u, 0u, 1u))))), 1u, 0u))), 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((_GLF_IDENTITY(read, (read) ^ 0u)) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), _GLF_IDENTITY((uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u), (true ? (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u) : _GLF_FUZZED((uvec2(146575u, 66959u) * num_workgroup)))))), 0u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(0u, 1u * (0u)), 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | _GLF_IDENTITY(0u, (0u) - 0u)), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))))))), (_GLF_IDENTITY((_GLF_IDENTITY(read, min(read, read))) >> (0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | _GLF_IDENTITY(0u, ~ (~ (0u)))), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, _GLF_IDENTITY(1u, 0u | (1u))), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (_GLF_IDENTITY(0u | 0u, uint(uint(0u | 0u)))), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), max(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> _GLF_IDENTITY((0u | 0u), clamp((0u | 0u), (0u | 0u), (0u | 0u))), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (_GLF_IDENTITY(0u, (0u) - 0u) | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), uint(_GLF_IDENTITY(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), uvec3(uvec4(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), 1u))), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((_GLF_IDENTITY(read, (read) ^ 0u)) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (_GLF_IDENTITY(0u | 0u, ~ (_GLF_IDENTITY(~ (0u | 0u), (~ (0u | 0u)) + 0u)))), 0u)) >> uvec2(0u, 0u))), 0u, 1u))))))))) | (_GLF_IDENTITY(_GLF_IDENTITY((read) >> (0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), max(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))))))), (_GLF_IDENTITY((read) >> (0u | 0u), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), max(uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)))), uint(_GLF_IDENTITY(uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u), (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u)) | (uvec3(uint(_GLF_IDENTITY(uvec2((read) >> (0u | 0u), 0u), (uvec2((read) >> (0u | 0u), 0u)) >> uvec2(0u, 0u))), 0u, 1u))))))))) >> 0u)))), 4, _GLF_IDENTITY(64, (_GLF_IDENTITY(_GLF_IDENTITY(64, (64) / 1), min(_GLF_IDENTITY(64, (64) / 1), _GLF_IDENTITY(64, (64) / 1)))) >> (-63258 & 0)), 4);
   if(_GLF_DEAD(false))
    continue;
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     return;
    }
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), (! (_GLF_IDENTITY(! (false), ! _GLF_IDENTITY((! (! (false))), ((! (! (false)))) || false)))) && true))))
  {
   for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
    {
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))))
        barrier();
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     do
      {
       barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))), _GLF_IDENTITY(bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)), ! (! (bool(bvec4(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, false, true)))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      {
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
