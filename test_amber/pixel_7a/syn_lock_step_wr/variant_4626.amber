#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y)))), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false, true, _GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, false, false)))))) && true), false, true, false))) && true, ((bool(bvec4(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! (_GLF_DEAD(false)), true, _GLF_IDENTITY(false, bool(bvec3(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))), false)))))) && true), false, true, false))) && true) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), ! (! (! (_GLF_DEAD(false))))))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(63.85)), float(injectionSwitch.x), bool(true))), _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(determinant(mat3(3.2, 3.2, -19.68, 34.39, -28.65, -2922.2111, 5.6, -467.405, 82.33))) : _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)), injectionSwitch)).x)))) > injectionSwitch.y)) || (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(mat3(injectionSwitch, 0.0, 0.0, 0.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0)), dot(vec4(1.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 0.0), vec4(1.0, 0.0, 0.0, 0.0))), 0.0))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! _GLF_IDENTITY((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), ((! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) && true))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, abs(vec2(0.0, 0.0)) + (injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), true && (_GLF_IDENTITY(false, true && (false))))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))) && _GLF_IDENTITY(_GLF_IDENTITY(true, true && (true)), bool(bool(_GLF_IDENTITY(true, true && (true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (false || _GLF_IDENTITY((false), false || ((false))))))))), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, false)))))), ! (! (_GLF_IDENTITY(false, false || _GLF_IDENTITY(_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, false))))), ! (! (_GLF_IDENTITY((false), true && (_GLF_IDENTITY((false), bool(bvec4((false), false, false, _GLF_IDENTITY(false, (false) && true))))))))))))))), false || (! (! (_GLF_IDENTITY(false, false || (false)))))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false))), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), false || (false)))) && true)))))) || false), false, _GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), ((false)) && true)) && true)))))))))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))), ! (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)), min((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), (true ? _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), max(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) : _GLF_FUZZED(subgroup_id)))), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-52.16) : injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : subgroup_id))) / 1u)), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, _GLF_IDENTITY(((subgroup_id) / 1u), (((subgroup_id) / 1u)) | 0u) | ((subgroup_id) / 1u)))), (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), ((subgroup_id)) - 0u) / 1u)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))))) * subgroup_size, (true ? _GLF_IDENTITY(subgroup_id, (subgroup_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)), min((_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u)), _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-52.16) : injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (false ? _GLF_FUZZED(-52.16) : injectionSwitch.y)))) ? _GLF_FUZZED(workgroup_size) : subgroup_id))) - 0u)) / 1u)), clamp((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) / 1u) / 1u, _GLF_IDENTITY(((subgroup_id) / 1u), uint(_GLF_IDENTITY(uvec4(((subgroup_id) / 1u), 0u, (1u & uint(_GLF_ONE(1.0, injectionSwitch.y))), (1u ^ 0u)), ~ (~ (uvec4(((subgroup_id) / 1u), 0u, (_GLF_IDENTITY(1u, ~ (~ (_GLF_IDENTITY(1u, clamp(1u, 1u, _GLF_IDENTITY(1u, (false ? _GLF_FUZZED(subgroup_size) : 1u))))))) & uint(_GLF_ONE(1.0, injectionSwitch.y))), (1u ^ 0u))))))) | ((subgroup_id) / 1u)))), (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, uint(uvec4(_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id))), 1u, 1u, 0u))), (subgroup_id) / 1u)), (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))))) * subgroup_size : _GLF_FUZZED(subgroup_local_id))) + _GLF_IDENTITY(subgroup_local_id, (true ? _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, min(subgroup_local_id, subgroup_local_id)))) : _GLF_FUZZED(workgroup_id))), clamp(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(clamp(52487u, workgroup_base, workgroup_size)) : subgroup_id)), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, _GLF_IDENTITY(uint(uvec3((subgroup_id) / 1u, 1u, _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 19525u), uint(uvec2((uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 19525u), 0u))))), ~ (~ (uint(uvec3((subgroup_id) / 1u, 1u, _GLF_IDENTITY((uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 19525u), uint(uvec2((uint(_GLF_ZERO(0.0, injectionSwitch.x)) & 19525u), 0u)))))))))))) * subgroup_size + subgroup_local_id, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), _GLF_IDENTITY((subgroup_id) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u)))) / 1u)), clamp((subgroup_id) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) / 1u)), _GLF_IDENTITY((subgroup_id), _GLF_IDENTITY(((subgroup_id)), ~ (_GLF_IDENTITY(~ (((subgroup_id))), (~ (((subgroup_id)))) | 0u))) << 0u) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * (subgroup_id))) / 1u)), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, 1u * _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_id))), min(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_id))), ~ (~ ((_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_id)))))), (_GLF_IDENTITY(subgroup_id, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(workgroup_size) : subgroup_id))))))) / 1u))))) * subgroup_size + subgroup_local_id, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / _GLF_IDENTITY(1u, ~ (_GLF_IDENTITY(_GLF_IDENTITY(~ (1u), ~ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) | (~ (~ (1u)))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, max(_GLF_IDENTITY(1u, (1u) | 0u), _GLF_IDENTITY(1u, (1u) / 1u)))), ~ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) | (~ (~ (1u)))))), 1u)), (uint(uvec2(_GLF_IDENTITY(~ (_GLF_IDENTITY(1u, 1u * (1u))), ~ (_GLF_IDENTITY(~ (~ (1u)), (~ (~ (1u))) | (~ (~ (1u)))))), 1u))) | 0u))))))), _GLF_IDENTITY(uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)))))), (true ? 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))) * 1u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)))))) : _GLF_FUZZED(workgroup_base)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, _GLF_IDENTITY((_GLF_IDENTITY(8u, ~ (~ (8u)))), uint(uvec3((_GLF_IDENTITY(8u, ~ (~ (8u)))), 1u, 1u))) | (_GLF_IDENTITY(8u, max(8u, 8u))))), _GLF_IDENTITY(uint(8u), (_GLF_IDENTITY(uint(8u), (_GLF_IDENTITY(uint(8u), (uint(8u)) << 0u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), ~ (~ (_GLF_IDENTITY(uint(1u), uint(1u)))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) * 1u)))), (false ? _GLF_FUZZED(uvec4(80275u, 102672u, 28541u, 91554u)) : uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), _GLF_IDENTITY(0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)))))), (true ? 0u ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), _GLF_IDENTITY(uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)), 0u ^ (uint(uvec2(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id))) * 1u)) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u)))))) : _GLF_FUZZED(workgroup_base)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, _GLF_IDENTITY((_GLF_IDENTITY(8u, ~ (~ (8u)))), uint(uvec3((_GLF_IDENTITY(8u, ~ (~ (8u)))), 1u, 1u))) | (_GLF_IDENTITY(8u, max(8u, 8u))))), _GLF_IDENTITY(uint(8u), (_GLF_IDENTITY(uint(8u), (_GLF_IDENTITY(uint(8u), (uint(8u)) << 0u)) / ((1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(1u), uint(1u)), ~ (~ (_GLF_IDENTITY(uint(1u), uint(1u)))))) >> _GLF_IDENTITY(uint(1u), uint(1u))))) * 1u))))))), max(_GLF_IDENTITY(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), _GLF_IDENTITY((subgroup_id), clamp((subgroup_id), (subgroup_id), (subgroup_id))))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), uint(8u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << 0u)))), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))))), clamp(_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))), min((subgroup_id), (subgroup_id))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), uint(8u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << 0u)))), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), injectionSwitch)).y)) ? 0u : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, _GLF_IDENTITY(0u, clamp(0u, _GLF_IDENTITY(0u, (0u) | (0u)), 0u)), (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), _GLF_IDENTITY(uint(8u), ~ (~ (uint(8u))))), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << 0u)))), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), min((subgroup_id), (subgroup_id))) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u >> _GLF_IDENTITY(uint(8u), uint(8u)), (0u >> _GLF_IDENTITY(uint(8u), uint(8u))) << 0u)))), (false ? _GLF_FUZZED(subgroup_size) : uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (_GLF_IDENTITY(0u, (_GLF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, true), bvec2(bvec2(bvec2(true, true)))))), (injectionSwitch.x < injectionSwitch.y)) ? 0u : _GLF_FUZZED(workgroup_base))) >> _GLF_IDENTITY(uint(8u), uint(8u))))))))), _GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), (subgroup_id) / 1u), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, 1u * (8u))))))), 0u ^ _GLF_IDENTITY((uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), ((subgroup_id)) | ((subgroup_id))), (subgroup_id))) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))), min(_GLF_IDENTITY((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), max(uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))), ((_GLF_IDENTITY(uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), max(uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))), uint(uvec4(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))))))) / 1u), (uint(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, uint(uvec4(subgroup_id, 1u, 0u, 1u)))) * 1u), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, (_GLF_IDENTITY((subgroup_id) / 1u, ((subgroup_id) / 1u) | ((subgroup_id) / 1u))) * 1u)))), 1u, 0u, (0u >> _GLF_IDENTITY(uint(8u), uint(8u)))))))))))) * subgroup_size + subgroup_local_id) - 0u), _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, ~ (_GLF_IDENTITY(~ (workgroup_base), ~ (~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(workgroup_base, (workgroup_base) | 0u)), (_GLF_IDENTITY(~ (workgroup_base), 1u * (~ (workgroup_base)))) | (~ (workgroup_base)))))))) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(workgroup_id) : subgroup_id))) / 1u), (false ? _GLF_FUZZED((atomicXor(subgroup_local_id, subgroup_size) * uint(true))) : _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), min(_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u), _GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))))) * subgroup_size + subgroup_local_id, (_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size + subgroup_local_id, 0u + (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : subgroup_id)), (_GLF_IDENTITY(subgroup_id, (false ? _GLF_FUZZED(num_workgroup) : _GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))) / 1u), (subgroup_id) | (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, 0u | (_GLF_IDENTITY(subgroup_local_id, (_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id))) - 0u)))))) | (_GLF_IDENTITY(workgroup_base, _GLF_IDENTITY((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base)))), ~ (~ ((_GLF_IDENTITY(workgroup_base, ~ (~ (workgroup_base))))))) + (0u | 0u)) + _GLF_IDENTITY(subgroup_id, (subgroup_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) / 1u, _GLF_IDENTITY(0u, (0u) ^ 0u) ^ (_GLF_IDENTITY((subgroup_id) / 1u, _GLF_IDENTITY(((subgroup_id) / 1u), clamp(((subgroup_id) / 1u), _GLF_IDENTITY(((subgroup_id) / 1u), (((subgroup_id) / 1u)) * 1u), ((subgroup_id) / 1u))) << 0u))))), (false ? _GLF_FUZZED(bitfieldReverse(subgroup_id)) : (_GLF_IDENTITY(subgroup_id, (subgroup_id) / 1u))))) * subgroup_size + _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)))), uint(_GLF_IDENTITY(uint((subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))), max(_GLF_IDENTITY(uint((subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))), 0u ^ (uint((subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))))), uint((subgroup_local_id) | _GLF_IDENTITY((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), max((_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u)), (_GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) << 0u))))))))))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(1.0), (true ? mat2(1.0) : _GLF_FUZZED(mat2(-906.347, 770.824, -4.7, -9.9)))) * (injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), mix(vec2(_GLF_FUZZED(-4172.5325), _GLF_FUZZED(1.7)), vec2((_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[0], (_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))[1]), bvec2(true, true)))) * vec2(1.0, 1.0)), injectionSwitch)).y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(true, bool(bool(true)))))), (_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), bool(bvec3(_GLF_IDENTITY(false, ! (! (false))), false, _GLF_IDENTITY(true, _GLF_IDENTITY(bool(bool(true)), bool(bvec2(bool(bool(true)), false)))))))) && true)) && true)))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) && true)) || false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * subgroup_size + _GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), clamp(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), max(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size))), uint(uvec3(((subgroup_local_id + 1) % subgroup_size), 0u, (0u >> _GLF_IDENTITY(uint(4u), uint(4u))))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), false, false, false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, false, false)))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y))) || false))))))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! _GLF_IDENTITY((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), bool(bvec3(_GLF_IDENTITY((! _GLF_IDENTITY((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))), ! (! ((_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec4((! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((true ? injectionSwitch.y : _GLF_FUZZED(2739.1578)), mix(float(_GLF_FUZZED(4855.1882)), float((true ? injectionSwitch.y : _GLF_FUZZED(2739.1578))), bool(true)))), injectionSwitch.y))))))), false, false, false))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) || (injectionSwitch.x > injectionSwitch.y))))))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) || (injectionSwitch.x > injectionSwitch.y)))))))))) || false))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(_GLF_IDENTITY(1, ~ (~ (_GLF_IDENTITY(1, int(_GLF_IDENTITY(ivec2(1, 0), (_GLF_IDENTITY(ivec2(1, 0), (ivec2(1, 0)) << ivec2(0, 0))) ^ ivec2(0, 0)))))))), 4, _GLF_IDENTITY(_GLF_IDENTITY(64, (64) | (_GLF_IDENTITY(64, int(ivec3(64, (29324 & 0), (0 | 0)))))), (64) << 0), _GLF_IDENTITY(_GLF_IDENTITY(4, clamp(4, 4, _GLF_IDENTITY(4, (4) ^ 0))), ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) * (4)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec4(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(vec4(injectionSwitch, 1.0, length(vec3(0.0, 0.0, 0.0))))))).y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), bool(bvec2(bool(bvec2(false, true)), true))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, true, false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], (buf[virtual_gid]) / 1u), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (~ (4))), int(ivec3(4, 1, 1))));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false ? _GLF_FUZZED(-7.4) : mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(-12.57)), float(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0))), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), clamp(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false ? _GLF_FUZZED(-7.4) : mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(-12.57)), float(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0))), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false ? _GLF_FUZZED(-7.4) : mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(-12.57)), float(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0))), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), _GLF_IDENTITY(_GLF_IDENTITY(mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false ? _GLF_FUZZED(-7.4) : mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(-12.57)), float(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0))), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), (false ? _GLF_FUZZED((548.732 - -2.6)) : _GLF_IDENTITY(mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0)), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), (false ? _GLF_FUZZED(-7.4) : mix(float(_GLF_FUZZED(-9573.6797)), float(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0)), mix(float(_GLF_FUZZED(-12.57)), float(float(mat2x4(1.0, 1.0, tan(0.0), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 0.0, exp(0.0), 0.0, 1.0))), bool(true)))))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))))) > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + tan(vec2(0.0, 0.0))).y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false), (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false)) && true)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))))))), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false) && (_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(false || (false), ! (! (_GLF_IDENTITY(false || (false), bool(bvec2(false || (false), true)))))))))))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
