#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_7 {
 bvec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_6 {
 vec2 _f0;
 ivec3 _f1;
 uint _f2;
 mat3 _f3;
} ;

struct _GLF_struct_8 {
 int _f0;
 ivec2 _f1;
 _GLF_struct_6 _f2;
 _GLF_struct_7 _f3;
 mat4x3 _f4;
 bvec3 _f5;
 vec4 _f6;
 uint num_workgroup;
} ;

struct _GLF_struct_9 {
 mat2 _f0;
 _GLF_struct_8 _f1;
} ;

struct _GLF_struct_3 {
 mat4x2 _f0;
 mat4x3 _f1;
 mat2x4 _f2;
 int _f3;
 bool _f4;
 mat3 _f5;
} ;

struct _GLF_struct_2 {
 mat3 _f0;
 uvec4 _f1;
 uint virtual_gid;
 mat2x4 _f2;
 ivec2 _f3;
} ;

struct _GLF_struct_1 {
 bool _f0;
 uint _f1;
 mat2x4 _f2;
 mat2x4 _f3;
 bvec2 _f4;
 mat4x3 _f5;
 mat2x3 _f6;
} ;

struct _GLF_struct_4 {
 bvec2 _f0;
 _GLF_struct_1 _f1;
 _GLF_struct_2 _f2;
 _GLF_struct_3 _f3;
 int _f4;
 float _f5;
} ;

struct _GLF_struct_0 {
 float _f0;
 mat2 _f1;
 bvec4 _f2;
} ;

struct _GLF_struct_5 {
 _GLF_struct_0 _f0;
 _GLF_struct_4 _f1;
 uvec2 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 uvec2 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id;
 uvec2 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id;
 uvec4 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 uvec3 GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size;
 uvec2 GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw = GLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id;
 if(_GLF_DEAD(false))
  return;
 uvec4 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id;
 if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
  return;
 uvec2 GLF_merged2_0_1_4_1_1_12readworkgroup_id;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) || false), (_GLF_IDENTITY(bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true))))), (bool(bool(_GLF_IDENTITY(false, bool(bvec2(false, true)))))) || false)) && true))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) / 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       return;
      }
    }
  }
 for(int _injected_loop_counter = ((_GLF_IDENTITY(1 << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), int(ivec2(int(3), 1)))), (1 << _GLF_IDENTITY(int(3), int(3))) + 0)) >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - abs(0.0)))), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(63644) : _GLF_IDENTITY(_GLF_IDENTITY(int(3), max(_GLF_IDENTITY(int(3), (int(3)) | (_GLF_IDENTITY(int(3), 1 * (int(3))))), int(3))), min(int(3), int(3))))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, ~ (~ (_injected_loop_counter))) != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy = GLF_merged2_0_1_4_1_1_12readworkgroup_id;
  }
 uvec4 GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(1, 1 * (1)); _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | 0)); _injected_loop_counter --)
    {
     return;
    }
  }
 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 | (0 | 0))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), bool(bvec2(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(_GLF_IDENTITY(true && (false), (_GLF_IDENTITY(true && (false), (true && (false)) || false)) && true), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (_GLF_IDENTITY(false, bool(bvec2(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) && true)))), true)))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) && true)), ! (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bvec4(true && (false), true, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(7656.3763) : injectionSwitch.x)) > injectionSwitch.y)), true))))) && true))))))), false)))))
        continue;
       if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
        {
         barrier();
        }
       else
        {
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bool(_GLF_DEAD(false)))))
      break;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec3(! (false), true, false)))))))
    barrier();
   if(_GLF_DEAD(false))
    continue;
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uvec2 GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
 for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(2), int(2))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
  {
   GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.xy = GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gid;
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) - 0.0) > injectionSwitch.y))))
    return;
   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, ! (! (false)))))
    {
    }
   else
    {
     barrier();
    }
  }
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    {
     if(_GLF_DEAD(false))
      break;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy = GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.xy;
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       barrier();
      }
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, false || (false))))), (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) && true), true && (_GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true, ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true) && true))))))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       return;
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(false))
    {
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 << _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(int(1), int(1)), (_GLF_IDENTITY(int(1), int(1))) >> 0), (_GLF_IDENTITY(int(1), int(1))) ^ 0))); _injected_loop_counter --)
      {
       do
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          break;
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true))) && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
        break;
       if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
        continue;
      }
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec2(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bool(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false || (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))))))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 uint subgroup_id = gl_SubgroupID;
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x = _GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)));
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), (_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bool(bvec4(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), true, true, false)))) || _GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))
  {
   GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.x;
  }
 else
  {
  }
 do
  {
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.y;
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-7872.9927)))), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? injectionSwitch.y : _GLF_FUZZED(-7872.9927))))) && true))))
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         barrier();
        }
       while(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))));
      }
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), true && (! (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        continue;
       barrier();
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 while(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) && true)), bool(bvec4(_GLF_WRAPPED_LOOP(false), false, false, true))), (_GLF_WRAPPED_LOOP(false)) && true));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       return;
      }
     while(_GLF_WRAPPED_LOOP(false));
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) || false)))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          return;
        }
       barrier();
      }
     return;
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! _GLF_IDENTITY((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(injectionSwitch) : injectionSwitch)), injectionSwitch)).y)), true, true))), (_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))), (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) && true)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true)))))) || false))))), bool(bvec4((! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), bool(_GLF_IDENTITY(bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true && (bool(bool(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))))), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true))), false || (_GLF_IDENTITY(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)).x > injectionSwitch.y) && _GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || false)))), bool(bvec4(bool(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) && true)), true, true))))))))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        return;
       return;
      }
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z = subgroup_size;
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false))))))))
    barrier();
  }
 uint subgroup_local_id = gl_SubgroupInvocationID;
 GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y = subgroup_local_id;
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, _GLF_IDENTITY((injectionSwitch.x < injectionSwitch.y), ((injectionSwitch.x < injectionSwitch.y)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  {
   GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w = GLF_merged2_0_1_11_1_1_17subgroup_idsubgroup_local_id.y;
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(false))
      return;
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
    return;
  }
 else
  {
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, _GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y)))))))
  return;
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w = GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.w;
  }
 else
  {
  }
 _GLF_struct_9 _GLF_struct_replacement_9 = _GLF_struct_9(mat2(_GLF_IDENTITY(1.0, float(mat4(1.0, _GLF_IDENTITY(1.0, (1.0) / 1.0), tan(0.0), 0.0, 1.0, exp(0.0), 0.0, 1.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, float(mat3x2(0.0, 0.0, 0.0, 0.0, 0.0, 0.0))), sqrt(0.0), tan(tan(0.0)), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_ZERO(0.0, injectionSwitch.x), 1.0, 1.0)), dot(vec3(1.0, 0.0, 0.0), vec3(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(float(_GLF_IDENTITY(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0)), mix(float(_GLF_FUZZED(0.9)), float(determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, round(length(normalize(vec4(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sin(0.0), 1.0))), 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, abs(0.0)), (mat4(1.0, 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sin(0.0), 1.0)), dot(vec3(1.0, 1.0, 0.0), vec3(0.0, sin(0.0), 1.0))), 0.0, 0.0, round(length(normalize(1.0))), 1.0, 0.0, 0.0, 1.0, exp(0.0), 0.0, 0.0, 0.0, abs(0.0))) - mat4(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)))), 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0))), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), _GLF_IDENTITY(determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0)), (true ? determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (dot(vec2(1.0, 1.0), vec2(0.0, 0.0))) / 1.0)), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), 0.0, 1.0, 0.0, 1.0)) : _GLF_FUZZED(8018.9794))), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)) * mat3(1.0))), _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0))), (clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)))) / vec2(1.0, 1.0))).y)) ? _GLF_FUZZED(-377.079) : float(_GLF_IDENTITY(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (false ? _GLF_FUZZED(-5.9) : _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), min(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))))))), 1.0, _GLF_IDENTITY(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), mix(float(_GLF_FUZZED(-15.68)), float(_GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), bool(true))), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-262.439)), float(0.0), bool(true))), abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, _GLF_IDENTITY(0.0, 0.0 + (0.0)))), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) + 0.0), _GLF_IDENTITY(1.0, abs(1.0) * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.73)), float(1.0), bool(true))))))))), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)) * mat3(1.0)))), (false ? _GLF_FUZZED(7.9) : _GLF_IDENTITY((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-377.079) : float(_GLF_IDENTITY(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), (true ? _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), 0.0 + (dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))) : _GLF_FUZZED(-890.046)))) / 1.0), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, _GLF_IDENTITY(round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[0], mix(float(_GLF_FUZZED(-6720.9618)), float((vec4(1.0, 1.0, 1.0, 1.0))[0]), bool(true))), _GLF_FUZZED(-5.9), _GLF_FUZZED(7.2), _GLF_FUZZED(5037.1277)), vec4(_GLF_FUZZED(-9.3), (vec4(1.0, 1.0, 1.0, 1.0))[1], (vec4(1.0, 1.0, 1.0, 1.0))[2], (vec4(1.0, 1.0, 1.0, 1.0))[3]), bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, true)))))), clamp(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), (false ? _GLF_FUZZED(22.81) : round(length(normalize(vec4(1.0, 1.0, _GLF_IDENTITY(1.0, float(_GLF_IDENTITY(mat3x4(1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0), transpose(transpose(mat3x4(1.0, 0.0, 1.0, tan(0.0), 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0)))))), 1.0)))))), round(length(normalize(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0)) * mat4(1.0), min((vec4(1.0, 1.0, 1.0, 1.0)) * mat4(1.0), (vec4(1.0, 1.0, 1.0, 1.0)) * mat4(1.0))))))))), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), 1.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, abs(1.0) * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.73)), float(1.0), bool(true))))))))), (round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, abs(1.0) * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-32.73)), float(1.0), bool(true)))))))))) / _GLF_ONE(1.0, injectionSwitch.y)), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0)) * mat3(1.0)))), ((_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-377.079) : float(_GLF_IDENTITY(mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), 0.0, abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0))), (_GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(1.0, 1.0), vec2(0.0, 0.0)))) - 0.0), 1.0, _GLF_IDENTITY(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), clamp(round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))), round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0)))))), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, 1.0), (mat3x4(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0)), abs(0.0), tan(0.0), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(dot(vec2(1.0, 1.0), vec2(0.0, 0.0)), dot(vec2(_GLF_IDENTITY(1.0, 1.0 * (1.0)), 1.0), _GLF_IDENTITY(vec2(0.0, 0.0), (true ? _GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(vec2(9970.6136, -25.09)) : vec2(0.0, 0.0))) : _GLF_FUZZED(vec2(-1.8, 556.649)))))), 1.0, round(length(normalize(vec4(1.0, 1.0, 1.0, _GLF_IDENTITY(1.0, abs(1.0) * (_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(_GLF_IDENTITY(-32.73, (-32.73) - 0.0))), float(1.0), _GLF_IDENTITY(bool(true), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (bool(true))))))))))), 0.0, 1.0, 0.0, 1.0)), round(length(normalize(1.0))), 0.0, 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY((injectionSwitch.x) * 1.0, clamp((injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0, (injectionSwitch.x) * 1.0))), _GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, abs(1.0), 1.0, 1.0, 0.0, sin(0.0), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), 0.0)))) / 1.0)))), 0.0, 1.0)) * mat3(1.0))))) - _GLF_IDENTITY(0.0, mix(float(0.0), float(_GLF_FUZZED(601.176)), bool(false)))))))), 1.0, 1.0))), _GLF_ZERO(0.0, injectionSwitch.x))))), _GLF_struct_8(1, ivec2(1), _GLF_struct_6(vec2(1.0), ivec3(1), 1u, _GLF_IDENTITY(mat3(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0))), (mat3(1.0)) - mat3(_GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)), _GLF_IDENTITY(injectionSwitch.x, min(injectionSwitch.x, injectionSwitch.x))))), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, injectionSwitch.x), _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3x4(injectionSwitch, abs(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED((5.3 - vec2(696.391, 499.362))) : vec2(mat3x4(injectionSwitch, abs(0.0), 0.0, 0.0, abs(1.0), 1.0, 1.0, 0.0, 0.0, 0.0, 0.0))))).x)))), _GLF_struct_7(bvec2(true), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(151.607)), bool(false))))), mat4x3(1.0), bvec3(true), vec4(1.0), _GLF_IDENTITY(gl_NumWorkGroups.x, (gl_NumWorkGroups.x) * uint(_GLF_ONE(1.0, injectionSwitch.y)))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  return;
 do
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.x = _GLF_struct_replacement_9._f1.num_workgroup;
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(3981.2752)), float(_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, _GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) + 0.0)))), bool(true)))) - _GLF_IDENTITY(dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, _GLF_IDENTITY(1.0, float(mat3x4(1.0, cos(0.0), _GLF_ONE(1.0, injectionSwitch.y), 1.0, 1.0, 0.0, 0.0, exp(0.0), 0.0, determinant(mat3(1.0, 1.0, 0.0, _GLF_IDENTITY(dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0)), dot(vec3(0.0, 0.0, 0.0), vec3(1.0, 1.0, 1.0))), 1.0, 0.0, 0.0, 0.0, cos(0.0))), 0.0, 0.0))), _GLF_IDENTITY(0.0, length(vec4(0.0, 0.0, 0.0, 0.0)) + (_GLF_IDENTITY(0.0, (0.0) / round(length(normalize(vec4(1.0, 1.0, 1.0, 1.0))))))), 0.0)), dot(vec4(1.0, 0.0, 1.0, 1.0), vec4(0.0, 1.0, 0.0, 0.0)))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u)), (_GLF_IDENTITY(gl_WorkGroupSize, (gl_WorkGroupSize) - uvec3(0u, 0u, 0u))) << uvec3(0u, 0u, 0u)).x;
 uint workgroup_id = gl_WorkGroupID.x;
 GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y = workgroup_id;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.y;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        return;
      }
     else
      {
      }
     barrier();
    }
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  barrier();
 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.y = GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.y;
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, (false) && true)))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     do
      {
       if(_GLF_DEAD(false))
        return;
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
     return;
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
    }
   else
    {
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))) << _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), (int(3)) ^ 0))) >> _GLF_IDENTITY(int(3), int(_GLF_IDENTITY(3, (3) ^ 0))))); _injected_loop_counter ++)
      {
       do
        {
         do
          {
           do
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(true && (_GLF_DEAD(false)), bool(bool(true && (_GLF_DEAD(false)))))))
              {
               if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), true && (! (false))))), (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))));
          }
         while(_GLF_WRAPPED_LOOP(false));
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            continue;
           barrier();
          }
         do
          {
           barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && _GLF_IDENTITY(((_GLF_IDENTITY(false, (false) || false))), true && (((_GLF_IDENTITY(false, (false) || false))))))) && true) || false), ! (! (_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && ((_GLF_IDENTITY(false, (false) || false))))) && true), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), (_GLF_IDENTITY(false, (false) || false)) && true)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), true && ((_GLF_IDENTITY(false, (false) || false))))) && true)) || false) || false))))));
         if(_GLF_DEAD(false))
          continue;
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
      }
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || _GLF_FALSE(_GLF_IDENTITY(false, (false) || false), (injectionSwitch.x > injectionSwitch.y))), (injectionSwitch.x > injectionSwitch.y))))
  return;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))), false || (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-7.6, -87.15))))) + vec2(0.0, 0.0)).x > injectionSwitch.y)))))))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         return;
        }
      }
     return;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        return;
       return;
      }
     for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(workgroup_size, ((1u << _GLF_IDENTITY(uint(4u), uint(4u))) >> _GLF_IDENTITY(uint(4u), uint(4u))) * (workgroup_size)) * GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.y;
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x = workgroup_base;
  }
 _GLF_struct_5 _GLF_struct_replacement_5 = _GLF_struct_5(_GLF_struct_0(1.0, mat2(1.0), bvec4(true)), _GLF_struct_4(bvec2(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(_GLF_IDENTITY(true, _GLF_IDENTITY(bool(bvec2(true, true)), ! (! (bool(bvec2(true, true)))))), bool(bvec4(_GLF_IDENTITY(true, bool(bvec2(true, true))), true, false, false)))))), _GLF_struct_1(true, 1u, mat2x4(1.0), mat2x4(1.0), bvec2(true), mat4x3(1.0), mat2x3(1.0)), _GLF_struct_2(mat3(1.0), uvec4(1u), GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z, max(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z, _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.z) * 1u))) * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z + GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w, mat2x4(1.0), ivec2(1)), _GLF_struct_3(mat4x2(1.0), mat4x3(_GLF_IDENTITY(1.0, (1.0) - 0.0)), mat2x4(1.0), 1, true, mat3(1.0)), 1, 1.0), uvec2(1u));
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(bvec4(_GLF_IDENTITY(true, ! (! (true))), true, true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    {
     for(int _injected_loop_counter = (67218 & 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
      {
       GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y = _GLF_IDENTITY(_GLF_struct_replacement_5._f1._f2.virtual_gid, 1u * (_GLF_IDENTITY(_GLF_struct_replacement_5._f1._f2.virtual_gid, max(_GLF_struct_replacement_5._f1._f2.virtual_gid, _GLF_struct_replacement_5._f1._f2.virtual_gid))));
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        return;
       barrier();
      }
    }
   else
    {
    }
  }
 uint next_virtual_gid = GLF_merged2_0_1_14_1_1_12workgroup_baseworkgroup_id.x + _GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) + (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, min(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | uvec4(0u, 0u, 0u, 0u)))), GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)), uvec4(0u, 0u, 0u, 0u) ^ (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, min(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(1u, 1u, 1u, 1u) * (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id) | uvec4(0u, 0u, 0u, 0u)))), GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)))))).z * GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z + ((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.w + 1) % GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.z);
 GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.x = next_virtual_gid;
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    return;
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    return;
   return;
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
  }
 for(int _injected_loop_counter = (1 & int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != ((0 | 0) << _GLF_IDENTITY(int(3), int(3)))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-3268.1762) : injectionSwitch.x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      return;
     barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(bool(bvec2(_GLF_WRAPPED_IF_TRUE(true), _GLF_IDENTITY(false, ! (! (false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), _GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), true)))), bvec2(bvec4(bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), bvec3(bvec4(bvec3(_GLF_IDENTITY(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), bvec2(bvec3(bvec2(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), bool(bool(! (true))))))), false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), false), true)))), false, true)))))) && true)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x, 1.0 * (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).x)) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     barrier();
    }
   atomicStore(buf[GLF_merged2_0_2_49_2_2_53GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidGLF_merged2_0_1_16_1_1_12next_virtual_gidworkgroup_id.zw.x], uint(1), _GLF_IDENTITY(4, _GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_IDENTITY(_GLF_FUZZED(-78213), (_GLF_IDENTITY(_GLF_FUZZED(-78213), (_GLF_FUZZED(-78213)) << 0)) / int(_GLF_ONE(1.0, injectionSwitch.y))))), 4)), 1)), (int(ivec2(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0)), clamp(~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0)), ~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0)), ~ (_GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0)))))) : _GLF_FUZZED(-78213))), 4)), 1))) | (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, _GLF_IDENTITY(4, 0 ^ (4)), 4))) << 0) : _GLF_FUZZED(-78213))), 4)), 1)), (_GLF_IDENTITY(int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, min(_GLF_IDENTITY(4, ~ (~ (_GLF_IDENTITY(4, (4) | (4))))), _GLF_IDENTITY(4, max(4, 4)))), min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << _GLF_IDENTITY(0, ~ (~ (0)))) : _GLF_FUZZED(-78213))), 4)), 1)), (int(ivec2(_GLF_IDENTITY(_GLF_IDENTITY(4, min(4, _GLF_IDENTITY(4, max(4, 4)))), min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << _GLF_IDENTITY(0, ~ (~ (0)))) : _GLF_FUZZED(-78213))), 4)), 1))) ^ 0)) | (int(ivec2(_GLF_IDENTITY(4, _GLF_IDENTITY(_GLF_IDENTITY(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), max(min(_GLF_IDENTITY(4, (_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213), (_GLF_IDENTITY(true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213), int(ivec3(true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213), 1, 0)))) - 0))), 4), min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4))), (_GLF_IDENTITY(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), min(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), _GLF_IDENTITY(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), min(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), _GLF_IDENTITY(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, (_GLF_IDENTITY(4, max(4, 4))) / int(_GLF_ONE(1.0, injectionSwitch.y))), (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), ~ (~ (_GLF_IDENTITY(min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(_GLF_IDENTITY(4, max(_GLF_IDENTITY(4, (4) ^ 0), _GLF_IDENTITY(4, (4) | (4)))), (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4), ~ (~ (min(_GLF_IDENTITY(4, (true ? _GLF_IDENTITY(4, (_GLF_IDENTITY(4, clamp(4, 4, 4))) << 0) : _GLF_FUZZED(-78213))), 4)))))))))))) << 0)), 1))))))), 64, 4);
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  return;
 if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  barrier();
 if(_GLF_DEAD(false))
  return;
 uint read = atomicLoad(_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, _GLF_IDENTITY(max(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id), (max(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)) | (max(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)))).xy.y], (_GLF_IDENTITY(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], (_GLF_IDENTITY(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], clamp(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], _GLF_IDENTITY(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], (buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y]) | (buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y])), buf[_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id, uvec4(0u, 0u, 0u, 0u) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id)).xy.y]))) * _GLF_IDENTITY(1u, min(1u, _GLF_IDENTITY(1u, uint(uint(1u))))))) | (_GLF_IDENTITY(buf[_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, clamp(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy)).y], (_GLF_IDENTITY(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], min(buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y], buf[GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy.y]))) - 0u))), 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     return;
    }
   else
    {
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   barrier();
  }
 for(int _injected_loop_counter = (0 & -36544); _GLF_WRAPPED_LOOP(_injected_loop_counter < (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) << 0)) / ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), _GLF_IDENTITY(int(0), (true ? int(0) : _GLF_FUZZED(_injected_loop_counter)))))) | 0)); _injected_loop_counter ++)
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   _GLF_IDENTITY(GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x = read, (false ? _GLF_FUZZED(workgroup_base) : GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x = read));
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x, ~ (~ (GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z = GLF_merged3_0_1_4_1_1_11_2_1_13readsubgroup_idsubgroup_size.x)));
 GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x = _GLF_IDENTITY(GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z, (GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.z) << 0u);
 if(_GLF_DEAD(false))
  barrier();
 atomicStore(checker[_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), max((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), ((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u)))) >> (uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), uvec2(1u))))))).y, (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy)).y) >> 0u), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), max((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u))), ((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | _GLF_IDENTITY((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), uvec2(uvec3((GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy), 0u)))) >> (uvec2(0u, 0u) << _GLF_IDENTITY(_GLF_IDENTITY(uvec2(1u), clamp(uvec2(1u), uvec2(1u), uvec2(1u))), uvec2(1u))))))).y, (_GLF_IDENTITY(GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy, (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy) | (GLF_merged3_0_2_49_2_1_11_3_1_17GLF_merged2_0_1_13_1_1_11num_workgroupvirtual_gidsubgroup_idsubgroup_local_id.xy)).y) >> 0u)))], GLF_merged3_0_2_40_2_1_4_3_1_17GLF_merged2_0_1_4_1_1_12readworkgroup_idreadsubgroup_local_id.xy.x, 4, 64, 4);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), false || (false)), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bool((injectionSwitch.x > injectionSwitch.y)))), false))), false))))))
  return;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
