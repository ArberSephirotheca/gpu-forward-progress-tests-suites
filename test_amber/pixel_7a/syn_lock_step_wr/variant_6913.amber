#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, vec2(vec2(injectionSwitch))).y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec3((injectionSwitch.x > injectionSwitch.y), true, true)))) && _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || false)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(false, true)), (bool(bvec2(false, true))) && true))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2((false) || false, true))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize, uvec3(gl_WorkGroupSize[0], gl_WorkGroupSize[1], gl_WorkGroupSize[2])).x;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false)), (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, false))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), clamp(vec2(vec4(injectionSwitch, abs(0.0), 1.0)), vec2(vec4(injectionSwitch, abs(0.0), 1.0)), vec2(vec4(injectionSwitch, abs(0.0), 1.0))))) : _GLF_FUZZED(vec2(8.4, 2915.1464)))), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 1.0, _GLF_IDENTITY(determinant(mat2(0.0, 0.0, 1.0, 0.0)), float(mat2(determinant(mat2(0.0, 0.0, 1.0, 0.0)), 0.0, 1.0, 0.0))), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(sin(0.0), 1.0)), dot(vec2(1.0, 0.0), vec2(sin(_GLF_IDENTITY(0.0, (0.0) * 1.0)), 1.0))), 1.0, 0.0, 1.0))).y, min(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(8.4, 2915.1464)))), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(sin(0.0), 1.0)), _GLF_IDENTITY(dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0)), (dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0))) - 0.0)), 1.0, 0.0, 1.0))).y, (_GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_IDENTITY(_GLF_FUZZED(vec2(8.4, 2915.1464)), (false ? _GLF_FUZZED((clamp(injectionSwitch, vec2(914.858, 4.3), injectionSwitch) - injectionSwitch)) : _GLF_FUZZED(vec2(8.4, 2915.1464)))))), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(sin(0.0), 1.0)), dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0))), 1.0, 0.0, 1.0))).y) / 1.0), _GLF_IDENTITY(injectionSwitch, vec2(mat4(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(8.4, 2915.1464)), min(true ? injectionSwitch : _GLF_FUZZED(vec2(8.4, 2915.1464)), true ? injectionSwitch : _GLF_FUZZED(vec2(8.4, 2915.1464)))))), 1.0, exp(0.0), 0.0, 1.0, 1.0, 0.0, 0.0, round(length(normalize(determinant(mat2(1.0, 0.0, 1.0, 1.0))))), 1.0, determinant(mat2(0.0, 0.0, 1.0, 0.0)), _GLF_IDENTITY(dot(_GLF_IDENTITY(vec2(1.0, 0.0), max(vec2(1.0, 0.0), vec2(1.0, 0.0))), vec2(sin(0.0), 1.0)), dot(vec2(1.0, 0.0), vec2(sin(0.0), 1.0))), 1.0, 0.0, 1.0))).y))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false)) || false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_IDENTITY(_GLF_FUZZED(-390.067), (_GLF_FUZZED(-390.067)) / 1.0)), bool(false)))), float(_GLF_FUZZED(2.8)), bool(false))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)))), (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))) || false)) || false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              barrier();
             barrier();
            }
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-38.50)), float(injectionSwitch.y), bool(true))), injectionSwitch.y))))))))
            {
             if(_GLF_DEAD(false))
              barrier();
             if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                barrier();
               barrier();
              }
             barrier();
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              barrier();
             if(_GLF_DEAD(false))
              barrier();
             barrier();
             if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, true, false), bvec3(bvec3(bvec3(false, true, false))))))))
              barrier();
            }
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) && true)))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
          barrier();
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            barrier();
           barrier();
          }
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, true)))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (injectionSwitch.x > injectionSwitch.y))), true))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), float(mat2x3(_GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), min(min(injectionSwitch.y, injectionSwitch.y), _GLF_IDENTITY(min(injectionSwitch.y, injectionSwitch.y), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? min(injectionSwitch.y, injectionSwitch.y) : _GLF_FUZZED(-0.6))))), 0.0, 1.0, 1.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(2.1) : _GLF_IDENTITY(0.0, (0.0) * 1.0))), abs(round(length(normalize(vec3(1.0, 1.0, 1.0)))))))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec2((injectionSwitch.x > injectionSwitch.y), true))))))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (_GLF_IDENTITY(false, false || (false))) && true)))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, true && (false))) && true), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false)) && true)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-9.6), _GLF_FUZZED((-4772.4802 - -54.39))), bvec2(false, false))).y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, true)))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), false)))), (bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), false, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), false, false)))), false))))) && true)))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 uint workgroup_base = _GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, _GLF_IDENTITY((workgroup_id) - 0u, ((workgroup_id) - 0u) << (0u >> _GLF_IDENTITY(uint(0u), uint(0u))))), _GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (workgroup_size * workgroup_id) << 0u)))), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(_GLF_IDENTITY(workgroup_id, max(_GLF_IDENTITY(workgroup_id, (workgroup_id) ^ 0u), workgroup_id)), workgroup_id)), _GLF_IDENTITY((workgroup_size * workgroup_id), clamp((workgroup_size * workgroup_id), _GLF_IDENTITY((workgroup_size * workgroup_id), (false ? _GLF_FUZZED(subgroup_id) : (workgroup_size * workgroup_id))), _GLF_IDENTITY((workgroup_size * workgroup_id), ((workgroup_size * workgroup_id)) - 0u))) << _GLF_IDENTITY(0u, 0u ^ (0u)))))))), workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (_GLF_IDENTITY(_GLF_IDENTITY(0u, (0u) * 1u) << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 8u)))), uint(_GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) * 1u) << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bool(injectionSwitch.x > injectionSwitch.y))))) ? _GLF_FUZZED(subgroup_id) : 8u))))), (false ? _GLF_FUZZED(workgroup_size) : _GLF_IDENTITY(uint(_GLF_IDENTITY(0u, (0u) * 1u) << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 8u))))), (uint(_GLF_IDENTITY(0u, (0u) * 1u) << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 8u)))))) | (uint(_GLF_IDENTITY(0u, (0u) * 1u) << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(subgroup_id) : 8u))))))))))))) * workgroup_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id)))), (workgroup_size * workgroup_id) << 0u)), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (workgroup_size * workgroup_id) << 0u)))), workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, max(workgroup_size, workgroup_size))) << (0u << _GLF_IDENTITY(uint(8u), uint(_GLF_IDENTITY(8u, (8u) << 0u))))) * workgroup_id, (false ? _GLF_FUZZED(_GLF_IDENTITY(subgroup_local_id, ~ (~ (subgroup_local_id)))) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id)))), (workgroup_size * workgroup_id) << 0u)), _GLF_IDENTITY(0u, (0u) | (0u)) + (clamp(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size * workgroup_id, (workgroup_size * workgroup_id) << 0u), ~ (~ (_GLF_IDENTITY(workgroup_size * _GLF_IDENTITY(workgroup_id, min(workgroup_id, workgroup_id)), (workgroup_size * workgroup_id) << 0u)))), workgroup_size * workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, 0u ^ (_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id)))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), max(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), _GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), (_GLF_IDENTITY(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), clamp(0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id))), 0u + (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(uint(8u), uint(8u)))) * workgroup_id, (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id, 1u * (_GLF_IDENTITY(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id, clamp(false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id, false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id, false ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(workgroup_size, (workgroup_size) << (0u << _GLF_IDENTITY(_GLF_IDENTITY(uint(8u), ~ (_GLF_IDENTITY(~ (uint(8u)), (_GLF_IDENTITY(~ (uint(8u)), (false ? _GLF_FUZZED(workgroup_size) : ~ (uint(8u))))) >> 0u))), uint(8u)))) * workgroup_id)))))))))) | 0u)))), (workgroup_size * workgroup_id) << 0u))))) / 1u));
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), bool(bvec2(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, true), bvec2(bvec2(_GLF_IDENTITY(bvec2(false, _GLF_IDENTITY(true, ! (! (true)))), bvec2(bvec3(bvec2(false, true), false))))))))))), false)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))), bool(bool(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), false || (_GLF_IDENTITY(false, true && (false))))), ! (! _GLF_IDENTITY((_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))), true && ((_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))))))))), true))), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, true && (false)))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bool(! _GLF_IDENTITY((false), ! (! ((false)))))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base, (workgroup_base) / ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id) << 0u, max(_GLF_IDENTITY(_GLF_IDENTITY((subgroup_id) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), _GLF_IDENTITY((_GLF_IDENTITY((subgroup_id) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)), (true ? (subgroup_id) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u)) : _GLF_FUZZED((subgroup_local_id * 113096u))))), (false ? _GLF_FUZZED(packHalf2x16(vec2(-144.558, -222.324))) : ((subgroup_id) << _GLF_IDENTITY(0u, clamp(0u, 0u, 0u))))) - 0u), (false ? _GLF_FUZZED(subgroup_size) : (subgroup_id) << 0u)), _GLF_IDENTITY((subgroup_id) << 0u, clamp((subgroup_id) << 0u, (subgroup_id) << 0u, (subgroup_id) << 0u))))))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) * 1u)) ^ 0u))) * _GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, clamp(subgroup_size, subgroup_size, subgroup_size)))), (subgroup_size) | (_GLF_IDENTITY(subgroup_size, max(subgroup_size, _GLF_IDENTITY(subgroup_size, (subgroup_size) * 1u))))), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) - uint(_GLF_ZERO(0.0, injectionSwitch.x))), (0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), uint(uvec2(_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u), 0u))))), subgroup_id)) * subgroup_size) | (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (0u))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) + 0u))), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) ? _GLF_FUZZED(subgroup_local_id) : _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), 0u | ((subgroup_id))) << 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (0u))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) + 0u)))))), subgroup_id), (clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << _GLF_IDENTITY(0u, (true ? _GLF_IDENTITY(0u, (0u) * ((1u << _GLF_IDENTITY(uint(5u), uint(5u))) >> _GLF_IDENTITY(uint(5u), uint(5u)))) : _GLF_FUZZED(34154u))))), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (0u))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (_GLF_IDENTITY(false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))) << 0u)))) + 0u)))), subgroup_id)) | (clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), uint(_GLF_IDENTITY(uint((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), (uint((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))) * 1u))), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)) | (subgroup_id)), (subgroup_id) << 0u))))) | (_GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))), (_GLF_IDENTITY((0u ^ _GLF_IDENTITY(0u, ((1u << _GLF_IDENTITY(uint(0u), uint(0u))) >> _GLF_IDENTITY(uint(0u), uint(0u))) * (0u))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), (false ? _GLF_FUZZED(workgroup_size) : (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))))) + 0u)))), _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) - 0u))))), _GLF_IDENTITY(~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(workgroup_id))), _GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(max(_GLF_IDENTITY(subgroup_id, (subgroup_id) | 0u), _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(subgroup_id, subgroup_id)), (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))), clamp(max(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id)))), max(subgroup_id, _GLF_IDENTITY(subgroup_id, (true ? subgroup_id : _GLF_FUZZED(subgroup_local_id))))))), (_GLF_IDENTITY(0u ^ 0u, max(0u ^ 0u, 0u ^ 0u))) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id), 0u | (_GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id), ~ (~ (_GLF_IDENTITY(clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id), (clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, ~ (~ (subgroup_id)))) << 0u))), subgroup_id)) | _GLF_IDENTITY((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)), clamp((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)), _GLF_IDENTITY((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)), uint(uvec3((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)), 1u, 0u))), _GLF_IDENTITY((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)), ((clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id))) ^ 0u)))))))))))), (~ (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(true, true && (true)) ? subgroup_id : _GLF_FUZZED(workgroup_id))), clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY(_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)), ~ (~ _GLF_IDENTITY(((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), (((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u)))) * 1u))), ~ (~ (_GLF_IDENTITY((0u ^ 0u) ^ (_GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), uint(uvec4((subgroup_id), 1u, _GLF_IDENTITY((1u & 1u), min((1u & 1u), (1u & 1u))), 0u))) << 0u)), (_GLF_IDENTITY((0u ^ 0u) ^ _GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(_GLF_IDENTITY(8u, 0u + (_GLF_IDENTITY(8u, clamp(8u, 8u, 8u))))), uint(8u))))) << 0u)), uint(uvec2(_GLF_IDENTITY((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u)), clamp((_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u)), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u)), (_GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(subgroup_id, (subgroup_id) - (0u >> _GLF_IDENTITY(uint(8u), uint(8u))))) << 0u)))), ((_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u), uint(4u)), ~ (~ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u, ((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u) << 0u)), uint(4u))))), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u), uint(4u)), ~ (~ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u, ((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u) << 0u)), uint(4u))))), 0u ^ (_GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u), uint(4u)), ~ (~ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u, ((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u) << 0u)), uint(4u))))))), _GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u), uint(4u)), ~ (~ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u, ((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u) << 0u)), uint(4u))))), _GLF_IDENTITY(1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), (_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u), uint(4u)), ~ (~ (1u << _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), _GLF_IDENTITY((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u, ((_GLF_IDENTITY(uint(4u), (true ? uint(4u) : _GLF_FUZZED(subgroup_local_id)))) - 0u) << 0u)), uint(4u)))))))) >> _GLF_IDENTITY(_GLF_IDENTITY(uint(4u), uint(4u)), (_GLF_IDENTITY(uint(4u), _GLF_IDENTITY(uint(4u), (uint(4u)) >> 0u))) ^ 0u))))), ((0u ^ 0u) ^ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) | (subgroup_id)), (subgroup_id) << 0u))) ^ 0u)) * _GLF_IDENTITY(1u, 0u | (1u))))))), subgroup_id))))) - 0u)) * subgroup_size, (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, _GLF_IDENTITY(subgroup_id, (_GLF_IDENTITY(0u, 0u ^ (_GLF_IDENTITY(0u, min(0u, 0u)))) ^ _GLF_IDENTITY(0u, (0u) + 0u)) ^ (_GLF_IDENTITY(subgroup_id, (subgroup_id) << 0u))), subgroup_id)) * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 0u), (uvec3(subgroup_size, _GLF_IDENTITY(0u, (0u) >> 0u), 0u)) ^ uvec3(0u, 0u, 0u)))), subgroup_size)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(subgroup_size, min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 0u), (uvec3(subgroup_size, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))), subgroup_size))), (~ (_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, max(subgroup_size, subgroup_size)), min(_GLF_IDENTITY(subgroup_size, uint(_GLF_IDENTITY(uvec3(subgroup_size, 0u, 0u), (uvec3(subgroup_size, 0u, 0u)) ^ uvec3(0u, 0u, 0u)))), subgroup_size)))) << 0u))), max(subgroup_size, subgroup_size)), (false ? _GLF_FUZZED(packSnorm2x16(vec2(83.06, -4750.6073))) : _GLF_IDENTITY(subgroup_size, max(_GLF_IDENTITY(_GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) + 0u)) | 0u), min(subgroup_size, subgroup_size)), subgroup_size))))) >> 0u))) + subgroup_local_id;
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec3(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 uint next_virtual_gid = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base)) + subgroup_id * subgroup_size, _GLF_IDENTITY(0u, (false ? _GLF_FUZZED(virtual_gid) : 0u)) | (_GLF_IDENTITY(workgroup_base, min(_GLF_IDENTITY(workgroup_base, 0u | (workgroup_base)), workgroup_base)) + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, max(subgroup_id, subgroup_id)), (_GLF_IDENTITY(subgroup_id, clamp(subgroup_id, subgroup_id, subgroup_id))) | (_GLF_IDENTITY(subgroup_id, 0u | (subgroup_id)))) * subgroup_size)) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(_GLF_IDENTITY(false, (false) && true)))), false || (_GLF_IDENTITY(false, bool(bvec4(false, true, true, false)))))))), (false) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, false || (false)), true, false, false)), (bool(bvec4(false, true, false, _GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), bool(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false)))), (_GLF_IDENTITY(false, false || _GLF_IDENTITY((false), true && ((false))))) && true))))))) || false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true, true, false)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (! (_GLF_IDENTITY(false, (false) || false)))))) || _GLF_IDENTITY((_GLF_DEAD(false)), _GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))), bool(bvec3(_GLF_IDENTITY(bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false)))))), ! (! (bool(bool(_GLF_IDENTITY((_GLF_DEAD(false)), true && ((_GLF_DEAD(false))))))))), true, false))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true)), bool(_GLF_IDENTITY(bvec2(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, _GLF_IDENTITY(true, true && (true)))), true), bvec2(bvec4(bvec2(bool(bvec4(_GLF_IDENTITY(false, true && (false)), true, true, true)), true), true, false))))))))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 atomicStore(buf[next_virtual_gid], _GLF_IDENTITY(uint(1), uint(_GLF_IDENTITY(uvec4(uint(1), 0u, 1u, 0u), uvec4(0u, 0u, 0u, 0u) ^ (uvec4(uint(1), 0u, 1u, 0u))))), _GLF_IDENTITY(4, (4) | (_GLF_IDENTITY(4, min(4, 4)))), 64, 4);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (! (false)))))), true && (_GLF_DEAD(false))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch) * mat2(1.0), ((injectionSwitch) * mat2(1.0)) - log(vec2(1.0, 1.0)))).y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && true)))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, ! (! (false))), true)), false || (bool(bvec2(false, true)))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, false, false), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (_GLF_IDENTITY(false, ! (! (false)))) && true))))), true)))))))
  {
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false || (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true))))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true))))))), ! (! (bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true), bvec3(bvec3(bvec3(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false), bvec2(bvec2(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true), false)))), true))))))))))) || false)))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec3(bvec3(false, false, _GLF_IDENTITY(true, true && (true)))))))), (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, mix(_GLF_IDENTITY(float(_GLF_FUZZED(-121.595)), float(mat2x4(float(_GLF_FUZZED(-121.595)), 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, abs(0.0)))), float(_GLF_IDENTITY(injectionSwitch.x, _GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)), max(_GLF_IDENTITY(float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)), mix(float(float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0))), float(_GLF_FUZZED(5.4)), bool(false))), float(mat2x3(_GLF_IDENTITY(injectionSwitch.x, float(vec2(injectionSwitch.x, 0.0))), 0.0, 1.0, 1.0, 0.0, 0.0)))))), bool(true))), injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(bvec4(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false))), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, false, false))))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) && true)))))
    barrier();
   barrier();
  }
 atomicStore(checker[virtual_gid], read, 4, 64, _GLF_IDENTITY(_GLF_IDENTITY(4, ~ (_GLF_IDENTITY(~ (4), clamp(~ (4), ~ (4), ~ (4))))), (false ? _GLF_FUZZED(23323) : 4)));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y))) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))))), ((_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y))))))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
