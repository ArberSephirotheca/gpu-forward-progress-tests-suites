#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


struct _GLF_struct_26 {
 mat3 _f0;
 ivec3 _f1;
 ivec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_27 {
 int _f0;
 ivec4 _f1;
 mat4x2 _f2;
 _GLF_struct_26 _f3;
 vec4 _f4;
} ;

struct _GLF_struct_24 {
 uint workgroup_id;
 uvec3 _f0;
} ;

struct _GLF_struct_25 {
 mat3x2 _f0;
 _GLF_struct_24 _f1;
 mat3x2 _f2;
 uvec4 _f3;
} ;

struct _GLF_struct_22 {
 uvec2 _f0;
 vec4 _f1;
} ;

struct _GLF_struct_21 {
 vec4 _f0;
 mat3 _f1;
 mat4x2 _f2;
 ivec4 _f3;
 ivec3 _f4;
 bvec3 _f5;
 bvec4 _f6;
} ;

struct _GLF_struct_20 {
 mat4 _f0;
 ivec3 _f1;
 ivec2 _f2;
 mat4 _f3;
 bvec4 _f4;
} ;

struct _GLF_struct_23 {
 mat3x2 _f0;
 _GLF_struct_20 _f1;
 bvec2 _f2;
 _GLF_struct_21 _f3;
 vec4 _f4;
 mat4x2 _f5;
 _GLF_struct_22 _f6;
} ;

struct _GLF_struct_18 {
 mat2x3 _f0;
 vec4 _f1;
 ivec2 _f2;
 mat4x2 _f3;
 uvec4 _f4;
 mat2x4 _f5;
} ;

struct _GLF_struct_17 {
 ivec3 _f0;
 vec3 _f1;
 ivec4 _f2;
 mat2 _f3;
 bvec3 _f4;
} ;

struct _GLF_struct_16 {
 mat4x3 _f0;
 mat2x4 _f1;
} ;

struct _GLF_struct_19 {
 _GLF_struct_16 _f0;
 uvec2 _f1;
 _GLF_struct_17 _f2;
 _GLF_struct_18 _f3;
 mat4x3 _f4;
} ;

struct _GLF_struct_14 {
 mat3 _f0;
 vec3 _f1;
 ivec2 _f2;
 int _f3;
 mat4x2 _f4;
 mat3 _f5;
 vec4 _f6;
} ;

struct _GLF_struct_13 {
 uvec2 _f0;
} ;

struct _GLF_struct_12 {
 uvec4 _f0;
 uvec4 _f1;
 uvec2 _f2;
} ;

struct _GLF_struct_15 {
 uvec4 _f0;
 _GLF_struct_12 _f1;
 vec3 _f2;
 vec3 _f3;
 mat3x2 _f4;
 _GLF_struct_13 _f5;
 _GLF_struct_14 _f6;
} ;

struct _GLF_struct_28 {
 mat4 _f0;
 _GLF_struct_15 _f1;
 _GLF_struct_19 _f2;
 _GLF_struct_23 _f3;
 _GLF_struct_25 _f4;
 vec4 _f5;
 _GLF_struct_27 _f6;
} ;

struct _GLF_struct_9 {
 mat3 _f0;
} ;

struct _GLF_struct_8 {
 uvec4 _f0;
} ;

struct _GLF_struct_7 {
 ivec2 _f0;
 mat2x3 _f1;
 vec4 _f2;
 mat3 _f3;
 mat2x3 _f4;
} ;

struct _GLF_struct_6 {
 bool _f0;
} ;

struct _GLF_struct_10 {
 _GLF_struct_6 _f0;
 _GLF_struct_7 _f1;
 _GLF_struct_8 _f2;
 _GLF_struct_9 _f3;
} ;

struct _GLF_struct_4 {
 float _f0;
 mat4x3 _f1;
 uvec4 _f2;
 uint _f3;
} ;

struct _GLF_struct_5 {
 _GLF_struct_4 _f0;
} ;

struct _GLF_struct_2 {
 mat3x2 _f0;
 uint _f1;
 bool _f2;
 int _f3;
 vec3 _f4;
 ivec3 _f5;
 uvec3 _f6;
} ;

struct _GLF_struct_1 {
 ivec3 _f0;
 bvec2 _f1;
} ;

struct _GLF_struct_3 {
 _GLF_struct_1 _f0;
 mat3 _f1;
 _GLF_struct_2 _f2;
} ;

struct _GLF_struct_11 {
 uint subgroup_local_id;
 _GLF_struct_3 _f0;
 bvec2 _f1;
 _GLF_struct_5 _f2;
 _GLF_struct_10 _f3;
 mat2 _f4;
 mat3x2 _f5;
 mat4x3 _f6;
} ;

struct _GLF_struct_0 {
 uvec4 _f0;
 uint subgroup_size;
 bool _f1;
 vec3 _f2;
} ;

layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))) || false), true)), ! (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true))), (_GLF_IDENTITY(! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true))), false || (! (bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))) || false), true)))))) || false)))))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
          {
          }
         else
          {
           for(int _injected_loop_counter = _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))), (true ? ((1 << _GLF_IDENTITY(int(6), int(6))) >> _GLF_IDENTITY(int(6), int(6))) : _GLF_FUZZED(-3282))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
            {
             barrier();
            }
          }
        }
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            barrier();
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
            {
             if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, true)))), true && (_GLF_DEAD(false))), true)), false, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))), bool(bvec4(! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), bool(bvec2(bool(bvec4(_GLF_IDENTITY(! (false), false || (! (false))), true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true)), false))))))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), bool(bvec4(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))), true)), false, false, _GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (injectionSwitch.x > injectionSwitch.y))))))), true, true, false))), false))))))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   barrier();
                  }
                }
               barrier();
              }
            }
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            {
             if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true))))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true))))), false || (bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true), bvec3(bvec3(bvec3(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), true, true, true)))) && true), true, true)))))))) && true)))
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
              {
               if(_GLF_DEAD(false))
                barrier();
               barrier();
              }
            }
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       else
        {
        }
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
            barrier();
           if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec3(! (_GLF_DEAD(false)), false, true))))), false))))
            barrier();
           barrier();
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
          }
         else
          {
           do
            {
             if(_GLF_DEAD(false))
              barrier();
            }
           while(_GLF_WRAPPED_LOOP(false));
          }
        }
      }
     else
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(true, false || (true))), (bool(_GLF_IDENTITY(true, false || (true)))) || false)))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       else
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))))
            barrier();
          }
         else
          {
           barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     else
      {
      }
    }
   while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), true && (_GLF_WRAPPED_LOOP(false))));
  }
 uint subgroup_id = gl_SubgroupID;
 _GLF_struct_0 _GLF_struct_replacement_0 = _GLF_struct_0(uvec4(1u), gl_SubgroupSize, true, vec3(1.0));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch), clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), min((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))))))), (injectionSwitch))) + _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0))))), (_GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), min((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))))))), (injectionSwitch)), vec2(mat3x2(clamp((injectionSwitch), _GLF_IDENTITY((injectionSwitch), mat2(1.0) * (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), min((_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))), (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])), injectionSwitch))))))), (injectionSwitch)), 0.0, determinant(mat2(1.0, sqrt(0.0), 0.0, 1.0)), 0.0, 1.0)))) + _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), _GLF_IDENTITY(vec2(0.0, 0.0), max(vec2(0.0, 0.0), vec2(0.0, 0.0)))))) * mat2(1.0))).y))))
  {
   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _injected_loop_counter ++)
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, false, false, false)))))
      barrier();
    }
   barrier();
  }
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false))))
      barrier();
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       barrier();
      }
    }
  }
 _GLF_struct_11 _GLF_struct_replacement_11 = _GLF_struct_11(gl_SubgroupInvocationID, _GLF_struct_3(_GLF_struct_1(ivec3(1), bvec2(true)), _GLF_IDENTITY(mat3(1.0), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(mat3(3080.7748)) : mat3(1.0))), _GLF_struct_2(mat3x2(1.0), 1u, true, 1, vec3(1.0), ivec3(1), _GLF_IDENTITY(uvec3(1u), (_GLF_IDENTITY(uvec3(1u), clamp(uvec3(1u), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) | uvec3(0u, 0u, 0u)), _GLF_IDENTITY(uvec3(1u), (uvec3(1u)) + uvec3(0u, 0u, 0u))))) << uvec3(0u, 0u, 0u)))), bvec2(true), _GLF_struct_5(_GLF_struct_4(1.0, mat4x3(1.0), uvec4(_GLF_IDENTITY(1u, clamp(1u, _GLF_IDENTITY(1u, 0u ^ (1u)), 1u))), 1u)), _GLF_struct_10(_GLF_struct_6(true), _GLF_struct_7(ivec2(1), mat2x3(1.0), vec4(_GLF_IDENTITY(1.0, max(_GLF_IDENTITY(1.0, (1.0) * 1.0), _GLF_IDENTITY(1.0, _GLF_IDENTITY(float(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0)), (float(mat4x2(1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0))) - 0.0))))), mat3(1.0), mat2x3(1.0)), _GLF_struct_8(uvec4(1u)), _GLF_struct_9(mat3(1.0))), mat2(1.0), mat3x2(1.0), mat4x3(1.0));
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(true ? injectionSwitch : _GLF_FUZZED(vec2(-4.3, _GLF_IDENTITY(-86.30, max(-86.30, -86.30)))), sqrt(sqrt(vec2(1.0, 1.0))) * (true ? injectionSwitch : _GLF_FUZZED(vec2(-4.3, _GLF_IDENTITY(-86.30, max(-86.30, -86.30)))))))).y, clamp(_GLF_IDENTITY(injectionSwitch.y, 0.0 + (injectionSwitch.y)), _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y)), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))) && true))))) || false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  barrier();
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = gl_WorkGroupSize.x;
 if(_GLF_DEAD(false))
  barrier();
 _GLF_struct_28 _GLF_struct_replacement_28 = _GLF_struct_28(mat4(1.0), _GLF_struct_15(_GLF_IDENTITY(uvec4(1u), max(_GLF_IDENTITY(uvec4(1u), min(uvec4(1u), uvec4(1u))), uvec4(1u))), _GLF_struct_12(_GLF_IDENTITY(uvec4(1u), (uvec4(1u)) * uvec4(1u, 1u, 1u, 1u)), _GLF_IDENTITY(uvec4(1u), (uvec4(1u)) * uvec4(_GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, injectionSwitch.y), _GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))), uvec2(1u)), vec3(1.0), _GLF_IDENTITY(vec3(1.0), _GLF_IDENTITY((vec3(1.0)), ((vec3(1.0))) * mat3(1.0)) * vec3(1.0, 1.0, 1.0)), mat3x2(1.0), _GLF_struct_13(uvec2(1u)), _GLF_struct_14(mat3(1.0), vec3(_GLF_IDENTITY(1.0, float(_GLF_IDENTITY(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4838.7444)), bool(false))), 0.0, 1.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-78.65) : 1.0))), min(vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-4838.7444)), bool(false))), 0.0, 1.0, 1.0), vec4(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (1.0)), mix(float(1.0), float(_GLF_FUZZED(-4838.7444)), bool(false))), 0.0, 1.0, 1.0)))))), ivec2(_GLF_IDENTITY(1, max(1, _GLF_IDENTITY(1, int(ivec4(1, 1, 0, 1)))))), 1, mat4x2(_GLF_IDENTITY(1.0, _GLF_IDENTITY((_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, float(mat4x2(1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, sqrt(1.0))))), float(_GLF_FUZZED(-2.5)), bool(false)))) * 1.0, ((1.0) * 1.0) / 1.0))), mat3(1.0), vec4(1.0))), _GLF_struct_19(_GLF_struct_16(mat4x3(1.0), mat2x4(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(-1915.5127)), float(1.0), bool(true))))), uvec2(1u), _GLF_struct_17(ivec3(1), vec3(1.0), ivec4(1), mat2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(-35.81) : (1.0))) - 0.0), (true ? _GLF_IDENTITY(_GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0) - 0.0, min((1.0) - 0.0, (1.0) - 0.0))), min(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (false ? _GLF_FUZZED(-99.41) : _GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), clamp(_GLF_IDENTITY(_GLF_IDENTITY(1.0, (1.0) - 0.0), (_GLF_IDENTITY(true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(4044.2797) : (1.0))) - 0.0) : _GLF_FUZZED(3.4), (true ? _GLF_IDENTITY(1.0, _GLF_IDENTITY((1.0), (false ? _GLF_FUZZED(4044.2797) : (1.0))) - 0.0) : _GLF_FUZZED(3.4)) - 0.0))), _GLF_IDENTITY(1.0, (1.0) - 0.0), _GLF_IDENTITY(1.0, (1.0) - 0.0))))), _GLF_IDENTITY(1.0, (_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED((-192.736 + (false ? -2826.2468 : -4086.9714)))), bool(false)))) - 0.0))) : _GLF_FUZZED(-2164.1708)))), bvec3(true)), _GLF_struct_18(mat2x3(1.0), vec4(1.0), ivec2(1), mat4x2(1.0), uvec4(1u), mat2x4(1.0)), mat4x3(1.0)), _GLF_struct_23(mat3x2(1.0), _GLF_struct_20(mat4(1.0), ivec3(1), ivec2(1), mat4(1.0), bvec4(true)), bvec2(true), _GLF_struct_21(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(max(vec4(1.0), vec4(1.0)), (max(vec4(1.0), vec4(1.0))) / cos(_GLF_IDENTITY(vec4(0.0, 0.0, 0.0, 0.0), max(vec4(0.0, 0.0, 0.0, 0.0), vec4(0.0, 0.0, 0.0, 0.0))))))) / vec4(1.0, 1.0, 1.0, 1.0)), max(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (true ? vec4(1.0) : _GLF_FUZZED(vec4(49.40, -1.8, 5.2, -4.4)))), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), (false ? _GLF_FUZZED(vec4(-2.5, -246.034, 418.610, 8310.3499)) : _GLF_IDENTITY(vec4(1.0), (vec4(_GLF_IDENTITY(1.0, min(1.0, 1.0)))) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(_GLF_IDENTITY(1.0, max(1.0, 1.0)))) / _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), mix(vec4(_GLF_FUZZED(_GLF_IDENTITY(-6.2, max(-6.2, -6.2))), (vec4(1.0, 1.0, 1.0, 1.0))[1], _GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], max((vec4(1.0, 1.0, 1.0, 1.0))[2], _GLF_IDENTITY((vec4(1.0, 1.0, 1.0, 1.0))[2], _GLF_IDENTITY(float(mat2x4((vec4(1.0, 1.0, 1.0, 1.0))[2], 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0)), float(mat3x2(float(mat2x4((vec4(1.0, 1.0, 1.0, 1.0))[2], 1.0, determinant(mat4(1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 0.0, 1.0, round(length(normalize(1.0))), 0.0)), 1.0, 1.0, 1.0, 1.0, 0.0)))))), (vec4(1.0, 1.0, 1.0, 1.0))[3]), vec4((vec4(1.0, 1.0, 1.0, 1.0))[0], _GLF_IDENTITY(_GLF_FUZZED(621.027), (true ? _GLF_IDENTITY(_GLF_FUZZED(621.027), mix(float(_GLF_FUZZED(621.027)), float(_GLF_FUZZED(float(22132u))), bool(false))) : _GLF_FUZZED(9.0))), _GLF_FUZZED(-9793.6683), _GLF_FUZZED(2344.0490)), bvec4(true, _GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec4(false, true, false, false)), true && (bool(bvec4(false, true, false, false))))), false, false)))))), max(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, _GLF_IDENTITY(1.0, (1.0) - 0.0), 1.0)))), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), min(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY((vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0), (true ? (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0) : _GLF_FUZZED(vec4(-4.0, -413.947, 0.0, -905.185))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))))), max((_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))))), (_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0))))))) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0), (_GLF_IDENTITY(vec4(1.0), mix(vec4(_GLF_FUZZED(4.7), _GLF_IDENTITY((vec4(1.0))[1], (true ? (vec4(1.0))[1] : _GLF_FUZZED(-2583.0043))), (_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))[2], (vec4(1.0))[3]), vec4((vec4(1.0))[0], _GLF_FUZZED((749.873 + -1.6)), _GLF_FUZZED(-4575.4089), _GLF_FUZZED(-2.4)), bvec4(true, false, false, false)))) / vec4(1.0, 1.0, 1.0, 1.0)), min(_GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))))))), _GLF_IDENTITY(vec4(1.0), (vec4(1.0)) / vec4(1.0, 1.0, 1.0, 1.0)))), _GLF_IDENTITY(mat3(1.0), (true ? mat3(1.0) : _GLF_FUZZED(mat3(90.28, 9.2, -3267.4093, -12.18, -8.8, -3.6, 354.510, -94.39, 1.7)))), mat4x2(1.0), ivec4(1), ivec3(1), bvec3(true), bvec4(true)), vec4(1.0), mat4x2(1.0), _GLF_struct_22(uvec2(1u), _GLF_IDENTITY(vec4(1.0), _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(vec4(vec4(1.0, 1.0, 1.0, 1.0))), mix(vec4((vec4(vec4(vec4(1.0, 1.0, 1.0, 1.0))))[0], _GLF_FUZZED(218.615), (vec4(vec4(vec4(1.0, 1.0, 1.0, 1.0))))[2], (vec4(vec4(vec4(1.0, 1.0, 1.0, 1.0))))[3]), vec4(_GLF_FUZZED(-6.6), (vec4(vec4(vec4(1.0, 1.0, 1.0, 1.0))))[1], _GLF_FUZZED(-7.6), _GLF_FUZZED(77.01)), bvec4(false, true, false, false)))), min(_GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), max(vec4(1.0, 1.0, 1.0, 1.0), _GLF_IDENTITY(vec4(1.0, 1.0, 1.0, 1.0), (vec4(1.0, 1.0, 1.0, 1.0)) - vec4(0.0, 0.0, 0.0, 0.0)))), vec4(1.0, 1.0, 1.0, 1.0))) * (vec4(1.0)), (_GLF_IDENTITY(true, ! (_GLF_IDENTITY(! (true), ! (! (! (true)))))) ? vec4(1.0, 1.0, 1.0, 1.0) * (vec4(1.0)) : _GLF_FUZZED(vec4(-2810.3590, 5.2, -1428.7515, 1.3))))))), _GLF_struct_25(mat3x2(_GLF_IDENTITY(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, _GLF_IDENTITY(0.0 + (1.0), (_GLF_IDENTITY(0.0 + (1.0), float(_GLF_IDENTITY(mat4x3(0.0 + (1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0), transpose(transpose(mat4x3(0.0 + (1.0), 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0))))))) / 1.0)))), _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, _GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat2x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0, 0.0, sin(0.0), 0.0), (false ? _GLF_FUZZED(mat2x3(59.15, -4.4, -5.6, -7.6, 272.492, 96.20)) : mat2x3(_GLF_IDENTITY(0.0, 0.0 + (0.0)), 0.0, 1.0, 0.0, sin(0.0), 0.0))))), 1.0, 0.0, _GLF_IDENTITY(determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED(189.336)), float(1.0), bool(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), 1.0)), max(_GLF_IDENTITY(determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), clamp(determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), determinant(mat3(1.0, _GLF_IDENTITY(0.0, clamp(0.0, _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(1960.6305)), float(0.0), bool(true))), _GLF_IDENTITY(0.0, float(mat4x3(0.0, _GLF_ONE(1.0, injectionSwitch.y), 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))))), sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)))), sqrt(1.0), determinant(mat3(1.0, 0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-954.283) : _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(76.96)), float(0.0), bool(true))))), 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, cos(0.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x))), (true ? _GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, 0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, _GLF_IDENTITY(sin(0.0), clamp(sin(_GLF_IDENTITY(0.0, float(float(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), float(mat2x4(float(mat3x2(0.0, 0.0, 0.0, 1.0, 0.0, 0.0)), 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 0.0)))))))), sin(0.0), sin(0.0))), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, cos(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat3(injectionSwitch, sqrt(1.0), 1.0, abs(0.0), sin(0.0), 0.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))))), max(vec2(mat3(injectionSwitch, sqrt(1.0), 1.0, abs(0.0), sin(0.0), 0.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0))))))), vec2(mat3(injectionSwitch, sqrt(1.0), 1.0, abs(0.0), sin(0.0), 0.0, 1.0, round(length(normalize(exp(vec3(0.0, 0.0, 0.0)))))))))).x))), float(mat2x3(float(mat3x4(_GLF_IDENTITY(1.0, 0.0 + (_GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, 0.0, 1.0, 0.0, determinant(mat3(1.0, 0.0, sin(0.0), 1.0, 1.0, 0.0, 1.0, 1.0, 1.0)), sqrt(1.0), determinant(mat3(1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 1.0)), 0.0, cos(0.0), 0.0, _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, (false ? _GLF_FUZZED(-6.9) : injectionSwitch.x))))), 0.0, 0.0, 0.0, 1.0, 0.0))) : _GLF_FUZZED(7333.0884))))), _GLF_struct_24(gl_WorkGroupID.x, uvec3(1u)), mat3x2(1.0), uvec4(1u)), vec4(1.0), _GLF_struct_27(1, ivec4(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), max(~ (1), _GLF_IDENTITY(~ (1), (~ _GLF_IDENTITY((1), clamp((1), (1), (1)))) | _GLF_IDENTITY(0, (0) + 0))))))), mat4x2(1.0), _GLF_struct_26(_GLF_IDENTITY(mat3(1.0), transpose(transpose(mat3(1.0)))), ivec3(1), ivec4(1), 1u), vec4(_GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(-497.714)), bool(false))))));
 if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, bool(bvec2(false, false)))))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     do
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, vec2(_GLF_IDENTITY(mat2x3(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0))), transpose(transpose(mat2x3(injectionSwitch, 0.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x), determinant(mat3(0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0)))))))), injectionSwitch)).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      barrier();
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, mix(float(injectionSwitch.y), float(_GLF_FUZZED((- 418.140))), bool(false)))) - 0.0)))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint workgroup_base = workgroup_size * _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, (true ? _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, min(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), uint(_GLF_IDENTITY(uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), 0u, 0u, 0u))), _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)))), 1u, 0u, 0u), (uvec4(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), uint(uvec4(_GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), 0u, 0u, 0u))), _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)), _GLF_IDENTITY(_GLF_struct_replacement_28._f4._f1.workgroup_id, max(_GLF_struct_replacement_28._f4._f1.workgroup_id, _GLF_struct_replacement_28._f4._f1.workgroup_id)))), 1u, 0u, 0u)) << uvec4(0u, 0u, 0u, 0u)))))) : _GLF_FUZZED(workgroup_size)));
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bvec3(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))), true, false))))
  barrier();
 uint virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(_GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_size, (false ? _GLF_FUZZED(bitfieldExtract(workgroup_size, 24513, (12300 + -68705))) : _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_size, (_GLF_struct_replacement_0.subgroup_size) | (_GLF_struct_replacement_0.subgroup_size)))), _GLF_IDENTITY((_GLF_struct_replacement_0.subgroup_size) / uint(_GLF_ONE(_GLF_IDENTITY(1.0, min(1.0, 1.0)), injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (_GLF_struct_replacement_0.subgroup_size) / uint(_GLF_ONE(1.0, injectionSwitch.y)) : _GLF_FUZZED(num_workgroup)))) + _GLF_struct_replacement_11.subgroup_local_id;
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_struct_replacement_0.subgroup_size + ((_GLF_IDENTITY(_GLF_struct_replacement_11.subgroup_local_id, (_GLF_struct_replacement_11.subgroup_local_id) / 1u) + 1) % _GLF_struct_replacement_0.subgroup_size);
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(6), _GLF_IDENTITY(int(6), _GLF_IDENTITY((int(6)) / 1, ((int(6)) / 1) | ((int(6)) / 1))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) >> 0) < 1); _injected_loop_counter ++)
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) / 1))
        {
         barrier();
        }
       if(_GLF_DEAD(false))
        barrier();
      }
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      barrier();
     barrier();
    }
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 do
  {
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false)))) && true))
    barrier();
  }
 while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(false))
    barrier();
  }
 else
  {
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint read = atomicLoad(_GLF_IDENTITY(buf[virtual_gid], uint(uvec4(buf[virtual_gid], 0u, 1u, 0u))), _GLF_IDENTITY(4, max(_GLF_IDENTITY(4, max(4, _GLF_IDENTITY(4, clamp(4, 4, 4)))), 4)), 64, 0);
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   do
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), _GLF_IDENTITY(bool(bool(_GLF_WRAPPED_IF_FALSE(false))), (bool(bool(_GLF_WRAPPED_IF_FALSE(false)))) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
        {
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-1730.1914), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(2.8)), bvec2(true, false))))).y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         do
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(false))
            barrier();
          }
         while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        barrier();
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
    {
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(false))
        {
         for(int _injected_loop_counter = ((40815 & 0) & 1966); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
          {
           barrier();
          }
        }
       if(_GLF_DEAD(false))
        barrier();
      }
     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bvec3(false, true, false)))));
    }
  }
 if(_GLF_struct_replacement_11.subgroup_local_id + 1 < _GLF_IDENTITY(_GLF_struct_replacement_0.subgroup_size, (_GLF_struct_replacement_0.subgroup_size) | (_GLF_struct_replacement_0.subgroup_size)))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
      {
       barrier();
      }
    }
   int i = 0;
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
        barrier();
      }
     else
      {
       atomicStore(checker[virtual_gid], _GLF_IDENTITY(read, (read) ^ (0u | 0u)), 4, 64, 4);
      }
    }
   else
    {
    }
  }
 else
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
    {
     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1)))))))))), _GLF_IDENTITY(((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1))))))))))) | 0, int(_GLF_IDENTITY(int(((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1))))))))))) | 0), (_GLF_IDENTITY(int(((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1))))))))))) | 0), (int(((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1))))))))))) | 0)) | (int(((0 >> _GLF_IDENTITY(int(3), _GLF_IDENTITY(int(3), ~ (~ (_GLF_IDENTITY(int(3), int(ivec4(int(3), 1, 0, _GLF_IDENTITY(1, max(1, 1))))))))))) | 0)))) >> 0))))); _injected_loop_counter --)
      {
       if(_GLF_DEAD(false))
        barrier();
       do
        {
         atomicStore(checker[virtual_gid], read, 4, 64, 4);
        }
       while(_GLF_WRAPPED_LOOP(false));
       if(_GLF_DEAD(false))
        barrier();
      }
    }
   else
    {
     if(_GLF_DEAD(false))
      barrier();
    }
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_TRUE(true))
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter, (_injected_loop_counter) / int(_GLF_ONE(1.0, injectionSwitch.y))) != 0); _injected_loop_counter --)
        {
         barrier();
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      barrier();
    }
   else
    {
    }
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
