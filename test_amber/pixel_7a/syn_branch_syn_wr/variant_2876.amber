#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
  {
   do
    {
     return;
    }
   while(_GLF_WRAPPED_LOOP(false));
  }
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, uint(_GLF_ZERO(0.0, injectionSwitch.x)) + (gl_WorkGroupSize.x));
 for(int _injected_loop_counter = _GLF_IDENTITY(1, min(1, _GLF_IDENTITY(1, (1) | (1)))); _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
  {
   if(_GLF_DEAD(false))
    return;
  }
 if(_GLF_DEAD(false))
  {
   do
    {
     for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), int(_GLF_IDENTITY(5, max(_GLF_IDENTITY(5, max(5, 5)), 5))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < (1 & 1)); _GLF_IDENTITY(_injected_loop_counter ++, (true ? _injected_loop_counter ++ : _GLF_FUZZED(76988))))
      {
       if(_GLF_DEAD(false))
        break;
       return;
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, bool(bool(false)))));
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(false))
        return;
       return;
       if(_GLF_DEAD(false))
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
          }
         else
          {
           if(_GLF_DEAD(false))
            return;
          }
         return;
        }
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) >> 0u)) - 0u) * _GLF_IDENTITY(workgroup_id, clamp(workgroup_id, workgroup_id, workgroup_id)), 0u | (_GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) >> 0u)) - 0u) * workgroup_id, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) >> 0u)) - 0u) * workgroup_id) | (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size))) >> 0u)) - 0u) * workgroup_id))));
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  return;
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, clamp(_GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, (false ? _GLF_FUZZED(56309u) : workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size)), workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, min(_GLF_IDENTITY(subgroup_id, 0u ^ (subgroup_id)), subgroup_id)), (subgroup_id) + 0u) * subgroup_size) | (workgroup_base + _GLF_IDENTITY(_GLF_IDENTITY(subgroup_id, (subgroup_id) + 0u) * subgroup_size, (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) / vec2(1.0, 1.0)).x > injectionSwitch.y)) ? _GLF_FUZZED(57433u) : _GLF_IDENTITY(subgroup_id, _GLF_IDENTITY((subgroup_id), max(_GLF_IDENTITY((subgroup_id), max((subgroup_id), (subgroup_id))), (subgroup_id))) + 0u) * subgroup_size)))))) + _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, subgroup_local_id));
 uint next_virtual_gid = _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, min(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u), (0u << _GLF_IDENTITY(uint(1u), uint(1u))) + (_GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, (workgroup_base + subgroup_id * subgroup_size) / 1u))))) + ((_GLF_IDENTITY(_GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, clamp(subgroup_local_id, subgroup_local_id, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) | (subgroup_local_id)))), subgroup_local_id)), ~ (~ (subgroup_local_id))) + 1) % subgroup_size);
 for(int _injected_loop_counter = int(_GLF_ZERO(0.0, injectionSwitch.x)); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (~ (1)) | (~ (1)))))); _injected_loop_counter ++)
  {
   for(int _injected_loop_counter = _GLF_IDENTITY(_GLF_IDENTITY(1, ~ (_GLF_IDENTITY(~ (1), (false ? _GLF_FUZZED(_injected_loop_counter) : ~ (1))))), (1) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), (_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec3(bvec3(bvec3(_GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true)), (bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), false, true))) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))))))) || false)))), _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))) && true), (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, (_GLF_IDENTITY((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false, false || ((_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false))) && true)) && true)))
        {
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           do
            {
             if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(false), false || (_GLF_WRAPPED_IF_FALSE(false))))
              {
              }
             else
              {
               return;
              }
            }
           while(_GLF_WRAPPED_LOOP(false));
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             continue;
            }
           if(_GLF_DEAD(false))
            break;
          }
        }
       else
        {
         if(_GLF_DEAD(false))
          return;
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             do
              {
               for(int _injected_loop_counter = 0; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))), false))); _injected_loop_counter ++)
                {
                 for(int _injected_loop_counter = 1; _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, true && (_GLF_IDENTITY(_injected_loop_counter > 0, (_injected_loop_counter > 0) || false)))), bool(bvec2(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false))))); _injected_loop_counter --)
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                return;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))));
            }
          }
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
         if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (false))))
          return;
        }
      }
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    continue;
  }
 atomicStore(buf[_GLF_IDENTITY(next_virtual_gid, (false ? _GLF_FUZZED(subgroup_id) : next_virtual_gid))], uint(1), 4, 64, 4);
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y))); _injected_loop_counter ++)
  {
   do
    {
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           do
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
           while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
          }
         else
          {
          }
        }
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         do
          {
           if(_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), _GLF_IDENTITY(0, (false ? _GLF_FUZZED(_injected_loop_counter) : 0))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), ~ (~ ((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), (_GLF_IDENTITY(clamp(subgroup_local_id + _GLF_IDENTITY(1, ~ (~ (1))), _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), ~ (_GLF_IDENTITY(~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1))), (~ (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) << 0))) >> 0)) | (1)))) - 0))), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, int(ivec3(1, 1, 0)))) | 0)), min((_GLF_IDENTITY(1, (true ? 1 : _GLF_FUZZED(52180)))) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), int(ivec4((1), 1, 1, 0)))), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), ((1)) >> 0)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), uint(uvec4(_GLF_IDENTITY(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), uint(uvec3(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) << 0), (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), 1u, 1u))), 1u, 0u, (0u | 0u))))) | (clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))))), (_GLF_IDENTITY(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, min((subgroup_local_id) / 1u, (subgroup_local_id) / 1u))) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), (1) | _GLF_IDENTITY(_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), (1))))), ~ (~ (_GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), clamp((1), (1), _GLF_IDENTITY((1), (false ? _GLF_FUZZED(78093) : _GLF_IDENTITY((1), (_GLF_IDENTITY((1), ~ (~ ((1))))) - 0)))))))))))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), mix(float(_GLF_FUZZED(0.2)), float(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(determinant(mat4(3.7, -6.3, -0.9, 3.7, -33.69, -5.4, 1.6, 5.7, 4101.1516, -8.8, -501.346, 6114.5129, -91.49, -4.7, -185.953, -1.5))) : _GLF_ZERO(0.0, injectionSwitch.x)))), bool(true)))), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - _GLF_IDENTITY(ivec3(0, 0, 0), ivec3(1, 1, 1) * (ivec3(0, 0, 0))), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1), (false ? _GLF_FUZZED(6765) : clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)))), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), max(_GLF_IDENTITY(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), clamp(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1), (0 << _GLF_IDENTITY(int(0), int(0))) ^ ((1))) | (1)), 1, 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)))), _GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), clamp(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((1), ((1)) << 0) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1), (_GLF_IDENTITY(clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1), (clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)) | (clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)))) ^ 0)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))), (((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))) - 0) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, _GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) << 0)) + 0)), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), ((1) | (1)) - 0)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) | (0)), _GLF_IDENTITY(0, (0) / 1)))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) >> 0)) | (1)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | (1)), (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | (1)), 0 ^ (_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | (1))))) >> 0), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), _GLF_IDENTITY(0, min(_GLF_IDENTITY(_GLF_IDENTITY(0, (0) | (0)), (0) >> 0), 0)))) - ivec3(0, 0, 0)))) / 1))), _GLF_IDENTITY(_GLF_IDENTITY(clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(_GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) / 1)))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - _GLF_IDENTITY(ivec3(0, 0, 0), min(_GLF_IDENTITY(ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(4162, -17602, 49305)) : ivec3(0, 0, 0))), ivec3(0, 0, 0))))))), 0 ^ (int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) ^ 0), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) / 1)))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - _GLF_IDENTITY(ivec3(0, 0, 0), min(_GLF_IDENTITY(ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(4162, -17602, 49305)) : ivec3(0, 0, 0))), ivec3(0, 0, 0))))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (_GLF_IDENTITY(1, ~ (~ (1))))), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), max((1), (1)))), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))), (clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))), ((_GLF_IDENTITY(1, (1) | (1)))) >> 0) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(_GLF_IDENTITY(7, (7) | 0)))) * (int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | 0)) - 0), (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1)))) << 0u), 0u ^ (clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, _GLF_IDENTITY((subgroup_local_id) / 1u, ((subgroup_local_id) / 1u) << 0u)) + 1, _GLF_IDENTITY(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, _GLF_IDENTITY(0, clamp(0, 0, _GLF_IDENTITY(0, (0) | 0)))), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x))), (_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))) * abs(1.0))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, _GLF_IDENTITY(clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1), int(ivec2(clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1), 0)))), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1)), clamp(subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1), max((1), _GLF_IDENTITY((1), ((1)) << 0))) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | _GLF_IDENTITY((1), int(_GLF_ZERO(0.0, injectionSwitch.x)) ^ ((1)))), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1)), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, ~ (~ (1))), clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(_GLF_IDENTITY(7, int(ivec3(7, 0, 1)))), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1), ~ (~ ((1)))) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)), injectionSwitch.x)))))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x), (false ? _GLF_IDENTITY(_GLF_FUZZED(47.07), min(_GLF_IDENTITY(_GLF_FUZZED(47.07), clamp(_GLF_FUZZED(47.07), _GLF_FUZZED(47.07), _GLF_FUZZED(47.07))), _GLF_IDENTITY(_GLF_FUZZED(47.07), mix(float(_GLF_FUZZED(9398.0082)), float(_GLF_FUZZED(47.07)), bool(true))))) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(_GLF_IDENTITY(1, min(1, 1)), clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(_GLF_IDENTITY(0, (_GLF_IDENTITY(0, (0) / 1)) + 0), 0, 0)))) / 1)), subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), _GLF_IDENTITY(1, clamp(1, 1, _GLF_IDENTITY(1, (1) / 1))), 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(_GLF_IDENTITY(int(7), int(7)), max(_GLF_IDENTITY(int(7), int(7)), _GLF_IDENTITY(int(7), int(7))))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))), clamp(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))), _GLF_IDENTITY(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))), ivec3(ivec3(_GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))))), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(ivec3(-87687, -75101, 99314)) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0))))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1))))))), clamp(subgroup_local_id + 1, _GLF_IDENTITY(subgroup_local_id, (subgroup_local_id) / 1u) + 1, subgroup_local_id + _GLF_IDENTITY(_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(1, (1) | (1))) >> 0)) | (1)), _GLF_IDENTITY(int(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, _GLF_IDENTITY((1) | (1), min((1) | (1), (1) | (1)))), 1, 1)), _GLF_IDENTITY(int(_GLF_ZERO(0.0, injectionSwitch.x)), ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7))) * (int(_GLF_ZERO(0.0, injectionSwitch.x)))), 0), _GLF_IDENTITY((ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0), (false ? _GLF_FUZZED(_GLF_IDENTITY(ivec3(-87687, -75101, 99314), (ivec3(-87687, -75101, 99314)) ^ ivec3(0, _GLF_IDENTITY(0, (true ? 0 : _GLF_FUZZED(15383))), 0))) : (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)))), 0)) - ivec3(_GLF_IDENTITY(0, clamp(0, 0, 0)), 0, 0))))), (int(_GLF_IDENTITY(_GLF_IDENTITY(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(_GLF_IDENTITY(1, (1) | (1)), (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(0.0, injectionSwitch.x)))), 0), ivec3(ivec3(ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(47.07) : _GLF_ZERO(_GLF_IDENTITY(0.0, max(0.0, 0.0)), injectionSwitch.x)))), 0)))), (ivec3(_GLF_IDENTITY(1, clamp(_GLF_IDENTITY(1, (1) | (1)), 1, 1)), int(_GLF_ZERO(0.0, injectionSwitch.x)), 0)) - ivec3(0, 0, 0)))) / 1)))))) | 0u)) < subgroup_size)
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
              {
               if(_GLF_DEAD(false))
                return;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                   if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), true && (bool(bvec3(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                }
               break;
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                }
               else
                {
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y)))))))
                continue;
               continue;
              }
             if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) && true)))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bool(false), (bool(false)) || false)))))
                  continue;
                 return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  return;
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   do
                    {
                     return;
                    }
                   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  break;
                }
               else
                {
                 if(_GLF_DEAD(false))
                  break;
                }
              }
             int i = 0;
             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _GLF_IDENTITY(_injected_loop_counter --, (_injected_loop_counter --) + _GLF_IDENTITY(0, clamp(0, _GLF_IDENTITY(0, (0) >> (0 << _GLF_IDENTITY(int(1), int(1)))), 0))))
              {
               if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, min(_GLF_IDENTITY(injectionSwitch.x, mix(float(_GLF_FUZZED(0.6)), float(injectionSwitch.x), bool(true))), injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], (injectionSwitch)[1]), vec2(_GLF_FUZZED(-8.3), _GLF_FUZZED(32.05)), bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))).y))))))))))
                {
                }
               else
                {
                 for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != (0 >> _GLF_IDENTITY(int(1), int(1)))); _injected_loop_counter --)
                  {
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    {
                     for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       return;
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_IDENTITY(_GLF_WRAPPED_LOOP(_injected_loop_counter > 0), false || (_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter > 0, ! (_GLF_IDENTITY(! (_injected_loop_counter > 0), ! (! (! (_injected_loop_counter > 0))))))))); _injected_loop_counter --)
                        {
                         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).y))), ! (! (_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))))).y)))))))
                          {
                           if(_GLF_DEAD(false))
                            continue;
                           if(_GLF_DEAD(false))
                            break;
                          }
                         else
                          {
                           if(_GLF_DEAD(false))
                            {
                             if(_GLF_DEAD(false))
                              continue;
                             continue;
                            }
                           if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false))
                            {
                             if(_GLF_WRAPPED_IF_TRUE(true))
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             else
                              {
                              }
                             if(_GLF_WRAPPED_IF_FALSE(false))
                              {
                              }
                             else
                              {
                               if(_GLF_DEAD(false))
                                return;
                              }
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                          }
                         if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(_GLF_IDENTITY(false, (false) && true))))))
                          continue;
                         if(_GLF_DEAD(false))
                          {
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            continue;
                           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                            return;
                           do
                            {
                             for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter != int(_GLF_ZERO(0.0, injectionSwitch.x))); _injected_loop_counter --)
                              {
                               if(_GLF_DEAD(false))
                                return;
                               if(_GLF_DEAD(false))
                                continue;
                              }
                            }
                           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (! (false))))))));
                           return;
                          }
                        }
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_WRAPPED_IF_FALSE(false))
                      {
                      }
                     else
                      {
                       return;
                      }
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              {
               if(_GLF_WRAPPED_IF_FALSE(false))
                {
                }
               else
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) && true)))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false), ! (! (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))) && true))))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))
                  break;
                 break;
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
                  return;
                }
               return;
               if(_GLF_DEAD(false))
                continue;
              }
             atomicStore(checker[virtual_gid], read, 4, 64, 4);
            }
           else
            {
             if(_GLF_DEAD(false))
              {
               do
                {
                 return;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
             if(_GLF_DEAD(false))
              continue;
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             if(_GLF_DEAD(_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, true && (false))))))
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, bool(bvec2(_GLF_IDENTITY((false) || false, ! (! ((false) || false))), true))))))
                {
                 if(_GLF_DEAD(false))
                  break;
                 continue;
                 if(_GLF_DEAD(false))
                  return;
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               do
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                   for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY(1, ~ (~ (1)))); _injected_loop_counter ++)
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        break;
                       break;
                      }
                     break;
                    }
                   if(_GLF_DEAD(false))
                    {
                     do
                      {
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                  }
                 else
                  {
                   for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > (0 & 63655)); _injected_loop_counter --)
                    {
                     return;
                    }
                   if(_GLF_DEAD(false))
                    return;
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))), bool(bvec3(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), false, true))));
              }
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              break;
             do
              {
               atomicStore(checker[virtual_gid], read, 4, 64, 4);
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, (false) || false)));
             if(_GLF_DEAD(false))
              break;
             if(_GLF_DEAD(false))
              break;
             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < int(_GLF_ONE(1.0, injectionSwitch.y))); _GLF_IDENTITY(_injected_loop_counter ++, (_injected_loop_counter ++) >> (0 << _GLF_IDENTITY(int(8), int(8)))))
              {
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                break;
               do
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  {
                   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)))), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))))) || false))
                    continue;
                   if(_GLF_WRAPPED_IF_FALSE(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) || false)))))
                      {
                       do
                        {
                         if(_GLF_DEAD(false))
                          {
                           for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(1), _GLF_IDENTITY(int(1), min(int(1), int(1))))); _GLF_WRAPPED_LOOP(_injected_loop_counter < ((1 << _GLF_IDENTITY(int(7), int(7))) >> _GLF_IDENTITY(int(7), int(7)))); _injected_loop_counter ++)
                            {
                             for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                              {
                               return;
                              }
                            }
                          }
                         do
                          {
                           return;
                          }
                         while(_GLF_WRAPPED_LOOP(false));
                        }
                       while(_GLF_WRAPPED_LOOP(false));
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
                      break;
                     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).y, bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(vec2(7659.6224, 3.2), injectionSwitch, injectionSwitch)) : injectionSwitch)), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(0.0, 0.0) + (injectionSwitch)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(smoothstep(vec2(7659.6224, 3.2), injectionSwitch, injectionSwitch)) : injectionSwitch))) * mat2(1.0)).x > injectionSwitch.y, ! (_GLF_IDENTITY(_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bvec3(! (injectionSwitch.x > injectionSwitch.y), false, true))), _GLF_IDENTITY(bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, true)), false || (bool(bvec4(! (injectionSwitch.x > injectionSwitch.y), true, false, true)))))))), true && (bool(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x > injectionSwitch.y, ! (_GLF_IDENTITY(! (injectionSwitch.x > injectionSwitch.y), bool(bool(! (injectionSwitch.x > injectionSwitch.y))))))) || false))))))))))
                      {
                       if(_GLF_WRAPPED_IF_TRUE(true))
                        {
                         return;
                        }
                       else
                        {
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                         if(_GLF_DEAD(false))
                          continue;
                         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                          break;
                        }
                      }
                     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), false || (_GLF_IDENTITY(false, false || (false))))))
                      return;
                    }
                   else
                    {
                     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
                          {
                           if(_GLF_WRAPPED_IF_TRUE(true))
                            {
                             for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
                              {
                               for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(3), int(3))) >> _GLF_IDENTITY(int(3), int(3))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                                {
                                 return;
                                }
                              }
                            }
                           else
                            {
                            }
                          }
                        }
                      }
                     return;
                     if(_GLF_DEAD(false))
                      break;
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        {
                        }
                       else
                        {
                         if(_GLF_DEAD(false))
                          return;
                        }
                       break;
                      }
                    }
                   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_DEAD(false)))))))
                    {
                     if(_GLF_DEAD(false))
                      return;
                     if(_GLF_WRAPPED_IF_TRUE(true))
                      {
                       return;
                      }
                     else
                      {
                      }
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     return;
                    }
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     if(_GLF_DEAD(false))
                      continue;
                     continue;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      {
                       if(_GLF_DEAD(false))
                        continue;
                       return;
                      }
                     break;
                    }
                  }
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)))))), (! (_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))))))) || false)))), bool(bvec2(_GLF_WRAPPED_LOOP(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, true && (false))))), (injectionSwitch.x > injectionSwitch.y))), true))));
              }
             do
              {
               if(_GLF_DEAD(false))
                return;
               if(_GLF_DEAD(false))
                {
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   return;
                  }
                 else
                  {
                  }
                }
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                break;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              {
               do
                {
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                 if(_GLF_DEAD(false))
                  break;
                }
               while(_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true)), ! (! (! (_GLF_IDENTITY(_GLF_WRAPPED_LOOP(false), (_GLF_WRAPPED_LOOP(false)) && true))))))));
              }
            }
          }
         while(_GLF_WRAPPED_LOOP(false));
        }
       if(_GLF_DEAD(false))
        continue;
      }
     if(_GLF_DEAD(false))
      {
       do
        {
         return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
    }
   while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
  }
 if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
  {
   do
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, _GLF_IDENTITY(injectionSwitch, clamp(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, vec2(mat3x2(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), 1.0, 1.0, 1.0, 1.0))))), injectionSwitch, injectionSwitch)))).x < _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, 1.0 * (_GLF_IDENTITY(injectionSwitch.y, max(injectionSwitch.y, injectionSwitch.y))))) / 1.0))) ? injectionSwitch.x : _GLF_FUZZED(6.4))) > injectionSwitch.y))))
      {
       for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_DEAD(false))
          break;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, 1 * (_injected_loop_counter --)))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            break;
           return;
          }
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), bvec2(bvec4(_GLF_IDENTITY(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), bvec2(bvec4(bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), false)), true, true))), _GLF_IDENTITY(true, bool(bvec4(true, true, true, true))), false))))), (bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true), bvec2(bvec3(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(true, ! (! (true)))), false))))) || false))))
          {
           if(_GLF_DEAD(false))
            return;
           if(_GLF_DEAD(false))
            continue;
           return;
          }
         if(_GLF_DEAD(false))
          break;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         continue;
        }
      }
    }
   while(_GLF_WRAPPED_LOOP(false));
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
    }
   else
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(false))
      return;
    }
  }
 else
  {
  }
 if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
