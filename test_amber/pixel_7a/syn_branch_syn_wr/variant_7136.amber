#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 uint subgroup_size = gl_SubgroupSize;
 uint subgroup_local_id = gl_SubgroupInvocationID;
 uint num_workgroup = gl_NumWorkGroups.x;
 uint workgroup_size = _GLF_IDENTITY(gl_WorkGroupSize.x, (gl_WorkGroupSize.x) >> 0u);
 if(_GLF_WRAPPED_IF_FALSE(false))
  {
  }
 else
  {
   for(int _injected_loop_counter = (0 >> _GLF_IDENTITY(int(5), _GLF_IDENTITY(int(5), (int(5)) ^ (0 >> _GLF_IDENTITY(int(3), int(3)))))); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), true && (_GLF_IDENTITY(_injected_loop_counter != int(_GLF_ONE(1.0, injectionSwitch.y)), ! (! (_injected_loop_counter != int(_GLF_ONE(1.0, _GLF_IDENTITY(injectionSwitch.y, min(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y)))))))))); _injected_loop_counter ++)
    {
     if(_GLF_WRAPPED_IF_TRUE(true))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
          {
           return;
          }
        }
      }
     else
      {
      }
    }
  }
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(false))
  return;
 uint workgroup_base = _GLF_IDENTITY(_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, _GLF_IDENTITY(workgroup_size, (workgroup_size) ^ (0u << _GLF_IDENTITY(uint(0u), uint(0u)))))) * workgroup_id, 0u + (_GLF_IDENTITY(workgroup_size, clamp(workgroup_size, workgroup_size, workgroup_size)) * workgroup_id));
 do
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat4(injectionSwitch.y, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, length(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, length(0.0)), vec3(0.0, 1.0, 1.0))), 0.0)), (false ? _GLF_FUZZED(569.576) : float(mat4(injectionSwitch.y, 0.0, exp(0.0), 0.0, 0.0, 1.0, 0.0, _GLF_ONE(1.0, injectionSwitch.y), determinant(mat3(1.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 1.0, 1.0, exp(0.0), 0.0, 0.0, _GLF_IDENTITY(dot(vec3(1.0, 0.0, length(0.0)), vec3(0.0, 1.0, 1.0)), dot(vec3(1.0, 0.0, length(0.0)), vec3(0.0, 1.0, 1.0))), 0.0)))))))))
    break;
   if(_GLF_WRAPPED_IF_FALSE(false))
    {
     if(_GLF_DEAD(false))
      break;
     if(_GLF_DEAD(false))
      return;
    }
   else
    {
     if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, (false) || false)))), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, ! (! (false)))))) || false, ! (! ((_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec2(false, false)))))) && true), true && (_GLF_IDENTITY(false, ! (! (false)))))) || false)))))), (_GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false))), bool(bvec3(_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false))), (! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) && true), (false) || false)))) && true)) || false), true, false))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), bool(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true)))) && true)) || false), true), bvec2(bvec3(bvec2(! _GLF_IDENTITY((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || false))) || false)) && true)), ! (! ((! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), (_GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), ((_GLF_IDENTITY(false, (false) || false))) || false)) && true))))), true), true)))), ! (! _GLF_IDENTITY((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false))))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false))))))))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec4((_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), true))), false, false)), _GLF_IDENTITY(true, ! (! (true))))))))), ! (! ((bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false))))))), bool(bool(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), false || (! (! (_GLF_IDENTITY(false, (false) || false))))))))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))), _GLF_IDENTITY(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, (false) || false)))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))), false, false)), bvec2(bvec3(bvec2(bvec4(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! _GLF_IDENTITY((_GLF_IDENTITY(false, (false) || false)), bool(bvec4((_GLF_IDENTITY(false, (false) || false)), _GLF_IDENTITY(true, (true) && true), false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))), true), true))), false, false)), _GLF_IDENTITY(true, ! (! (true))))))))))))))))), bool(bvec3(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))), (! (! (_GLF_IDENTITY(false, (false) || false)))) || false), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (false) || false))), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), ((false)) || false) || false)))))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))))))), bool(_GLF_IDENTITY(bool((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))), (! (! (_GLF_IDENTITY(false, (false) || false)))) || false), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (false) || false))), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), ((false)) || false) || false)))))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))))))))))), (bool((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), ! (! (! (! (_GLF_IDENTITY(false, (false) || false))))))))), (! (! (_GLF_IDENTITY(false, (false) || false)))) || false), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, true, true))), (false) || false))), true), true)))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), false || (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((false), ((false)) || false) || false)))))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))))))))) && true))), false, true))) && true), bool(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(false, ! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), bool(bvec2(_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(false, (false) || false))) && true), false))))) && true)), _GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (! (_GLF_IDENTITY((false) || false, ((false) || false) || false))) && true)) || false)))))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true), true, false, true))) || false))), true), true)))), _GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true))))))))), ! (! (_GLF_IDENTITY(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true))))))))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true)))))))))), true && (! (_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))), ! (_GLF_IDENTITY(! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true))))))), bool(bvec3(_GLF_IDENTITY(! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true))))))), false || (! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))))) && true)), true), true))))))))), true, true))))))))))))))), ! (! (_GLF_IDENTITY(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, false || (false)), (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true)))) || false)), (! (_GLF_IDENTITY((false) || false, ((false) || false) || false))) && true)) || false)))))), (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true)))) || false)), (! (_GLF_IDENTITY((false) || false, ((false) || false) || false))) && true)) || false)))))), false || (_GLF_IDENTITY(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true)))) || false)), (! (_GLF_IDENTITY((false) || false, ((false) || false) || false))) && true)) || false)))))), ! (! (! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || false) || false)), (_GLF_IDENTITY(! (_GLF_IDENTITY((false) || false, ((false) || _GLF_IDENTITY(false, bool(bvec3(_GLF_IDENTITY(false, bool(bvec2(false, false))), true, true)))) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY((false) || false, ((false) || false) || false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY((false) || false, ((false) || false) || false))))) && true)) || false)))))))))))) && true), true), bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true, bool(bool((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true)))), true, false, true))) || false))), (_GLF_IDENTITY((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true, bool(bool((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true)))), true, false, true))) || false))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), _GLF_IDENTITY((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true, bool(bool((_GLF_IDENTITY((false), false || (_GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), bool(bool(! ((false)))))))))) && true)))), true, false, true))) || false)))))) && _GLF_IDENTITY(true, true && (true))), true), true)))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))), ! (! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, _GLF_IDENTITY((false), bool(bvec2((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))) || false)), (! (_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec4(false, true, true, true))), _GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(_GLF_IDENTITY(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), ((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))) || false), false || ((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), ((false)) && true))))))), true, true, false))), false, _GLF_FALSE(_GLF_IDENTITY(false, bool(bvec4(false, true, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true))), (injectionSwitch.x > injectionSwitch.y)), true)), false || (_GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(_GLF_IDENTITY((false) || _GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || (_GLF_IDENTITY(false, ! (! _GLF_IDENTITY((false), (_GLF_IDENTITY((false), false || ((false)))) && true))))), false || ((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true)))), true, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true)), (bool(bvec4(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), bool(bvec4(_GLF_IDENTITY((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))), false || ((false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false))))))), true, true, false))), false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true))) && true))))))) && true)), true), true)))))))))))))))) && true, _GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || false))), ((! (_GLF_IDENTITY(false, (false) || false)))) || false), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || false))), _GLF_IDENTITY(bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), bool(bool(true && (false))))), (false) || false))), false, true, false)), ! (! (bool(bvec4((! (_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (false) || _GLF_IDENTITY(false, (false) || false)))), false, true, false)))))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, ! (! ((false) || false)))))), true), true)), _GLF_IDENTITY(bvec2(bvec3(bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)), true)), bvec2(bvec4(bvec2(bvec3(bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), ! (! (_GLF_IDENTITY(false, (false) || false)))))), _GLF_IDENTITY(true, false || (true))), true)), true)), true, _GLF_IDENTITY(true, true && (true)))))))), ! (! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), _GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), true && ((false) || _GLF_IDENTITY(false, true && (false))))))))), true), true)), bvec2(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && _GLF_IDENTITY((false), bool(bvec3(_GLF_IDENTITY((false), bool(bvec4(_GLF_IDENTITY((false), ! (! ((false)))), false, true, false))), true, false))))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), true && ((false) || _GLF_IDENTITY(false, true && (false))))))))), true), true)), bvec2(bvec4(bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, _GLF_IDENTITY(true && (false), false || (true && _GLF_IDENTITY((false), ! (_GLF_IDENTITY(! ((false)), (! ((false))) && true))))))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), true && ((false) || _GLF_IDENTITY(false, true && (false))))))))), true), true)), false, true)))), bvec2(bvec3(bvec2(_GLF_IDENTITY(bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), true && ((false) || _GLF_IDENTITY(false, true && (false))))))))), true), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bool(true), ! (! (bool(true)))))))), bvec2(bvec4(bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) && true)), bool(bvec2(! (_GLF_IDENTITY(false, (false) && true)), false))))), true && (false))))), true && ((! (_GLF_IDENTITY(false, _GLF_IDENTITY((false) || _GLF_IDENTITY(false, true && (false)), true && ((false) || _GLF_IDENTITY(false, true && (false))))))))), true), true)), false, true)))), false))))))), ! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (_GLF_IDENTITY(false, (false) && true)) || false))), true), bvec2(bvec3(bvec2(! _GLF_IDENTITY((! (_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), false)), true && (bool(bvec2(_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))), false))))))), _GLF_IDENTITY(true && ((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false)))))), true && (true && ((! (_GLF_IDENTITY(false, (false) || _GLF_IDENTITY(false, true && (false))))))))), true), true))))))))))))) && true, false, _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))))), _GLF_IDENTITY((_GLF_IDENTITY(bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true))))), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (false) || false))), true), true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true), bvec3(bvec3(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))))))))))))) && true, false, true)), (bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_IDENTITY(true, false || (true))))), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, false || (false))) || false), (false) || false))), true), true))))), ! (! (! (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(_GLF_IDENTITY(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true), bvec3(bvec3(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true)))))))))))))))) && true, false, true))) || false)) && true, bool(bool((bool(bvec3((_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, (false) || false)), ! (! (! (_GLF_IDENTITY(false, (false) || false)))))), _GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(vec2(injectionSwitch)), _GLF_IDENTITY((vec2(vec2(injectionSwitch))) * mat2(1.0), clamp((vec2(vec2(injectionSwitch))) * mat2(1.0), (vec2(vec2(injectionSwitch))) * mat2(1.0), (vec2(vec2(injectionSwitch))) * mat2(1.0))))).y)) || (_GLF_IDENTITY(true, false || (true))))), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, ! (! (_GLF_IDENTITY(true, (true) && true))))), true)))), ! (_GLF_IDENTITY(! (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true)))))), true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true)))))), true)))), (bool(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), _GLF_IDENTITY(true, bool(_GLF_IDENTITY(bvec2(true, false), bvec2(bvec3(bvec2(true, false), true)))))), true))))) || false)) || false)), ! (! (! (bool(_GLF_IDENTITY(_GLF_IDENTITY(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), bvec2(bvec4(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), false, false))), bvec2(bvec3(bvec2(! (! (_GLF_IDENTITY(false, (false) || false))), true), true))))))))))))) && true, false, true))) && true)))))), true, false))), true && (false))))
      return;
    }
  }
 while(_GLF_WRAPPED_LOOP(false));
 if(_GLF_DEAD(false))
  return;
 uint virtual_gid = workgroup_base + subgroup_id * subgroup_size + subgroup_local_id;
 if(_GLF_DEAD(false))
  return;
 uint next_virtual_gid = workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) ^ 0u)) | (_GLF_IDENTITY(subgroup_size, 0u ^ (subgroup_size)))), (_GLF_IDENTITY(subgroup_id * subgroup_size, 0u | (subgroup_id * subgroup_size))) * 1u) + _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (((_GLF_IDENTITY(subgroup_local_id + 1, _GLF_IDENTITY((subgroup_local_id + 1) * (0u ^ (1u & 1u)), (0u | 0u) | ((subgroup_local_id + 1) * (0u ^ (1u & 1u)))))) % subgroup_size)) | (_GLF_IDENTITY(_GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), (true ? _GLF_IDENTITY(((subgroup_local_id + _GLF_IDENTITY(1, (1) | 0)) % subgroup_size), clamp(((subgroup_local_id + 1) % _GLF_IDENTITY(subgroup_size, (subgroup_size) * uint(_GLF_ONE(1.0, injectionSwitch.y)))), ((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY(((subgroup_local_id + 1) % subgroup_size), _GLF_IDENTITY((((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size)), ((((subgroup_local_id + 1) % subgroup_size)) | (((subgroup_local_id + 1) % subgroup_size))) / 1u)))) : _GLF_FUZZED(workgroup_size))), clamp(((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size), ((subgroup_local_id + 1) % subgroup_size)))));
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   do
    {
     atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
     if(_GLF_DEAD(false))
      continue;
     do
      {
       for(int _injected_loop_counter = ((0 | 0) | 0); _GLF_WRAPPED_LOOP(_injected_loop_counter < _GLF_IDENTITY((1 ^ 0), ((1 ^ 0)) - 0)); _injected_loop_counter ++)
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
          {
           if(_GLF_DEAD(false))
            {
             if(_GLF_DEAD(false))
              return;
             return;
            }
           return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          {
           if(_GLF_DEAD(false))
            break;
           continue;
          }
        }
      }
     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
    }
   while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y))));
   if(_GLF_DEAD(false))
    return;
  }
 else
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_WRAPPED_IF_TRUE(true))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-69.48)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true))), float(_GLF_IDENTITY(mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-69.48)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true))), 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0), _GLF_IDENTITY((mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-69.48)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true))), 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0)) * mat2(1.0), mat2x4(mat3x4((mat2x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-69.48)), float(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), bool(true))), 1.0, 1.0, sin(0.0), 1.0, 1.0, 0.0, 0.0)) * mat2(1.0)))))))))))
    {
     if(_GLF_DEAD(false))
      return;
     return;
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 else
  {
   if(_GLF_DEAD(false))
    return;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    return;
  }
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
  return;
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    return;
   return;
  }
 for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
  {
   if(subgroup_local_id + 1 < _GLF_IDENTITY(subgroup_size, ~ (_GLF_IDENTITY(~ (subgroup_size), max(~ (subgroup_size), ~ (subgroup_size))))))
    {
     if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, (true) && true)))
      {
       do
        {
         if(_GLF_WRAPPED_IF_FALSE(false))
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
             if(_GLF_DEAD(false))
              break;
             return;
            }
          }
         else
          {
           for(int _injected_loop_counter = (0 << _GLF_IDENTITY(int(_GLF_IDENTITY(5, (5) | (5))), int(5))); _GLF_WRAPPED_LOOP(_injected_loop_counter != _GLF_IDENTITY(1, (1) - 0)); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x, (true ? _GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x : _GLF_FUZZED(91.23))) > injectionSwitch.y))))
              {
               if(_GLF_WRAPPED_IF_TRUE(true))
                {
                 do
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), (! (false)) || false)))))
                    {
                     do
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        continue;
                       if(_GLF_DEAD(false))
                        break;
                       return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   if(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(false, true && (false))) || false)))
                    {
                    }
                   else
                    {
                     if(_GLF_DEAD(false))
                      return;
                    }
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      {
                       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                        break;
                       return;
                      }
                    }
                   else
                    {
                    }
                  }
                 while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                }
               else
                {
                }
               if(_GLF_DEAD(false))
                return;
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 break;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(false))
                  continue;
                 if(_GLF_DEAD(false))
                  continue;
                 return;
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                continue;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_WRAPPED_IF_FALSE(false))
                  {
                  }
                 else
                  {
                   return;
                  }
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(true, bool(bvec4(true, true, false, false))) && (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (_GLF_IDENTITY(! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)))))), (! (_GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0)), ! (! ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))))))) || false)))))) && true)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(0.6)), vec2(_GLF_FUZZED(-6.3), (injectionSwitch)[1]), bvec2(false, true))).y), (_GLF_IDENTITY(_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false)), true && (bool(bvec4((injectionSwitch.x > injectionSwitch.y), true, true, false))))), true && (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), bool(bvec4((injectionSwitch.x > injectionSwitch.y), false, true, true)))))) && true))))), _GLF_IDENTITY(bool(bvec2(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)))) && _GLF_IDENTITY(true, (true) && true))), ! (! (_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), true && ((_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) - vec2(0.0, 0.0)), injectionSwitch)))).x > injectionSwitch.y)))) && _GLF_IDENTITY(true, (true) && true))))))), _GLF_IDENTITY(_GLF_IDENTITY(true, (true) || false), false || (true)))), (bool(_GLF_IDENTITY(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))), true), bvec2(bvec4(bvec2(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch, vec2(injectionSwitch[0], injectionSwitch[1])).x > injectionSwitch.y), true && ((injectionSwitch.x > injectionSwitch.y)))) && true))), true), false, true))))) && true)))
                  continue;
                 continue;
                }
               if(_GLF_DEAD(false))
                {
                 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bvec4(false, true, false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 break;
                }
               return;
               if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                {
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 continue;
                }
              }
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             for(int _injected_loop_counter = _GLF_IDENTITY(0, (0) | (0)); _GLF_WRAPPED_LOOP(_injected_loop_counter < 1); _injected_loop_counter ++)
              {
               for(int _injected_loop_counter = _GLF_IDENTITY(((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(4), int(4))), (((0 << _GLF_IDENTITY(int(4), int(4))) << _GLF_IDENTITY(int(4), int(4)))) - (0 | 0)); _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
                {
                 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY((_GLF_DEAD(false)) && true, ((_GLF_DEAD(false)) && true) || false)))
                  {
                   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
                    {
                     for(int _injected_loop_counter = ((1 << _GLF_IDENTITY(int(0), int(0))) >> _GLF_IDENTITY(int(0), int(0))); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     return;
                    }
                   if(_GLF_DEAD(false))
                    continue;
                   do
                    {
                     do
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, ! (! (false)))));
                     if(_GLF_DEAD(false))
                      break;
                    }
                   while(_GLF_WRAPPED_LOOP(false));
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     if(_GLF_DEAD(false))
                      continue;
                     do
                      {
                       return;
                       if(_GLF_DEAD(false))
                        return;
                      }
                     while(_GLF_WRAPPED_LOOP(false));
                    }
                   else
                    {
                     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                      return;
                     if(_GLF_DEAD(false))
                      continue;
                    }
                  }
                }
              }
             if(_GLF_DEAD(false))
              continue;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, true && (false))));
      }
     else
      {
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      return;
     if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
      {
       if(_GLF_WRAPPED_IF_FALSE(false))
        {
        }
       else
        {
         return;
        }
      }
     if(_GLF_DEAD(false))
      continue;
     int i = 0;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
       if(_GLF_DEAD(false))
        break;
      }
     else
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        break;
       do
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
          {
           if(_GLF_WRAPPED_IF_FALSE(false))
            {
            }
           else
            {
             return;
            }
          }
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     do
      {
       if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (false))), (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     while(_GLF_WRAPPED_LOOP(false));
     for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != (int(_GLF_ONE(1.0, injectionSwitch.y)) | 0)); _injected_loop_counter ++)
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (injectionSwitch.x > injectionSwitch.y))))))
        {
         if(_GLF_DEAD(false))
          continue;
         for(int _injected_loop_counter = _GLF_IDENTITY(1, (1) * 1); _GLF_WRAPPED_LOOP(_injected_loop_counter != 0); _injected_loop_counter --)
          {
           return;
          }
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          return;
        }
      }
     atomicStore(checker[_GLF_IDENTITY(virtual_gid, max(virtual_gid, virtual_gid))], read, 4, 64, 4);
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, mix(float(injectionSwitch.x), float(_GLF_FUZZED(-1.3)), bool(false))) > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y))))), true && (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))
          {
           for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _injected_loop_counter --)
            {
             if(_GLF_DEAD(false))
              break;
             return;
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
            }
          }
        }
       else
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
        }
       return;
      }
     if(_GLF_DEAD(false))
      break;
     do
      {
       if(_GLF_DEAD(false))
        break;
       do
        {
         if(_GLF_DEAD(false))
          return;
        }
       while(_GLF_WRAPPED_LOOP(false));
      }
     while(_GLF_WRAPPED_LOOP(false));
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      break;
     if(_GLF_DEAD(false))
      {
       if(_GLF_WRAPPED_IF_TRUE(true))
        {
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             return;
            }
           else
            {
            }
          }
         else
          {
          }
        }
       else
        {
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y, _GLF_IDENTITY(true, true && (true)) && (_GLF_IDENTITY(injectionSwitch.x < injectionSwitch.y, bool(bool(injectionSwitch.x < injectionSwitch.y)))))))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          break;
         if(_GLF_IDENTITY(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), _GLF_IDENTITY(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false, false)), bool(bvec2(bool(bvec3(_GLF_WRAPPED_IF_FALSE(_GLF_IDENTITY(false, false || (false))), false, false)), true)))))
          {
          }
         else
          {
           return;
          }
        }
      }
     else
      {
      }
     if(_GLF_DEAD(false))
      continue;
    }
   else
    {
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_DEAD(false))
      return;
     if(_GLF_WRAPPED_IF_FALSE(false))
      {
      }
     else
      {
       for(int _injected_loop_counter = _GLF_IDENTITY(1, _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) * 1, (false ? _GLF_FUZZED(_injected_loop_counter) : _GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) * 1, (_GLF_IDENTITY((_GLF_IDENTITY(1, (1) | (1))) * 1, min((_GLF_IDENTITY(1, (1) | (1))) * 1, (_GLF_IDENTITY(1, (1) | (1))) * 1))) + 0)))); _GLF_WRAPPED_LOOP(_injected_loop_counter > 0); _GLF_IDENTITY(_injected_loop_counter --, (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, (false ? _GLF_FUZZED(-55093) : _injected_loop_counter --) << 0)))), (_GLF_IDENTITY(_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, (false ? _GLF_FUZZED(-55093) : _injected_loop_counter --) << 0)))), (_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, ~ (~ (_GLF_IDENTITY(false ? _GLF_FUZZED(-55093) : _injected_loop_counter --, (false ? _GLF_FUZZED(-55093) : _injected_loop_counter --) << 0))))) ^ 0)) / 1))))
        {
         if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_IDENTITY(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))), true)), bool(bool(bool(bvec2(_GLF_IDENTITY(_GLF_DEAD(false), bool(_GLF_IDENTITY(bvec3(_GLF_DEAD(false), true, false), bvec3(bvec3(bvec3(_GLF_DEAD(false), true, false)))))), true)))))))
          {
           for(int _injected_loop_counter = 0; _GLF_WRAPPED_LOOP(_injected_loop_counter != 1); _injected_loop_counter ++)
            {
             if(_GLF_DEAD(false))
              return;
            }
           continue;
          }
         if(_GLF_DEAD(false))
          break;
         if(_GLF_WRAPPED_IF_TRUE(true))
          {
           if(_GLF_DEAD(false))
            return;
           do
            {
             if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
              {
               do
                {
                 return;
                 if(_GLF_DEAD(false))
                  continue;
                }
               while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
              }
            }
           while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, ! (! (false)))))));
           if(_GLF_WRAPPED_IF_TRUE(true))
            {
             do
              {
               if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
                return;
               for(int _injected_loop_counter = 1; _GLF_WRAPPED_LOOP(_injected_loop_counter > _GLF_IDENTITY(0, (_GLF_IDENTITY(0, min(0, 0))) / ((1 << _GLF_IDENTITY(int(2), int(2))) >> _GLF_IDENTITY(int(2), int(2))))); _injected_loop_counter --)
                {
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_WRAPPED_IF_TRUE(true))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(_GLF_IDENTITY(true, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (true))))
                    {
                     do
                      {
                       atomicStore(checker[virtual_gid], read, 4, 64, 4);
                      }
                     while(_GLF_WRAPPED_LOOP(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))));
                    }
                   else
                    {
                    }
                   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                    break;
                  }
                 else
                  {
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  return;
                 if(_GLF_DEAD(false))
                  {
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_DEAD(false))
                    continue;
                   if(_GLF_WRAPPED_IF_TRUE(true))
                    {
                     for(int _injected_loop_counter = int(_GLF_ONE(1.0, injectionSwitch.y)); _GLF_WRAPPED_LOOP(_GLF_IDENTITY(_injected_loop_counter != 0, bool(bvec4(_GLF_IDENTITY(_injected_loop_counter != 0, false || (_injected_loop_counter != 0)), true, true, true)))); _injected_loop_counter --)
                      {
                       if(_GLF_DEAD(false))
                        return;
                      }
                    }
                   else
                    {
                    }
                   continue;
                   if(_GLF_DEAD(false))
                    continue;
                  }
                 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
                  continue;
                 if(_GLF_DEAD(false))
                  break;
                 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (! (false))), (false) && true)))
                  {
                   if(_GLF_DEAD(false))
                    break;
                   continue;
                  }
                }
               if(_GLF_DEAD(false))
                break;
               if(_GLF_DEAD(false))
                continue;
              }
             while(_GLF_WRAPPED_LOOP(_GLF_IDENTITY(false, false || (false))));
             if(_GLF_DEAD(false))
              {
               if(_GLF_DEAD(false))
                continue;
               return;
              }
             if(_GLF_DEAD(false))
              return;
            }
           else
            {
            }
           if(_GLF_DEAD(false))
            continue;
          }
         else
          {
           if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            return;
           if(_GLF_DEAD(false))
            return;
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          break;
         if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(1.0)).x > injectionSwitch.y))))
          {
          }
         else
          {
           if(_GLF_WRAPPED_IF_FALSE(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
            {
            }
           else
            {
             if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
              continue;
             if(_GLF_WRAPPED_IF_TRUE(true))
              {
               if(_GLF_DEAD(false))
                return;
              }
             else
              {
              }
            }
          }
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          continue;
         if(_GLF_DEAD(false))
          continue;
         if(_GLF_DEAD(false))
          {
           if(_GLF_DEAD(false))
            break;
           break;
           if(_GLF_DEAD(false))
            break;
          }
         if(_GLF_DEAD(false))
          break;
        }
      }
     if(_GLF_WRAPPED_IF_TRUE(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        {
         if(_GLF_DEAD(false))
          return;
         return;
         if(_GLF_DEAD(false))
          continue;
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        return;
      }
     else
      {
      }
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0) > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0) > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, clamp(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0), _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x)), (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)).x) / 1.0) > injectionSwitch.y))))))) || false))
      return;
    }
  }
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
