#!amber

DEVICE_FEATURE SubgroupSizeControl.subgroupSizeControl

SET ENGINE_DATA fence_timeout_ms 10000

SHADER compute test GLSL
#version 460

#ifndef REDUCER
#define _GLF_ZERO(X, Y)                   (Y)
#define _GLF_ONE(X, Y)                    (Y)
#define _GLF_FALSE(X, Y)                  (Y)
#define _GLF_TRUE(X, Y)                   (Y)
#define _GLF_IDENTITY(X, Y)               (Y)
#define _GLF_DEAD(X)                      (X)
#define _GLF_FUZZED(X)                    (X)
#define _GLF_WRAPPED_LOOP(X)              X
#define _GLF_WRAPPED_IF_TRUE(X)           X
#define _GLF_WRAPPED_IF_FALSE(X)          X
#define _GLF_SWITCH(X)                    X
#define _GLF_MAKE_IN_BOUNDS_INT(IDX, SZ)  clamp(IDX, 0, SZ - 1)
#define _GLF_MAKE_IN_BOUNDS_UINT(IDX, SZ) clamp(IDX, 0u, SZ - 1u)
#endif


layout(set = 0, binding = 1) uniform buf1 {
 vec2 injectionSwitch;
};
#extension GL_KHR_shader_subgroup_ballot : enable
#extension GL_KHR_shader_subgroup_vote : enable
#extension GL_KHR_shader_subgroup_basic : enable
#extension GL_KHR_memory_scope_semantics : enable
layout(set = 0, binding = 0) buffer Buf {
 uint buf[];
};
layout(set = 0, binding = 2) buffer Checker {
 uint checker[];
};
layout(local_size_x = 128, local_size_y = 1, local_size_z = 1) in;
void main()
{
 uint subgroup_id = gl_SubgroupID;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) || false), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), false || ((injectionSwitch.x > injectionSwitch.y))))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bool(false))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + abs(tan(0.0))), (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x))) + abs(tan(0.0)))) * 1.0) > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(bvec4(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false, false, false)))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(_GLF_IDENTITY(injectionSwitch.x, float(_GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 1.0), clamp(vec3(injectionSwitch.x, 1.0, 1.0), _GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 1.0), clamp(vec3(injectionSwitch.x, 1.0, 1.0), vec3(injectionSwitch.x, 1.0, 1.0), _GLF_IDENTITY(vec3(injectionSwitch.x, 1.0, 1.0), (vec3(injectionSwitch.x, 1.0, 1.0)) - vec3(0.0, 0.0, 0.0)))), vec3(injectionSwitch.x, 1.0, 1.0))))), injectionSwitch.x)) > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))) || false)))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bool(false))), (false) || _GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, bool(bvec3(false, false, false))))))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, (false) && true), _GLF_IDENTITY((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y), false || ((_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) / 1.0) > injectionSwitch.y))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
  }
 uint subgroup_size = gl_SubgroupSize;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))) || (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false)))), true && (_GLF_IDENTITY((_GLF_IDENTITY(false, _GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, true), true))))) || (false))), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(false, false || (false))), ((_GLF_IDENTITY(false, false || (false)))) || false)))))) || false)))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (_GLF_DEAD(false))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec2(_GLF_DEAD(false), false))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) && true))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), bool(bool(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))))))))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (! (_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && (_GLF_DEAD(false)))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, vec2(mat4(injectionSwitch, 1.0, round(length(normalize(sqrt(vec2(1.0, 1.0))))), 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, _GLF_ZERO(0.0, injectionSwitch.x)))).x, (injectionSwitch.x) / 1.0))) > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), _GLF_IDENTITY(bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y)), true, true)), (bool(bvec4((injectionSwitch.x > injectionSwitch.y), _GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * mat2(_GLF_ONE(1.0, injectionSwitch.y))).x < injectionSwitch.y)), true, true))) || false)))))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > injectionSwitch.y) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), bool(_GLF_IDENTITY(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false), bvec2(bvec2(bvec2(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), false))))))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 uint subgroup_local_id = gl_SubgroupInvocationID;
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true)))), true && (! (_GLF_IDENTITY(false, true && (_GLF_IDENTITY(false, (false) && true))))))))), bool(bvec4(_GLF_DEAD(false), true, _GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) - 0.0))), true))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY((injectionSwitch.y) / exp(0.0), min(_GLF_IDENTITY((injectionSwitch.y) / exp(0.0), ((injectionSwitch.y) / exp(0.0)) - 0.0), (injectionSwitch.y) / exp(0.0))))))), (_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, false || (injectionSwitch.x > injectionSwitch.y)))))) || false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint num_workgroup = gl_NumWorkGroups.x;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint workgroup_size = gl_WorkGroupSize.x;
 uint workgroup_id = gl_WorkGroupID.x;
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec3(false, true, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(10.00), _GLF_FUZZED((-455.089 / -1.9))), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 uint workgroup_base = workgroup_size * workgroup_id;
 if(_GLF_DEAD(_GLF_IDENTITY(false, false || (false))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 uint virtual_gid = _GLF_IDENTITY(workgroup_base + _GLF_IDENTITY(subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, (subgroup_size) | 0u)) | (subgroup_size)), ~ (~ (subgroup_id * subgroup_size))), max(workgroup_base + subgroup_id * subgroup_size, _GLF_IDENTITY(workgroup_base + subgroup_id * subgroup_size, uint(uvec2(workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? subgroup_size : _GLF_FUZZED(subgroup_local_id))), 1u))))) + subgroup_local_id;
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, bool(bvec3(false, false, true))), _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && (bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true))))))), ! (_GLF_IDENTITY(! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))), bool(bvec3(false, false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false))))))))) || false))))), true && (! (bool(_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(bvec3(false, false, true)))), true && _GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))), bool(bvec3(false, false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bvec4(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bool(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false))))))))))), false, false, false))))))) || false)), ! (! (_GLF_IDENTITY((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))), bool(bvec3(false, false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bvec4(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bool(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false))))))))))), false, false, false))))))) || false)), true && ((_GLF_IDENTITY(bool(_GLF_IDENTITY(_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), bool(bvec4(! (false), true, true, false))))), bool(bvec3(false, false, true)))), (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, true)), ! (! (bool(bvec3(false, false, true))))))), true && (_GLF_IDENTITY(bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))), _GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bvec4(_GLF_IDENTITY(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false)))))))), bool(bool(! (! (bool(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, false, true), bvec3(bvec4(bvec3(false, false, _GLF_IDENTITY(true, bool(bvec3(true, true, false)))), false))))))))))), false, false, false))))))) || false)))))))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(false))
          barrier();
         barrier();
        }
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
        {
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (false)))))
          barrier();
         if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch.y, float(mat3x2(injectionSwitch.y, 0.0, 1.0, 1.0, 1.0, 0.0)))) / 1.0)) && true)))))
          {
           if(_GLF_DEAD(false))
            barrier();
           if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
            barrier();
           barrier();
          }
         if(_GLF_DEAD(false))
          barrier();
         if(_GLF_DEAD(false))
          barrier();
         barrier();
         if(_GLF_DEAD(false))
          barrier();
        }
       barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_IDENTITY(false, false || (_GLF_IDENTITY(false, _GLF_IDENTITY((false) && true, _GLF_IDENTITY(false, _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) || (false)) || ((false) && true)))))))
      {
       if(_GLF_DEAD(false))
        {
         if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
          barrier();
         barrier();
        }
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > _GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mix(vec2((injectionSwitch)[0], _GLF_FUZZED(-255.365)), _GLF_IDENTITY(vec2(_GLF_FUZZED((6087.8581 * 7415.6601)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), max(_GLF_IDENTITY(vec2(_GLF_FUZZED((6087.8581 * 7415.6601)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), min(vec2(_GLF_FUZZED((6087.8581 * 7415.6601)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))), vec2(_GLF_FUZZED((6087.8581 * 7415.6601)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))), vec2(_GLF_FUZZED((6087.8581 * 7415.6601)), _GLF_IDENTITY((injectionSwitch)[1], min((injectionSwitch)[1], (injectionSwitch)[1]))))), bvec2(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), (injectionSwitch) + vec2(0.0, 0.0)).y), ((injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)).y)) || false))))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_IDENTITY(_GLF_DEAD(false), (_GLF_DEAD(false)) || false)) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(_GLF_IDENTITY(false, false || (false)), (injectionSwitch.x > injectionSwitch.y)), ! (_GLF_IDENTITY(! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), true && (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, float(float(injectionSwitch.y))))), (_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, ! (! (injectionSwitch.x > injectionSwitch.y)))))) || false)), (_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))) || false))) && true))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
       if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || false)))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_IDENTITY(_GLF_DEAD(false), ! (_GLF_IDENTITY(! (_GLF_DEAD(false)), bool(bvec4(! _GLF_IDENTITY(_GLF_IDENTITY((_GLF_DEAD(false)), ! (! ((_GLF_DEAD(false))))), ! (_GLF_IDENTITY(! ((_GLF_DEAD(false))), bool(bool(! ((_GLF_DEAD(false)))))))), true, false, true))))))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
  }
 if(_GLF_DEAD(false))
  barrier();
 uint next_virtual_gid = workgroup_base + subgroup_id * _GLF_IDENTITY(subgroup_size, (_GLF_IDENTITY(subgroup_size, clamp(subgroup_size, _GLF_IDENTITY(subgroup_size, min(subgroup_size, subgroup_size)), subgroup_size))) * 1u) + ((subgroup_local_id + 1) % subgroup_size);
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_IDENTITY(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), bool(bvec4(bool(bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))), false, true, true))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false)))))))), (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))), ! (! (_GLF_DEAD(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), (_GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ! (! ((injectionSwitch.x > injectionSwitch.y))))) && true)))))))
  barrier();
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch, (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch))) - sin(vec2(0.0, 0.0))).y))))
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), ! (! (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 atomicStore(buf[next_virtual_gid], uint(1), 4, 64, 4);
 if(_GLF_DEAD(_GLF_IDENTITY(false, bool(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(false, ! (! (false)))), bvec3(bvec4(_GLF_IDENTITY(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false), bvec3(bvec3(bvec3(false, _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)))), false)))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(_GLF_IDENTITY(false, true && (false)), (_GLF_IDENTITY(injectionSwitch, (injectionSwitch) * vec2(1.0, 1.0)).x > injectionSwitch.y))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, _GLF_ONE(1.0, injectionSwitch.y) * (injectionSwitch.x)) > _GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, injectionSwitch.y, injectionSwitch.y)), injectionSwitch.y))))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_IDENTITY(_GLF_DEAD(false), false || (_GLF_DEAD(false))))
  barrier();
 uint read = atomicLoad(buf[virtual_gid], 4, 64, 0);
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_IDENTITY(subgroup_local_id, 0u | (subgroup_local_id)) + _GLF_IDENTITY(1, (_GLF_IDENTITY(1, (_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x, min(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(_GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, (1.0) - 0.0)), float(_GLF_FUZZED(4.3)), bool(false))), injectionSwitch.y)) * (injectionSwitch)).x, _GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x)) < _GLF_IDENTITY(injectionSwitch, min(injectionSwitch, _GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)))))).y)) ? 1 : _GLF_FUZZED(-52787), clamp(_GLF_TRUE(_GLF_IDENTITY(true, true && (true)), (_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y)) ? 1 : _GLF_FUZZED(-52787), _GLF_TRUE(true, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)), mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < _GLF_IDENTITY(injectionSwitch.y, min(injectionSwitch.y, injectionSwitch.y)))) ? 1 : _GLF_FUZZED(-52787), _GLF_TRUE(_GLF_IDENTITY(true, (true) || false), _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))))) - vec2(0.0, 0.0))).x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y, false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ((false) || false) || false)))), false, true))))))), ((_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), (_GLF_IDENTITY(mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch), vec2(1.0, 1.0) * (mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (_GLF_IDENTITY(injectionSwitch, vec2(1.0, 1.0) * (_GLF_IDENTITY(injectionSwitch, min(injectionSwitch, injectionSwitch)))))))) - vec2(0.0, 0.0))).x < injectionSwitch.y, _GLF_IDENTITY(bool(bvec4(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y, false, false, true)), ! (! (bool(bvec4(_GLF_IDENTITY(injectionSwitch, mat2(_GLF_ONE(1.0, injectionSwitch.y)) * (injectionSwitch)).x < injectionSwitch.y, _GLF_IDENTITY(false, _GLF_IDENTITY((false) || false, true && (_GLF_IDENTITY((false) || false, ((false) || false) || false)))), false, true)))))))) && true)) ? 1 : _GLF_FUZZED(-52787)))))) + int(_GLF_ZERO(0.0, _GLF_IDENTITY(injectionSwitch, min(_GLF_IDENTITY(injectionSwitch, (injectionSwitch) + vec2(0.0, 0.0)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), ((injectionSwitch)) * mat2(1.0)) - vec2(0.0, _GLF_IDENTITY(0.0, max(0.0, 0.0)))))).x))) < subgroup_size)
  {
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && true)))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   int i = 0;
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_IDENTITY(_GLF_DEAD(false), true && (_GLF_DEAD(false))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_IDENTITY(false, (false) || false), false || _GLF_IDENTITY((_GLF_IDENTITY(false, ! (! (false)))), false || ((_GLF_IDENTITY(_GLF_IDENTITY(false, true && (false)), ! (! (false)))))))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, determinant(mat3(sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0)), max(_GLF_IDENTITY(vec2(mat4(injectionSwitch, 0.0, determinant(mat3(sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0)), max(vec2(mat4(injectionSwitch, 0.0, determinant(mat3(sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0)), vec2(mat4(injectionSwitch, 0.0, determinant(mat3(sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0)))), vec2(mat4(injectionSwitch, 0.0, determinant(mat3(sqrt(1.0), 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0)), 0.0, 1.0, 0.0, 1.0, 1.0, determinant(mat2(1.0, 1.0, 0.0, 1.0)), 1.0, 1.0, 1.0, 0.0, abs(0.0), 1.0))))).x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, ! _GLF_IDENTITY((_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), true && (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true), (_GLF_IDENTITY(_GLF_IDENTITY(! (false), ! (! (! (false)))), (_GLF_IDENTITY(! (false), ! (! (! (false))))) && true)) && true)))), (_GLF_IDENTITY((_GLF_IDENTITY(! (false), ! (! (! (false))))), _GLF_IDENTITY(! (! ((_GLF_IDENTITY(! (false), ! (! (! (false))))))), ! (! (! (! ((_GLF_IDENTITY(! (false), ! (! (! (false)))))))))))) || false))))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), (_GLF_IDENTITY(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, clamp(injectionSwitch.y, _GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.y, max(_GLF_IDENTITY(injectionSwitch.y, (injectionSwitch.y) * 1.0), injectionSwitch.y)), (false ? _GLF_FUZZED(-8231.9772) : injectionSwitch.y))) / 1.0), injectionSwitch.y)))), _GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (false ? _GLF_FUZZED(vec2(68.31, -2.0)) : _GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)))).x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), bool(_GLF_IDENTITY(bvec2(_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8296.3802), _GLF_FUZZED(-5.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), false)), ! (! (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8296.3802), _GLF_FUZZED(-5.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), false)), false || (_GLF_IDENTITY(bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8296.3802), _GLF_FUZZED(-5.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), false)), ! (! (bool(bvec3(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_TRUE(true, (injectionSwitch.x < _GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(-8296.3802), _GLF_FUZZED(-5.1)), vec2((injectionSwitch)[0], (injectionSwitch)[1]), bvec2(true, true))).y)), false)))))))))), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))), bvec2(bvec4(bvec2(bool(bvec3(_GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), false)), _GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), bool(_GLF_IDENTITY(bvec3(_GLF_IDENTITY(_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch, clamp(injectionSwitch, injectionSwitch, injectionSwitch)).x < injectionSwitch.y)), ! (! (_GLF_TRUE(true, (_GLF_IDENTITY(injectionSwitch.x, (_GLF_IDENTITY(injectionSwitch.x, (injectionSwitch.x) * 1.0)) / 1.0) < injectionSwitch.y))))), true, true), bvec3(bvec4(bvec3(_GLF_IDENTITY(_GLF_IDENTITY(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), _GLF_IDENTITY(bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false)), ! (! (bool(bvec4(_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)), true, false, false)))))), ! (! (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y))))), true, true), true)))))), true, false))))))) || false)))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY((false), _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) && ((_GLF_IDENTITY(false, bool(bvec2(false, true)))))) && true)))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_IDENTITY(false, (_GLF_IDENTITY(false, ! (! (false)))) || false)))
        barrier();
       barrier();
       if(_GLF_DEAD(false))
        barrier();
       if(_GLF_DEAD(false))
        barrier();
      }
     barrier();
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, mix(vec2(_GLF_FUZZED(1.2), (injectionSwitch)[1]), vec2((injectionSwitch)[0], _GLF_FUZZED(71.76)), bvec2(true, false))).x > injectionSwitch.y))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      {
       if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     barrier();
    }
   if(_GLF_IDENTITY(_GLF_DEAD(false), bool(bvec4(_GLF_DEAD(false), _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)), _GLF_FALSE(false, _GLF_IDENTITY((injectionSwitch.x > injectionSwitch.y), ((injectionSwitch.x > injectionSwitch.y)) || false)), true))))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, clamp(injectionSwitch.x, injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch, (true ? injectionSwitch : _GLF_FUZZED(vec2(-273.275, -1655.7312)))).x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(_GLF_IDENTITY(_GLF_IDENTITY(injectionSwitch.x, float(mat2x4(injectionSwitch.x, _GLF_IDENTITY(dot(vec4(1.0, determinant(mat2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0)), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(1.0, determinant(mat2(1.0, 0.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(1.0, max(1.0, 1.0))), float(_GLF_FUZZED(49.20)), bool(false))), 1.0)), 0.0, 1.0), vec4(0.0, 0.0, 1.0, 0.0))), 1.0, 1.0, 0.0, 1.0, 0.0, length(vec4(0.0, 0.0, 0.0, 0.0))))) > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(_GLF_IDENTITY(injectionSwitch, mat2(1.0) * (injectionSwitch)), _GLF_IDENTITY(injectionSwitch, _GLF_IDENTITY((injectionSwitch), _GLF_IDENTITY(((injectionSwitch)), (((injectionSwitch))) * mat2(1.0)) * mat2(_GLF_ONE(1.0, injectionSwitch.y))) - abs(vec2(0.0, 0.0))))).x > injectionSwitch.y) && true), (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, (_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, _GLF_IDENTITY(injectionSwitch, (injectionSwitch) - _GLF_IDENTITY(abs(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), min(abs(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0)), abs(vec2(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 0.0))))))).x > injectionSwitch.y) && true)) || false)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(_GLF_IDENTITY(false, (false) || _GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     if(_GLF_DEAD(false))
      {
       if(_GLF_DEAD(false))
        barrier();
       barrier();
      }
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(bool(bvec3(false, false, _GLF_IDENTITY(true, false || (true)))), ! (! (bool(bvec3(false, false, true))))))))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
   if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x, max(injectionSwitch.x, injectionSwitch.x)) > injectionSwitch.y))))
    barrier();
  }
 else
  {
   if(_GLF_DEAD(_GLF_IDENTITY(false, true && (false))))
    {
     if(_GLF_DEAD(false))
      barrier();
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_IDENTITY(false, bool(bool(false)))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   if(_GLF_DEAD(false))
    {
     if(_GLF_DEAD(false))
      barrier();
     barrier();
    }
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   if(_GLF_DEAD(false))
    barrier();
   atomicStore(checker[virtual_gid], read, 4, 64, 4);
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, _GLF_IDENTITY(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(injectionSwitch.x > injectionSwitch.y)))), bool(bool(bool(_GLF_IDENTITY(bool(injectionSwitch.x > injectionSwitch.y), false || (bool(_GLF_IDENTITY(injectionSwitch, max(injectionSwitch, injectionSwitch)).x > injectionSwitch.y))))))))))))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, _GLF_IDENTITY(! (! (false)), bool(bvec4(! (! (false)), true, true, true))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, ! (! (_GLF_IDENTITY(false, bool(bvec4(false, false, true, true))))))))
  {
   if(_GLF_DEAD(false))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(false))
  barrier();
 if(_GLF_DEAD(_GLF_IDENTITY(false, (false) && _GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)))))
  {
   if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y))))
    barrier();
   barrier();
  }
 if(_GLF_DEAD(_GLF_FALSE(false, (_GLF_IDENTITY(injectionSwitch.x > injectionSwitch.y, true && (injectionSwitch.x > injectionSwitch.y))))))
  barrier();
 if(_GLF_DEAD(_GLF_FALSE(false, (injectionSwitch.x > _GLF_IDENTITY(injectionSwitch.y, _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, _GLF_IDENTITY(0.0, min(_GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), _GLF_IDENTITY(0.0, max(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-0.0) : 0.0)))))), cos(0.0), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, cos(0.0), sin(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0)), mix(float(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, cos(0.0), sin(0.0), 1.0, _GLF_IDENTITY(0.0, min(0.0, 0.0)), 0.0, 1.0, 1.0, 0.0))), float(_GLF_FUZZED(vec2(7.4, -691.073).x)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))) + 0.0, min((float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, cos(0.0), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))) + 0.0, (_GLF_IDENTITY(_GLF_IDENTITY(float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) ? _GLF_FUZZED(-67.02) : injectionSwitch.y)), tan(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-420.864))), 1.0, 0.0)), (float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, (_GLF_IDENTITY(false, ! (_GLF_IDENTITY(! (false), false || (! (false))))) ? _GLF_FUZZED(-67.02) : injectionSwitch.y)), tan(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, min(1.0, 1.0)))), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))) - _GLF_IDENTITY(_GLF_ZERO(0.0, injectionSwitch.x), (false ? _GLF_FUZZED(-798.012) : _GLF_ZERO(0.0, injectionSwitch.x)))), clamp(_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, _GLF_IDENTITY(tan(0.0), min(tan(0.0), _GLF_IDENTITY(tan(0.0), max(tan(0.0), tan(0.0))))), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), (_GLF_IDENTITY(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), _GLF_IDENTITY(clamp(float(vec3(cos(0.0), 0.0, 1.0)), _GLF_IDENTITY(float(vec3(_GLF_IDENTITY(cos(0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? _GLF_IDENTITY(cos(0.0), 0.0 + (cos(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(vec4(0.0, exp(0.0), 1.0, 0.0), (vec4(0.0, exp(0.0), 1.0, 0.0)) * mat4(1.0))))))) : _GLF_FUZZED(-153.981))), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)))), float(vec3(_GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 0.0, 1.0))), _GLF_IDENTITY((clamp(float(vec3(cos(0.0), _GLF_IDENTITY(0.0, (0.0) / 1.0), 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)))), clamp((clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(_GLF_IDENTITY(0.0, float(vec4(0.0, 0.0, 0.0, 0.0)))), 0.0, 1.0)))), (clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), min(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)))), float(vec3(cos(0.0), 0.0, 1.0)))))), (clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(vec2(1.0, determinant(mat2(0.0, 1.0, 0.0, 0.0))))))))))) - _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(2.0)), float(0.0), bool(true)))))), sin(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, max(1.0, 1.0)), 1.0, 0.0)), clamp(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(9.1, length(_GLF_IDENTITY(vec2(0.0, 0.0), (false ? _GLF_FUZZED(vec2(532.828, -63.63)) : _GLF_IDENTITY(vec2(0.0, 0.0), min(vec2(0.0, 0.0), vec2(0.0, 0.0)))))) + (9.1)))), bool(false)))))))))), (true ? _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, _GLF_IDENTITY(1.0, 0.0 + (1.0)))), 1.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(_GLF_IDENTITY(9.1, length(vec2(0.0, 0.0)) + (9.1)))), bool(false)))))))))) : _GLF_FUZZED(2.6))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat3x4(_GLF_IDENTITY(injectionSwitch.y, mix(float(_GLF_FUZZED(-759.567)), float(injectionSwitch.y), bool(true))), tan(_GLF_IDENTITY(0.0, (0.0) + _GLF_IDENTITY(0.0, mix(float(_GLF_FUZZED(-6.7)), float(_GLF_IDENTITY(0.0, float(_GLF_IDENTITY(mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(1.0)))), (false ? _GLF_FUZZED(mat4x2(710.941, -5666.1668, -12.18, 522.383, 0.0, 8.5, -17.01, -2494.6258)) : mat4x2(0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, round(length(normalize(1.0))))))))), bool(true))))), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(_GLF_IDENTITY(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : 0.0)))), float(mat4(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(-6.5) : 0.0)))), log(1.0), sin(0.0), 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, round(length(normalize(vec3(1.0, 1.0, 1.0)))), 1.0, 0.0, sqrt(0.0), 1.0)))), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, _GLF_IDENTITY(1.0, clamp(_GLF_IDENTITY(1.0, mix(float(_GLF_FUZZED((-4.9 - 1.5))), float(1.0), bool(true))), 1.0, 1.0)), 1.0, 0.0)), float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), max(cos(0.0), cos(0.0))), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(_GLF_IDENTITY(float(vec3(_GLF_IDENTITY(cos(0.0), mix(float(_GLF_FUZZED(float(14393u))), float(cos(_GLF_IDENTITY(0.0, _GLF_IDENTITY(float(mat2x4(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0)), 1.0 * (float(mat2x4(0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0))))))), bool(true))), 0.0, 1.0)), mix(float(_GLF_IDENTITY(_GLF_FUZZED(99.42), max(_GLF_FUZZED(99.42), _GLF_FUZZED(99.42)))), float(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), _GLF_IDENTITY((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0), min(_GLF_IDENTITY((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0), mix(float((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0)), float(_GLF_FUZZED(-5204.0160)), bool(false))), _GLF_IDENTITY((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0), _GLF_IDENTITY(float(mat2x4(_GLF_IDENTITY((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0), (true ? (_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0) : _GLF_FUZZED(-7.5))), 0.0, 1.0, tan(0.0), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0)), (false ? _GLF_FUZZED(-196.400) : float(mat2x4(_GLF_IDENTITY((_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0), (true ? (_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat4x2(_GLF_IDENTITY(1.0, clamp(1.0, 1.0, 1.0)), 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), float(mat2x4(_GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), clamp(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), _GLF_IDENTITY(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), min(round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))), round(length(normalize(abs(vec3(1.0, 1.0, 1.0))))))))), exp(0.0), sqrt(1.0), 0.0, _GLF_ZERO(0.0, injectionSwitch.x), 0.0, determinant(mat2(1.0, round(length(normalize(1.0))), tan(0.0), 1.0)), sqrt(0.0))))))))), float(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(_GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), clamp(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), vec3(_GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), (float(vec3(cos(0.0), 0.0, 1.0))) + tan(0.0)), 0.0, 1.0), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0))), vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), _GLF_IDENTITY(vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0), cos(vec3(0.0, 0.0, 0.0)) * (vec3(float(vec3(cos(0.0), 0.0, 1.0)), 0.0, 1.0)))))))) / abs(1.0) : _GLF_FUZZED(-7.5))), 0.0, 1.0, tan(0.0), 0.0, 0.0, round(length(normalize(vec2(1.0, 1.0)))), 0.0))))))))), _GLF_IDENTITY(bool(true), _GLF_IDENTITY(bool(bool(bool(true))), bool(bool(bool(bool(bool(true))))))))), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(_GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-81.29)))), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0))))) + 0.0), _GLF_IDENTITY(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, (1.0) / 1.0)))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), max(float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)), float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, 0.0, _GLF_IDENTITY(_GLF_IDENTITY(cos(0.0), float(mat3x2(cos(0.0), 1.0, 1.0, 1.0, 1.0, 1.0))), _GLF_IDENTITY(float(vec3(cos(_GLF_IDENTITY(0.0, (_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)) ? _GLF_FUZZED(-48.90) : 0.0))), _GLF_IDENTITY(0.0, _GLF_IDENTITY((0.0) + tan(0.0), (_GLF_TRUE(true, (injectionSwitch.x < injectionSwitch.y)) ? (0.0) + tan(0.0) : _GLF_FUZZED(2680.0729)))), 1.0)), _GLF_IDENTITY(clamp(float(vec3(_GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, float(mat2(1.0, 1.0, 1.0, 0.0)))))), min(_GLF_IDENTITY(clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, (true ? 1.0 : _GLF_FUZZED(-5.4))))), float(vec3(cos(0.0), 0.0, _GLF_IDENTITY(1.0, (false ? _GLF_FUZZED(-70.43) : 1.0))))), 1.0 * (_GLF_IDENTITY(clamp(float(vec3(cos(0.0), _GLF_IDENTITY(0.0, (false ? _GLF_FUZZED(7779.0617) : 0.0)), 1.0)), float(_GLF_IDENTITY(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(vec3(_GLF_IDENTITY(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), _GLF_IDENTITY(transpose(transpose(_GLF_IDENTITY(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), mat2(mat4x2(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))))), (true ? transpose(transpose(_GLF_IDENTITY(mat2(vec3(_GLF_IDENTITY(cos(0.0), (_GLF_IDENTITY(cos(0.0), min(_GLF_IDENTITY(cos(0.0), min(cos(0.0), cos(0.0))), cos(0.0)))) / _GLF_IDENTITY(dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0)), dot(vec2(sin(0.0), 1.0), vec2(0.0, 1.0)))), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, _GLF_IDENTITY(1.0, mix(float(1.0), float(_GLF_FUZZED(5.4)), bool(false))), 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), mat2(mat4x2(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0))))))))) : _GLF_IDENTITY(_GLF_FUZZED(outerProduct(vec2(-5.2, -9.4), vec2(44.59, -9543.1910))), mat2(mat2x4(_GLF_FUZZED(outerProduct(vec2(-5.2, -9.4), vec2(44.59, -9543.1910)))))))))), (vec3(_GLF_IDENTITY(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), transpose(transpose(_GLF_IDENTITY(mat2(vec3(cos(0.0), 0.0, 1.0), _GLF_IDENTITY(dot(vec4(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0)), 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))), mat2(mat4x2(mat2(vec3(cos(0.0), _GLF_IDENTITY(0.0, (true ? 0.0 : _GLF_FUZZED(-4.5))), 1.0), _GLF_IDENTITY(dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)), dot(vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0)))))))))))) - vec3(0.0, 0.0, 0.0)))), float(vec3(cos(_GLF_IDENTITY(0.0, min(0.0, _GLF_IDENTITY(0.0, clamp(0.0, 0.0, 0.0))))), 0.0, 1.0))), mix(float(clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)))), float(_GLF_FUZZED(-83.02)), bool(false))))), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, 1.0, 0.0)))), float(mat3x4(injectionSwitch.y, tan(0.0), 0.0, _GLF_IDENTITY(0.0, (0.0) - 0.0), _GLF_IDENTITY(cos(0.0), _GLF_IDENTITY(float(vec3(cos(0.0), 0.0, 1.0)), clamp(float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0)), float(vec3(cos(0.0), 0.0, 1.0))))), sin(0.0), 1.0, 0.0, 0.0, 1.0, _GLF_IDENTITY(1.0, mix(float(_GLF_IDENTITY(_GLF_FUZZED(786.161), mix(float(_GLF_FUZZED(786.161)), float(_GLF_FUZZED(22.75)), bool(_GLF_FALSE(false, (injectionSwitch.x > injectionSwitch.y)))))), float(1.0), bool(true))), 0.0))))) + 0.0))))))))
  barrier();
}

END

BUFFER tester DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected DATA_TYPE uint32 SIZE 8388096 FILL 2
BUFFER injection DATA_TYPE vec2<float> DATA
 0.0 1.0
END
BUFFER checker DATA_TYPE uint32 SIZE 8388096 FILL 0
BUFFER expected_checker DATA_TYPE uint32 SIZE 8388096 FILL 1

PIPELINE compute test_pipe
  ATTACH test
  BIND BUFFER tester AS storage DESCRIPTOR_SET 0 BINDING 0 
  BIND BUFFER injection AS uniform DESCRIPTOR_SET 0 BINDING 1 
  BIND BUFFER checker AS storage DESCRIPTOR_SET 0 BINDING 2 

  SUBGROUP test
	  VARYING_SIZE on
  END
END

RUN test_pipe 65532 1 1
EXPECT checker EQ_BUFFER expected_checker
